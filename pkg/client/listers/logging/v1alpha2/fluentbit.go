/*
Copyright 2019 The KubeSphere authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha2

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha2 "kubesphere.io/kubesphere/pkg/apis/logging/v1alpha2"
)

// FluentBitLister helps list FluentBits.
type FluentBitLister interface {
	// List lists all FluentBits in the indexer.
	List(selector labels.Selector) (ret []*v1alpha2.FluentBit, err error)
	// FluentBits returns an object that can list and get FluentBits.
	FluentBits(namespace string) FluentBitNamespaceLister
	FluentBitListerExpansion
}

// fluentBitLister implements the FluentBitLister interface.
type fluentBitLister struct {
	indexer cache.Indexer
}

// NewFluentBitLister returns a new FluentBitLister.
func NewFluentBitLister(indexer cache.Indexer) FluentBitLister {
	return &fluentBitLister{indexer: indexer}
}

// List lists all FluentBits in the indexer.
func (s *fluentBitLister) List(selector labels.Selector) (ret []*v1alpha2.FluentBit, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.FluentBit))
	})
	return ret, err
}

// FluentBits returns an object that can list and get FluentBits.
func (s *fluentBitLister) FluentBits(namespace string) FluentBitNamespaceLister {
	return fluentBitNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FluentBitNamespaceLister helps list and get FluentBits.
type FluentBitNamespaceLister interface {
	// List lists all FluentBits in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha2.FluentBit, err error)
	// Get retrieves the FluentBit from the indexer for a given namespace and name.
	Get(name string) (*v1alpha2.FluentBit, error)
	FluentBitNamespaceListerExpansion
}

// fluentBitNamespaceLister implements the FluentBitNamespaceLister
// interface.
type fluentBitNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FluentBits in the indexer for a given namespace.
func (s fluentBitNamespaceLister) List(selector labels.Selector) (ret []*v1alpha2.FluentBit, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha2.FluentBit))
	})
	return ret, err
}

// Get retrieves the FluentBit from the indexer for a given namespace and name.
func (s fluentBitNamespaceLister) Get(name string) (*v1alpha2.FluentBit, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha2.Resource("fluentbit"), name)
	}
	return obj.(*v1alpha2.FluentBit), nil
}
