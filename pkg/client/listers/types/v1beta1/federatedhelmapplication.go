/*
Copyright 2020 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "kubesphere.io/kubesphere/pkg/apis/types/v1beta1"
)

// FederatedHelmApplicationLister helps list FederatedHelmApplications.
type FederatedHelmApplicationLister interface {
	// List lists all FederatedHelmApplications in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.FederatedHelmApplication, err error)
	// Get retrieves the FederatedHelmApplication from the index for a given name.
	Get(name string) (*v1beta1.FederatedHelmApplication, error)
	FederatedHelmApplicationListerExpansion
}

// federatedHelmApplicationLister implements the FederatedHelmApplicationLister interface.
type federatedHelmApplicationLister struct {
	indexer cache.Indexer
}

// NewFederatedHelmApplicationLister returns a new FederatedHelmApplicationLister.
func NewFederatedHelmApplicationLister(indexer cache.Indexer) FederatedHelmApplicationLister {
	return &federatedHelmApplicationLister{indexer: indexer}
}

// List lists all FederatedHelmApplications in the indexer.
func (s *federatedHelmApplicationLister) List(selector labels.Selector) (ret []*v1beta1.FederatedHelmApplication, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.FederatedHelmApplication))
	})
	return ret, err
}

// Get retrieves the FederatedHelmApplication from the index for a given name.
func (s *federatedHelmApplicationLister) Get(name string) (*v1beta1.FederatedHelmApplication, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("federatedhelmapplication"), name)
	}
	return obj.(*v1beta1.FederatedHelmApplication), nil
}
