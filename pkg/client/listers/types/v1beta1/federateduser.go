/*
Copyright 2020 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "kubesphere.io/kubesphere/pkg/apis/types/v1beta1"
)

// FederatedUserLister helps list FederatedUsers.
type FederatedUserLister interface {
	// List lists all FederatedUsers in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.FederatedUser, err error)
	// FederatedUsers returns an object that can list and get FederatedUsers.
	FederatedUsers(namespace string) FederatedUserNamespaceLister
	FederatedUserListerExpansion
}

// federatedUserLister implements the FederatedUserLister interface.
type federatedUserLister struct {
	indexer cache.Indexer
}

// NewFederatedUserLister returns a new FederatedUserLister.
func NewFederatedUserLister(indexer cache.Indexer) FederatedUserLister {
	return &federatedUserLister{indexer: indexer}
}

// List lists all FederatedUsers in the indexer.
func (s *federatedUserLister) List(selector labels.Selector) (ret []*v1beta1.FederatedUser, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.FederatedUser))
	})
	return ret, err
}

// FederatedUsers returns an object that can list and get FederatedUsers.
func (s *federatedUserLister) FederatedUsers(namespace string) FederatedUserNamespaceLister {
	return federatedUserNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FederatedUserNamespaceLister helps list and get FederatedUsers.
type FederatedUserNamespaceLister interface {
	// List lists all FederatedUsers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.FederatedUser, err error)
	// Get retrieves the FederatedUser from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.FederatedUser, error)
	FederatedUserNamespaceListerExpansion
}

// federatedUserNamespaceLister implements the FederatedUserNamespaceLister
// interface.
type federatedUserNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FederatedUsers in the indexer for a given namespace.
func (s federatedUserNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.FederatedUser, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.FederatedUser))
	})
	return ret, err
}

// Get retrieves the FederatedUser from the indexer for a given namespace and name.
func (s federatedUserNamespaceLister) Get(name string) (*v1beta1.FederatedUser, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("federateduser"), name)
	}
	return obj.(*v1beta1.FederatedUser), nil
}
