/*
Copyright 2020 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "kubesphere.io/kubesphere/pkg/apis/types/v1beta1"
)

// FederatedLimitRangeLister helps list FederatedLimitRanges.
type FederatedLimitRangeLister interface {
	// List lists all FederatedLimitRanges in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.FederatedLimitRange, err error)
	// FederatedLimitRanges returns an object that can list and get FederatedLimitRanges.
	FederatedLimitRanges(namespace string) FederatedLimitRangeNamespaceLister
	FederatedLimitRangeListerExpansion
}

// federatedLimitRangeLister implements the FederatedLimitRangeLister interface.
type federatedLimitRangeLister struct {
	indexer cache.Indexer
}

// NewFederatedLimitRangeLister returns a new FederatedLimitRangeLister.
func NewFederatedLimitRangeLister(indexer cache.Indexer) FederatedLimitRangeLister {
	return &federatedLimitRangeLister{indexer: indexer}
}

// List lists all FederatedLimitRanges in the indexer.
func (s *federatedLimitRangeLister) List(selector labels.Selector) (ret []*v1beta1.FederatedLimitRange, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.FederatedLimitRange))
	})
	return ret, err
}

// FederatedLimitRanges returns an object that can list and get FederatedLimitRanges.
func (s *federatedLimitRangeLister) FederatedLimitRanges(namespace string) FederatedLimitRangeNamespaceLister {
	return federatedLimitRangeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FederatedLimitRangeNamespaceLister helps list and get FederatedLimitRanges.
type FederatedLimitRangeNamespaceLister interface {
	// List lists all FederatedLimitRanges in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.FederatedLimitRange, err error)
	// Get retrieves the FederatedLimitRange from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.FederatedLimitRange, error)
	FederatedLimitRangeNamespaceListerExpansion
}

// federatedLimitRangeNamespaceLister implements the FederatedLimitRangeNamespaceLister
// interface.
type federatedLimitRangeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FederatedLimitRanges in the indexer for a given namespace.
func (s federatedLimitRangeNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.FederatedLimitRange, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.FederatedLimitRange))
	})
	return ret, err
}

// Get retrieves the FederatedLimitRange from the indexer for a given namespace and name.
func (s federatedLimitRangeNamespaceLister) Get(name string) (*v1beta1.FederatedLimitRange, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("federatedlimitrange"), name)
	}
	return obj.(*v1beta1.FederatedLimitRange), nil
}
