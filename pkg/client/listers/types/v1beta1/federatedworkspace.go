/*
Copyright 2020 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "kubesphere.io/kubesphere/pkg/apis/types/v1beta1"
)

// FederatedWorkspaceLister helps list FederatedWorkspaces.
type FederatedWorkspaceLister interface {
	// List lists all FederatedWorkspaces in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.FederatedWorkspace, err error)
	// FederatedWorkspaces returns an object that can list and get FederatedWorkspaces.
	FederatedWorkspaces(namespace string) FederatedWorkspaceNamespaceLister
	FederatedWorkspaceListerExpansion
}

// federatedWorkspaceLister implements the FederatedWorkspaceLister interface.
type federatedWorkspaceLister struct {
	indexer cache.Indexer
}

// NewFederatedWorkspaceLister returns a new FederatedWorkspaceLister.
func NewFederatedWorkspaceLister(indexer cache.Indexer) FederatedWorkspaceLister {
	return &federatedWorkspaceLister{indexer: indexer}
}

// List lists all FederatedWorkspaces in the indexer.
func (s *federatedWorkspaceLister) List(selector labels.Selector) (ret []*v1beta1.FederatedWorkspace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.FederatedWorkspace))
	})
	return ret, err
}

// FederatedWorkspaces returns an object that can list and get FederatedWorkspaces.
func (s *federatedWorkspaceLister) FederatedWorkspaces(namespace string) FederatedWorkspaceNamespaceLister {
	return federatedWorkspaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FederatedWorkspaceNamespaceLister helps list and get FederatedWorkspaces.
type FederatedWorkspaceNamespaceLister interface {
	// List lists all FederatedWorkspaces in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.FederatedWorkspace, err error)
	// Get retrieves the FederatedWorkspace from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.FederatedWorkspace, error)
	FederatedWorkspaceNamespaceListerExpansion
}

// federatedWorkspaceNamespaceLister implements the FederatedWorkspaceNamespaceLister
// interface.
type federatedWorkspaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FederatedWorkspaces in the indexer for a given namespace.
func (s federatedWorkspaceNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.FederatedWorkspace, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.FederatedWorkspace))
	})
	return ret, err
}

// Get retrieves the FederatedWorkspace from the indexer for a given namespace and name.
func (s federatedWorkspaceNamespaceLister) Get(name string) (*v1beta1.FederatedWorkspace, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("federatedworkspace"), name)
	}
	return obj.(*v1beta1.FederatedWorkspace), nil
}
