/*
Copyright 2020 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "kubesphere.io/kubesphere/pkg/apis/types/v1beta1"
)

// FederatedGroupLister helps list FederatedGroups.
type FederatedGroupLister interface {
	// List lists all FederatedGroups in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.FederatedGroup, err error)
	// Get retrieves the FederatedGroup from the index for a given name.
	Get(name string) (*v1beta1.FederatedGroup, error)
	FederatedGroupListerExpansion
}

// federatedGroupLister implements the FederatedGroupLister interface.
type federatedGroupLister struct {
	indexer cache.Indexer
}

// NewFederatedGroupLister returns a new FederatedGroupLister.
func NewFederatedGroupLister(indexer cache.Indexer) FederatedGroupLister {
	return &federatedGroupLister{indexer: indexer}
}

// List lists all FederatedGroups in the indexer.
func (s *federatedGroupLister) List(selector labels.Selector) (ret []*v1beta1.FederatedGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.FederatedGroup))
	})
	return ret, err
}

// Get retrieves the FederatedGroup from the index for a given name.
func (s *federatedGroupLister) Get(name string) (*v1beta1.FederatedGroup, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("federatedgroup"), name)
	}
	return obj.(*v1beta1.FederatedGroup), nil
}
