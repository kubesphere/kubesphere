/*
Copyright 2020 The KubeSphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "kubesphere.io/kubesphere/pkg/apis/types/v1beta1"
)

// FederatedPersistentVolumeClaimLister helps list FederatedPersistentVolumeClaims.
type FederatedPersistentVolumeClaimLister interface {
	// List lists all FederatedPersistentVolumeClaims in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.FederatedPersistentVolumeClaim, err error)
	// FederatedPersistentVolumeClaims returns an object that can list and get FederatedPersistentVolumeClaims.
	FederatedPersistentVolumeClaims(namespace string) FederatedPersistentVolumeClaimNamespaceLister
	FederatedPersistentVolumeClaimListerExpansion
}

// federatedPersistentVolumeClaimLister implements the FederatedPersistentVolumeClaimLister interface.
type federatedPersistentVolumeClaimLister struct {
	indexer cache.Indexer
}

// NewFederatedPersistentVolumeClaimLister returns a new FederatedPersistentVolumeClaimLister.
func NewFederatedPersistentVolumeClaimLister(indexer cache.Indexer) FederatedPersistentVolumeClaimLister {
	return &federatedPersistentVolumeClaimLister{indexer: indexer}
}

// List lists all FederatedPersistentVolumeClaims in the indexer.
func (s *federatedPersistentVolumeClaimLister) List(selector labels.Selector) (ret []*v1beta1.FederatedPersistentVolumeClaim, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.FederatedPersistentVolumeClaim))
	})
	return ret, err
}

// FederatedPersistentVolumeClaims returns an object that can list and get FederatedPersistentVolumeClaims.
func (s *federatedPersistentVolumeClaimLister) FederatedPersistentVolumeClaims(namespace string) FederatedPersistentVolumeClaimNamespaceLister {
	return federatedPersistentVolumeClaimNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FederatedPersistentVolumeClaimNamespaceLister helps list and get FederatedPersistentVolumeClaims.
type FederatedPersistentVolumeClaimNamespaceLister interface {
	// List lists all FederatedPersistentVolumeClaims in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.FederatedPersistentVolumeClaim, err error)
	// Get retrieves the FederatedPersistentVolumeClaim from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.FederatedPersistentVolumeClaim, error)
	FederatedPersistentVolumeClaimNamespaceListerExpansion
}

// federatedPersistentVolumeClaimNamespaceLister implements the FederatedPersistentVolumeClaimNamespaceLister
// interface.
type federatedPersistentVolumeClaimNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FederatedPersistentVolumeClaims in the indexer for a given namespace.
func (s federatedPersistentVolumeClaimNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.FederatedPersistentVolumeClaim, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.FederatedPersistentVolumeClaim))
	})
	return ret, err
}

// Get retrieves the FederatedPersistentVolumeClaim from the indexer for a given namespace and name.
func (s federatedPersistentVolumeClaimNamespaceLister) Get(name string) (*v1beta1.FederatedPersistentVolumeClaim, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("federatedpersistentvolumeclaim"), name)
	}
	return obj.(*v1beta1.FederatedPersistentVolumeClaim), nil
}
