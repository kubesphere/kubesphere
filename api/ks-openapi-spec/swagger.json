{
  "swagger": "2.0",
  "info": {
    "description": "KubeSphere OpenAPI",
    "title": "KubeSphere",
    "contact": {
      "name": "kubesphere",
      "url": "https://kubesphere.io",
      "email": "kubesphere@yunify.com"
    },
    "license": {
      "name": "Apache",
      "url": "http://www.apache.org/licenses/"
    },
    "version": "v0.0.0",
    "x-taggroups": [
      {
        "name": "IAM",
        "tags": [
          "Identity Management",
          "Access Management"
        ]
      },
      {
        "name": "Resources",
        "tags": [
          "Cluster Resources",
          "Namespace Resources",
          "User Resources"
        ]
      },
      {
        "name": "Monitoring",
        "tags": [
          "Component Status"
        ]
      },
      {
        "name": "Tenant",
        "tags": [
          "Tenant Resources"
        ]
      },
      {
        "name": "Other",
        "tags": [
          "Verification",
          "Docker Registry"
        ]
      },
      {
        "name": "DevOps",
        "tags": [
          "DevOps Project",
          "DevOps Project Credential",
          "DevOps Pipeline",
          "DevOps Project Member",
          "DevOps Webhook",
          "DevOps Jenkinsfile",
          "DevOps Scm"
        ]
      },
      {
        "name": "Monitoring",
        "tags": [
          "Cluster Metrics",
          "Node Metrics",
          "Namespace Metrics",
          "Workload Metrics",
          "Pod Metrics",
          "Container Metrics",
          "Workspace Metrics",
          "Component Metrics"
        ]
      },
      {
        "name": "Logging",
        "tags": [
          "Log Query"
        ]
      }
    ]
  },
  "paths": {
    "/kapis/devops.kubesphere.io/v1alpha2/crumbissuer": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Get crumb issuer. A CrumbIssuer represents an algorithm to generate a nonce value, known as a crumb, to counter cross site request forgery exploits. Crumbs are typically hashes incorporating information that uniquely identifies an agent that sends a request, along with a guarded secret so that the crumb value cannot be forged by a third party.",
        "operationId": "GetCrumb",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.Crumb"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.Crumb"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/checkCron": {
      "post": {
        "produces": [
          "application/json",
          "charset=utf-8"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Check cron script compile.",
        "operationId": "CheckCron",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/devops.CronData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.CheckCronRes"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.CheckCronRes"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/credentials/{credential}/usage": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Project Credential"
        ],
        "summary": "Get the specified credential usage of the DevOps project",
        "operationId": "GetProjectCredentialUsage",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "credential's ID, e.g. dockerhub-id",
            "name": "credential",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.Credential"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.Credential"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Get the specified pipeline of the DevOps project",
        "operationId": "GetPipeline",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.Pipeline"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.Pipeline"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/branches": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "(MultiBranchesPipeline) Get all branches in the specified pipeline.",
        "operationId": "GetPipelineBranch",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "filter=%s",
            "description": "filter remote scm. e.g. origin",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "format": "start=%d",
            "default": "start=0",
            "description": "the count of branches start.",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "format": "limit=%d",
            "default": "limit=100",
            "description": "the count of branches limit.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.PipelineBranch"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.PipelineBranch"
              }
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/branches/{branch}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "(MultiBranchesPipeline) Get the specified branch pipeline of the DevOps project",
        "operationId": "GetBranchPipeline",
        "parameters": [
          {
            "type": "string",
            "description": "the name of devops project",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of branch, same as repository branch",
            "name": "branch",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.BranchPipeline"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.BranchPipeline"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/branches/{branch}/runs": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "(MultiBranchesPipeline) Run the specified pipeline of the DevOps project.",
        "operationId": "RunBranchPipeline",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/devops.RunPayload"
            }
          },
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of branch, same as repository branch.",
            "name": "branch",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.RunPipeline"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.RunPipeline"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "(MultiBranchesPipeline) Get details in the specified pipeline activity.",
        "operationId": "GetBranchPipelineRun",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of branch, same as repository branch.",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run id, the unique id for a pipeline once build.",
            "name": "run",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.PipelineRun"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.PipelineRun"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}/artifacts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "(MultiBranchesPipeline) Get all artifacts generated from the specified run of the pipeline branch.",
        "operationId": "GetBranchArtifacts",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of branch, same as repository branch.",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run ID, the unique ID for a pipeline once build.",
            "name": "run",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "start=%d",
            "description": "the item number that the search starts from.",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "format": "limit=%d",
            "description": "the limit item count of the search.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The filed of \"Url\" in response can download artifacts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.Artifacts"
              }
            }
          },
          "default": {
            "description": "The filed of \"Url\" in response can download artifacts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.Artifacts"
              }
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}/log": {
      "get": {
        "produces": [
          "text/plain; charset=utf-8"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "(MultiBranchesPipeline) Get run logs of the specified pipeline activity.",
        "operationId": "GetBranchRunLog",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of branch, same as repository branch.",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run ID, the unique ID for a pipeline once build.",
            "name": "run",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "start=%d",
            "default": "start=0",
            "description": "the item number that the search starts from.",
            "name": "start",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}/nodes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "(MultiBranchesPipeline) Get run nodes.",
        "operationId": "GetBranchPipelineRunNodes",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of branch, same as repository branch.",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run id, the unique id for a pipeline once build.",
            "name": "run",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "limit=%d",
            "default": "limit=10000",
            "description": "the limit item count of the search.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.BranchPipelineRunNodes"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.BranchPipelineRunNodes"
              }
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}/nodes/{node}/steps": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "(MultiBranchesPipeline) Get all steps in the specified node.",
        "operationId": "GetBranchNodeSteps",
        "parameters": [
          {
            "type": "string",
            "description": "the name of devops project",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of branch, same as repository branch.",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run ID, the unique ID for a pipeline once build.",
            "name": "run",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline node ID, the stage in pipeline.",
            "name": "node",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.NodeSteps"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.NodeSteps"
              }
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}/nodes/{node}/steps/{step}": {
      "post": {
        "produces": [
          "text/plain; charset=utf-8"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "(MultiBranchesPipeline) Proceed or Break the paused pipeline which waiting for user input.",
        "operationId": "SubmitBranchInputStep",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of branch, same as repository branch.",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run ID, the unique ID for a pipeline once build.",
            "name": "run",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline node ID, the stage in pipeline.",
            "name": "node",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline step ID, the step in pipeline.",
            "name": "step",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/devops.CheckPlayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}/nodes/{node}/steps/{step}/log": {
      "get": {
        "produces": [
          "text/plain; charset=utf-8"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "(MultiBranchesPipeline) Get the step logs in the specified pipeline activity.",
        "operationId": "GetBranchStepLog",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of branch, same as repository branch.",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run id, the unique id for a pipeline once build.",
            "name": "run",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline node id, the stage in pipeline.",
            "name": "node",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline step id, the step in pipeline.",
            "name": "step",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "start=%d",
            "default": "start=0",
            "description": "the item number that the search starts from.",
            "name": "start",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}/nodesdetail": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "(MultiBranchesPipeline) Get steps details in an activity node. For a node, the steps which is defined inside the node.",
        "operationId": "GetBranchNodesDetail",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of branch, same as repository branch.",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run ID, the unique ID for a pipeline once build.",
            "name": "run",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.NodesDetail"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.NodesDetail"
              }
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}/replay": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "(MultiBranchesPipeline) Replay the specified pipeline of the DevOps project",
        "operationId": "ReplayBranchPipeline",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of branch, same as repository branch.",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run ID, the unique ID for a pipeline once build.",
            "name": "run",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.ReplayPipeline"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.ReplayPipeline"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}/stop": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "(MultiBranchesPipeline) Stop the specified pipeline of the DevOps project.",
        "operationId": "StopBranchPipeline",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of branch, same as repository branch.",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run ID, the unique ID for a pipeline once build.",
            "name": "run",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "blocking=%t",
            "default": "blocking=false",
            "description": "stop and between each retries will sleep.",
            "name": "blocking",
            "in": "query"
          },
          {
            "type": "string",
            "format": "timeOutInSecs=%d",
            "default": "timeOutInSecs=10",
            "description": "the time of stop and between each retries sleep.",
            "name": "timeOutInSecs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.StopPipeline"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.StopPipeline"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/checkScriptCompile": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded",
          "charset=utf-8"
        ],
        "produces": [
          "application/json",
          "charset=utf-8"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Check pipeline script compile.",
        "operationId": "CheckScriptCompile",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "pipeline=%s",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/devops.ReqScript"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.CheckScript"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.CheckScript"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/consolelog": {
      "get": {
        "produces": [
          "text/plain; charset=utf-8"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Get scan reponsitory logs in the specified pipeline.",
        "operationId": "GetConsoleLog",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/runs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Get all runs of the specified pipeline",
        "operationId": "ListPipelineRuns",
        "parameters": [
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "start=%d",
            "description": "the item number that the search starts from",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "format": "limit=%d",
            "description": "the limit item count of the search",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "format": "branch=%s",
            "description": "the name of branch, same as repository branch, will be filtered by branch.",
            "name": "branch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.PipelineRunList"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.PipelineRunList"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Run pipeline.",
        "operationId": "RunPipeline",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/devops.RunPayload"
            }
          },
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.RunPipeline"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.RunPipeline"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/runs/{run}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Get details in the specified pipeline activity.",
        "operationId": "GetPipelineRun",
        "parameters": [
          {
            "type": "string",
            "description": "the name of devops project",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run ID, the unique ID for a pipeline once build.",
            "name": "run",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.PipelineRun"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.PipelineRun"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/runs/{run}/artifacts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Get all artifacts in the specified pipeline.",
        "operationId": "GetArtifacts",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run ID, the unique ID for a pipeline once build.",
            "name": "run",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "start=%d",
            "description": "the item number that the search starts from.",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "format": "limit=%d",
            "description": "the limit item count of the search.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The filed of \"Url\" in response can download artifacts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.Artifacts"
              }
            }
          },
          "default": {
            "description": "The filed of \"Url\" in response can download artifacts",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.Artifacts"
              }
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/runs/{run}/log": {
      "get": {
        "produces": [
          "text/plain; charset=utf-8"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Get run logs of the specified pipeline activity.",
        "operationId": "GetRunLog",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run ID, the unique ID for a pipeline once build.",
            "name": "run",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "start=%d",
            "default": "start=0",
            "description": "the item number that the search starts from.",
            "name": "start",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/runs/{run}/nodes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Get all nodes in the specified activity. node is the stage in the pipeline task",
        "operationId": "GetPipelineRunNodes",
        "parameters": [
          {
            "type": "string",
            "description": "the name of devops project",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run ID, the unique ID for a pipeline once build",
            "name": "run",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.PipelineRunNodes"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.PipelineRunNodes"
              }
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Get all steps in the specified node.",
        "operationId": "GetNodeSteps",
        "parameters": [
          {
            "type": "string",
            "description": "the name of devops project",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run ID, the unique ID for a pipeline once build",
            "name": "run",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline node ID, the stage in pipeline.",
            "name": "node",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.NodeSteps"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.NodeSteps"
              }
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}": {
      "post": {
        "produces": [
          "text/plain; charset=utf-8"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Proceed or Break the paused pipeline which is waiting for user input.",
        "operationId": "SubmitInputStep",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/devops.CheckPlayload"
            }
          },
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run ID, the unique ID for a pipeline once build.",
            "name": "run",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline node ID, the stage in pipeline.",
            "name": "node",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline step ID",
            "name": "step",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log": {
      "get": {
        "produces": [
          "text/plain; charset=utf-8"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Get pipelines step log.",
        "operationId": "GetStepLog",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run ID, the unique ID for a pipeline once build.",
            "name": "run",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline node ID, the stage in pipeline.",
            "name": "node",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline step ID, the step in pipeline.",
            "name": "step",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "start=%d",
            "default": "start=0",
            "description": "the item number that the search starts from.",
            "name": "start",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/runs/{run}/nodesdetail": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Get steps details inside a activity node. For a node, the steps which defined inside the node.",
        "operationId": "GetNodesDetail",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run ID, the unique ID for a pipeline once build.",
            "name": "run",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.NodesDetail"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.NodesDetail"
              }
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/runs/{run}/replay": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Replay pipeline",
        "operationId": "ReplayPipeline",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run ID, the unique ID for a pipeline once build.",
            "name": "run",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.ReplayPipeline"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.ReplayPipeline"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/runs/{run}/stop": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Stop pipeline",
        "operationId": "StopPipeline",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline run ID, the unique ID for a pipeline once build.",
            "name": "run",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "blocking=%t",
            "default": "blocking=false",
            "description": "stop and between each retries will sleep.",
            "name": "blocking",
            "in": "query"
          },
          {
            "type": "string",
            "format": "timeOutInSecs=%d",
            "default": "timeOutInSecs=10",
            "description": "the time of stop and between each retries sleep.",
            "name": "timeOutInSecs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.StopPipeline"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.StopPipeline"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/devops/{devops}/pipelines/{pipeline}/scan": {
      "post": {
        "produces": [
          "text/html; charset=utf-8"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Scan remote Repository, Start a build if have new branch.",
        "operationId": "ScanBranch",
        "parameters": [
          {
            "type": "string",
            "description": "DevOps project's ID, e.g. project-RRRRAzLBlLEm",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the CI/CD pipeline",
            "name": "pipeline",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "delay=%d",
            "description": "the delay time to scan",
            "name": "delay",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/jenkins/{path}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "operationId": "func1",
        "parameters": [
          {
            "pattern": "[*]",
            "type": "string",
            "description": "Path stands for any suffix path.",
            "name": "path",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "default": {
            "description": "ok"
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/scms/{scm}/organizations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Scm"
        ],
        "summary": "List all organizations of the specified source configuration management (SCM) such as Github.",
        "operationId": "GetSCMOrg",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the source configuration management (SCM).",
            "name": "scm",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "credentialId=%s",
            "description": "credential ID for source configuration management (SCM).",
            "name": "credentialId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.SCMOrg"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.SCMOrg"
              }
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/scms/{scm}/organizations/{organization}/repositories": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Scm"
        ],
        "summary": "List all repositories in the specified organization.",
        "operationId": "GetOrgRepo",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the source configuration management (SCM).",
            "name": "scm",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "organization ID, such as github username.",
            "name": "organization",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "credentialId=%s",
            "description": "credential ID for SCM.",
            "name": "credentialId",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "pageNumber=%d",
            "description": "page number.",
            "name": "pageNumber",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "pageSize=%d",
            "description": "the item count of one page.",
            "name": "pageSize",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.OrgRepo"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.OrgRepo"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/scms/{scm}/servers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Scm"
        ],
        "summary": "List all servers in the jenkins.",
        "operationId": "GetSCMServers",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the source configuration management (SCM).",
            "name": "scm",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.SCMServer"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/devops.SCMServer"
              }
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Scm"
        ],
        "summary": "Create scm server in the jenkins.",
        "operationId": "CreateSCMServers",
        "parameters": [
          {
            "type": "string",
            "description": "The ID of the source configuration management (SCM).",
            "name": "scm",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/devops.CreateScmServerReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.SCMServer"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.SCMServer"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/scms/{scm}/verify": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Scm"
        ],
        "summary": "Validate the access token of the specified source configuration management (SCM) such as Github",
        "operationId": "Validate",
        "parameters": [
          {
            "type": "string",
            "description": "the ID of the source configuration management (SCM).",
            "name": "scm",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.Validates"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.Validates"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/search": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "Search DevOps resource. More info: https://github.com/jenkinsci/blueocean-plugin/tree/master/blueocean-rest#get-pipelines-across-organization",
        "operationId": "ListPipelines",
        "parameters": [
          {
            "type": "string",
            "format": "q=%s",
            "description": "query pipelines, condition for filtering.",
            "name": "q",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "filter=%s",
            "description": "Filter some types of jobs. e.g. no-folder，will not get a job of type folder",
            "name": "filter",
            "in": "query"
          },
          {
            "type": "string",
            "format": "start=%d",
            "description": "the item number that the search starts from.",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "format": "limit=%d",
            "description": "the limit item count of the search.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.PipelineList"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.PipelineList"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/tojenkinsfile": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "charset=utf-8"
        ],
        "tags": [
          "DevOps Jenkinsfile"
        ],
        "summary": "Convert json to jenkinsfile format.",
        "operationId": "ToJenkinsfile",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/devops.ReqJson"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.ResJenkinsfile"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.ResJenkinsfile"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/tojson": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "charset=utf-8"
        ],
        "tags": [
          "DevOps Jenkinsfile"
        ],
        "summary": "Convert jenkinsfile to json format. Usually the frontend uses json to show or edit pipeline",
        "operationId": "ToJson",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/devops.ReqJenkinsfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.ResJson"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/devops.ResJson"
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/webhook/git": {
      "get": {
        "produces": [
          "text/plain; charset=utf-8"
        ],
        "tags": [
          "DevOps Webhook"
        ],
        "summary": "Get commit notification by HTTP GET method. Git webhook will request here.",
        "operationId": "GetNotifyCommit",
        "parameters": [
          {
            "type": "string",
            "format": "url=%s",
            "description": "Git url",
            "name": "url",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain; charset=utf-8"
        ],
        "tags": [
          "DevOps Webhook"
        ],
        "summary": "Get commit notification by HTTP POST method. Git webhook will request here.",
        "operationId": "PostNotifyCommit",
        "parameters": [
          {
            "type": "string",
            "format": "url=%s",
            "description": "Git url",
            "name": "url",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha2/webhook/github": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Webhook"
        ],
        "summary": "Get commit notification. Github webhook will request here.",
        "operationId": "GithubWebhook",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha3/devops/{devops}/credentials": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Project"
        ],
        "summary": "list the credentials of the specified devops for the current user",
        "operationId": "ListCredential",
        "parameters": [
          {
            "type": "string",
            "description": "devops name",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name used to do filtering",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "format": "page=%d",
            "default": "page=1",
            "description": "page",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "ascending=false",
            "description": "sort parameters, e.g. ascending=false",
            "name": "ascending",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sort parameters, e.g. orderBy=createTime",
            "name": "sortBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Project"
        ],
        "summary": "create the credential of the specified devops for the current user",
        "operationId": "CreateCredential",
        "parameters": [
          {
            "type": "string",
            "description": "devops name",
            "name": "devops",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha3.Pipeline"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha3.Pipeline"
              }
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha3/devops/{devops}/credentials/{credential}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Project"
        ],
        "summary": "get the credential of the specified devops for the current user",
        "operationId": "GetCredential",
        "parameters": [
          {
            "type": "string",
            "description": "project name",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline name",
            "name": "credential",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.Secret"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.Secret"
              }
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Project"
        ],
        "summary": "put the credential of the specified devops for the current user",
        "operationId": "UpdateCredential",
        "parameters": [
          {
            "type": "string",
            "description": "project name",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "credential name",
            "name": "credential",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.Secret"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.Secret"
              }
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "delete the credential of the specified devops for the current user",
        "operationId": "DeleteCredential",
        "parameters": [
          {
            "type": "string",
            "description": "project name",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "credential name",
            "name": "credential",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.Secret"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1.Secret"
              }
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha3/devops/{devops}/pipelines": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Project"
        ],
        "summary": "list the pipelines of the specified devops for the current user",
        "operationId": "ListPipeline",
        "parameters": [
          {
            "type": "string",
            "description": "devops name",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Project"
        ],
        "summary": "create the pipeline of the specified devops for the current user",
        "operationId": "CreatePipeline",
        "parameters": [
          {
            "type": "string",
            "description": "devops name",
            "name": "devops",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha3.Pipeline"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha3.Pipeline"
              }
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha3/devops/{devops}/pipelines/{pipeline}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Project"
        ],
        "summary": "get the pipeline of the specified devops for the current user",
        "operationId": "getPipelineByName",
        "parameters": [
          {
            "type": "string",
            "description": "project name",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline name",
            "name": "pipeline",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha3.Pipeline"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha3.Pipeline"
              }
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Project"
        ],
        "summary": "put the pipeline of the specified devops for the current user",
        "operationId": "UpdatePipeline",
        "parameters": [
          {
            "type": "string",
            "description": "project name",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline name",
            "name": "pipeline",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha3.Pipeline"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha3.Pipeline"
              }
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Pipeline"
        ],
        "summary": "delete the pipeline of the specified devops for the current user",
        "operationId": "DeletePipeline",
        "parameters": [
          {
            "type": "string",
            "description": "project name",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pipeline name",
            "name": "pipeline",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha3.Pipeline"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha3.Pipeline"
              }
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha3/workspaces/{workspace}/devops": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Project"
        ],
        "summary": "List the devopsproject of the specified workspace for the current user",
        "operationId": "ListDevOpsProject",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Project"
        ],
        "summary": "Create the devopsproject of the specified workspace for the current user",
        "operationId": "CreateDevOpsProject",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha3.DevOpsProject"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha3.DevOpsProject"
              }
            }
          }
        }
      }
    },
    "/kapis/devops.kubesphere.io/v1alpha3/workspaces/{workspace}/devops/{devops}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Project"
        ],
        "summary": "Get the devopsproject of the specified workspace for the current user",
        "operationId": "GetDevOpsProject",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "project name",
            "name": "devops",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha3.DevOpsProject"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha3.DevOpsProject"
              }
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Project"
        ],
        "summary": "Put the devopsproject of the specified workspace for the current user",
        "operationId": "UpdateDevOpsProject",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "project name",
            "name": "devops",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha3.DevOpsProject"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha3.DevOpsProject"
              }
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "DevOps Project"
        ],
        "summary": "Get the devopsproject of the specified workspace for the current user",
        "operationId": "DeleteDevOpsProject",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "project name",
            "name": "devops",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha3.DevOpsProject"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha3.DevOpsProject"
              }
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/clustermembers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "List all members in cluster.",
        "operationId": "ListClusterMembers",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Add user to current cluster.",
        "operationId": "CreateClusterMembers",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha2.Member"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha2.Member"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha2.Member"
              }
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/clustermembers/{clustermember}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieve member details in cluster.",
        "operationId": "DescribeClusterMember",
        "parameters": [
          {
            "type": "string",
            "description": "cluster member's username",
            "name": "clustermember",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.User"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.User"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Update cluster member role bind.",
        "operationId": "UpdateClusterMember",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha2.Member"
            }
          },
          {
            "type": "string",
            "description": "cluster member's username",
            "name": "clustermember",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.Member"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.Member"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Delete member in cluster scope.",
        "operationId": "RemoveClusterMember",
        "parameters": [
          {
            "type": "string",
            "description": "cluster member's username",
            "name": "clustermember",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/clustermembers/{clustermember}/clusterroles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieve user's role templates in cluster.",
        "operationId": "RetrieveMemberRoleTemplates",
        "parameters": [
          {
            "type": "string",
            "description": "cluster member's username",
            "name": "clustermember",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/clusterroles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "List all cluster roles.",
        "operationId": "ListClusterRoles",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Create cluster role. Automatically aggregate policy rules according to annotation.",
        "operationId": "CreateClusterRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ClusterRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.ClusterRole"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.ClusterRole"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/clusterroles/{clusterrole}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieve cluster role details.",
        "operationId": "DescribeClusterRole",
        "parameters": [
          {
            "type": "string",
            "description": "cluster role name",
            "name": "clusterrole",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.ClusterRole"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.ClusterRole"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Update cluster role. Automatically aggregate policy rules according to annotation.",
        "operationId": "UpdateClusterRole",
        "parameters": [
          {
            "type": "string",
            "description": "cluster role name",
            "name": "clusterrole",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ClusterRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.ClusterRole"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.ClusterRole"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Delete cluster role.",
        "operationId": "DeleteClusterRole",
        "parameters": [
          {
            "type": "string",
            "description": "cluster role name",
            "name": "clusterrole",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          }
        }
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Patch cluster role. Automatically aggregate policy rules according to annotation.",
        "operationId": "PatchClusterRole",
        "parameters": [
          {
            "type": "string",
            "description": "cluster role name",
            "name": "clusterrole",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.ClusterRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.ClusterRole"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.ClusterRole"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/devops/{devops}/members": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "List all members in the specified devops project.",
        "operationId": "ListNamespaceMembers",
        "parameters": [
          {
            "type": "string",
            "description": "devops project name",
            "name": "devops",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Batch add devops project members.",
        "operationId": "CreateNamespaceMembers",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha2.Member"
              }
            }
          },
          {
            "type": "string",
            "description": "devops project name",
            "name": "devops",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha2.Member"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha2.Member"
              }
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/devops/{devops}/members/{member}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieve devops project member details.",
        "operationId": "DescribeNamespaceMember",
        "parameters": [
          {
            "type": "string",
            "description": "devops project name",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "devops project member's username",
            "name": "member",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.User"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.User"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Update member in devops project.",
        "operationId": "UpdateNamespaceMember",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha2.Member"
            }
          },
          {
            "type": "string",
            "description": "devops project name",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "devops project member's username",
            "name": "member",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.Member"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.Member"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Remove member in namespace.",
        "operationId": "RemoveNamespaceMember",
        "parameters": [
          {
            "type": "string",
            "description": "devops project name",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "devops project member's username",
            "name": "member",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/devops/{devops}/members/{member}/roles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieve member's role templates in devops project.",
        "operationId": "RetrieveMemberRoleTemplates",
        "parameters": [
          {
            "type": "string",
            "description": "devops project name",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "devops project member's username",
            "name": "member",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/devops/{devops}/roles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "List all roles in the specified devops project.",
        "operationId": "ListRoles",
        "parameters": [
          {
            "type": "string",
            "description": "devops project name",
            "name": "devops",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Create role in the specified devops project. Automatically aggregate policy rules according to annotation.",
        "operationId": "CreateNamespaceRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          },
          {
            "type": "string",
            "description": "devops project name",
            "name": "devops",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/devops/{devops}/roles/{role}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieve devops project role details.",
        "operationId": "DescribeNamespaceRole",
        "parameters": [
          {
            "type": "string",
            "description": "devops project name",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "role name",
            "name": "role",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Update devops project role. Automatically aggregate policy rules according to annotation.",
        "operationId": "UpdateNamespaceRole",
        "parameters": [
          {
            "type": "string",
            "description": "devops project name",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "role name",
            "name": "role",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Delete role in the specified devops project.",
        "operationId": "DeleteNamespaceRole",
        "parameters": [
          {
            "type": "string",
            "description": "devops project name",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "role name",
            "name": "role",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          }
        }
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Patch devops project role. Automatically aggregate policy rules according to annotation.",
        "operationId": "PatchNamespaceRole",
        "parameters": [
          {
            "type": "string",
            "description": "devops project name",
            "name": "devops",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "role name",
            "name": "role",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/globalroles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "List all global roles.",
        "operationId": "ListGlobalRoles",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Create global role. Automatically aggregate policy rules according to annotation.",
        "operationId": "CreateGlobalRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha2.GlobalRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.GlobalRole"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.GlobalRole"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/globalroles/{globalrole}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieve global role details.",
        "operationId": "DescribeGlobalRole",
        "parameters": [
          {
            "type": "string",
            "description": "global role name",
            "name": "globalrole",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.GlobalRole"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.GlobalRole"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Update global role. Automatically aggregate policy rules according to annotation.",
        "operationId": "UpdateGlobalRole",
        "parameters": [
          {
            "type": "string",
            "description": "global role name",
            "name": "globalrole",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha2.GlobalRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.GlobalRole"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.GlobalRole"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Delete global role.",
        "operationId": "DeleteGlobalRole",
        "parameters": [
          {
            "type": "string",
            "description": "global role name",
            "name": "globalrole",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          }
        }
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Patch global role. Automatically aggregate policy rules according to annotation.",
        "operationId": "PatchGlobalRole",
        "parameters": [
          {
            "type": "string",
            "description": "global role name",
            "name": "globalrole",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha2.GlobalRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.GlobalRole"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.GlobalRole"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/namespaces/{namespace}/members": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "List all members in the specified namespace.",
        "operationId": "ListNamespaceMembers",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Batch add namespace members.",
        "operationId": "CreateNamespaceMembers",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha2.Member"
              }
            }
          },
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha2.Member"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha2.Member"
              }
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/namespaces/{namespace}/members/{member}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieve namespace member details.",
        "operationId": "DescribeNamespaceMember",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "namespace member's username",
            "name": "member",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.User"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.User"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Update member in namespace.",
        "operationId": "UpdateNamespaceMember",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha2.Member"
            }
          },
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "namespace member's username",
            "name": "member",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.Member"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.Member"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Delete member in namespace scope.",
        "operationId": "RemoveNamespaceMember",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "namespace member's username",
            "name": "member",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/namespaces/{namespace}/members/{member}/roles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieve member's role templates in namespace.",
        "operationId": "RetrieveMemberRoleTemplates",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "namespace member's username",
            "name": "member",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/namespaces/{namespace}/roles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "List all roles in the specified namespace.",
        "operationId": "ListRoles",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Create role in the specified namespace. Automatically aggregate policy rules according to annotation.",
        "operationId": "CreateNamespaceRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          },
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/namespaces/{namespace}/roles/{role}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieve role details.",
        "operationId": "DescribeNamespaceRole",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "role name",
            "name": "role",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Update namespace role. Automatically aggregate policy rules according to annotation.",
        "operationId": "UpdateNamespaceRole",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "role name",
            "name": "role",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Delete role in the specified namespace.",
        "operationId": "DeleteNamespaceRole",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "role name",
            "name": "role",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          }
        }
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Patch namespace role.",
        "operationId": "PatchNamespaceRole",
        "parameters": [
          {
            "type": "string",
            "description": "namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "role name",
            "name": "role",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Role"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "List all users in global scope.",
        "operationId": "ListUsers",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Create user in global scope.",
        "operationId": "CreateUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha2.User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.User"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.User"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/users/{user}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieve user details.",
        "operationId": "DescribeUser",
        "parameters": [
          {
            "type": "string",
            "description": "username",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.User"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.User"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Update user info.",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha2.User"
            }
          },
          {
            "type": "string",
            "description": "username",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.User"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.User"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Delete user.",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "username",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/users/{user}/globalroles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieve user's global role templates.",
        "operationId": "RetrieveMemberRoleTemplates",
        "parameters": [
          {
            "type": "string",
            "description": "username",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/users/{user}/loginrecords": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "List user's login records.",
        "operationId": "ListUserLoginRecords",
        "parameters": [
          {
            "type": "string",
            "description": "username of the user",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/users/{user}/password": {
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Modify user's password.",
        "operationId": "ModifyPassword",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/iam.PasswordReset"
            }
          },
          {
            "type": "string",
            "description": "username",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/workspaces/{workspace}/workspacemembers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "List all members in the specified workspace.",
        "operationId": "ListWorkspaceMembers",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Batch add workspace members.",
        "operationId": "CreateWorkspaceMembers",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha2.Member"
              }
            }
          },
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha2.Member"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha2.Member"
              }
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/workspaces/{workspace}/workspacemembers/{workspacemember}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieve workspace member details.",
        "operationId": "DescribeWorkspaceMember",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "workspace member's username",
            "name": "workspacemember",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.User"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.User"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Update member in workspace.",
        "operationId": "UpdateWorkspaceMember",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha2.Member"
            }
          },
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "workspace member's username",
            "name": "workspacemember",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.Member"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.Member"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Delete member in workspace scope.",
        "operationId": "RemoveWorkspaceMember",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "workspace member's username",
            "name": "workspacemember",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/workspaces/{workspace}/workspacemembers/{workspacemember}/workspaceroles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieve member's role templates in workspace.",
        "operationId": "RetrieveMemberRoleTemplates",
        "parameters": [
          {
            "type": "string",
            "description": "workspace",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "workspace member's username",
            "name": "workspacemember",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/workspaces/{workspace}/workspaceroles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "List all workspace roles.",
        "operationId": "ListWorkspaceRoles",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Create workspace role. Automatically aggregate policy rules according to annotation.",
        "operationId": "CreateWorkspaceRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceRole"
            }
          },
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceRole"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceRole"
            }
          }
        }
      }
    },
    "/kapis/iam.kubesphere.io/v1alpha2/workspaces/{workspace}/workspaceroles/{workspacerole}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Retrieve workspace role details.",
        "operationId": "DescribeWorkspaceRole",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "workspace role name",
            "name": "workspacerole",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceRole"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceRole"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Update workspace role. Automatically aggregate policy rules according to annotation.",
        "operationId": "UpdateWorkspaceRole",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "workspace role name",
            "name": "workspacerole",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceRole"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceRole"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Delete workspace role.",
        "operationId": "DeleteWorkspaceRole",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "workspace role name",
            "name": "workspacerole",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          }
        }
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Access Management"
        ],
        "summary": "Patch workspace role. Automatically aggregate policy rules according to annotation.",
        "operationId": "PatchWorkspaceRole",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "workspace role name",
            "name": "workspacerole",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/cluster": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Metrics"
        ],
        "summary": "Get cluster-level metric data.",
        "operationId": "handleClusterMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both cluster CPU usage and disk usage: `cluster_cpu_usage|cluster_disk_size_usage`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/components/{component}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Component Metrics"
        ],
        "summary": "Get component-level metric data of the specific system component.",
        "operationId": "handleComponentMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "system component to monitor. One of etcd, apiserver, scheduler.",
            "name": "component",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both etcd server list and total size of the underlying database: `etcd_server_list|etcd_mvcc_db_size`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/kubesphere": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "KubeSphere Metrics"
        ],
        "summary": "Get platform-level metric data.",
        "operationId": "handleKubeSphereMetricsQuery",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespace Metrics"
        ],
        "summary": "Get namespace-level metric data of all namespaces.",
        "operationId": "handleNamespaceMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both namespace CPU usage and memory usage: `namespace_cpu_usage|namespace_memory_usage`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The namespace filter consists of a regexp pattern. It specifies which namespace data to return. For example, the following filter matches both namespace test and kube-system: `test|kube-system`.",
            "name": "resources_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort namespaces by the specified metric. Not applicable if **start** and **end** are provided.",
            "name": "sort_metric",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc.",
            "description": "Sort order. One of asc, desc.",
            "name": "sort_type",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The page number. This field paginates result data of each metric, then returns a specific page. For example, setting **page** to 2 returns the second page. It only applies to sorted metric data.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 5,
            "description": "Page size, the maximum number of results in a single page. Defaults to 5.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces/{namespace}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespace Metrics"
        ],
        "summary": "Get namespace-level metric data of the specific namespace.",
        "operationId": "handleNamespaceMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both namespace CPU usage and memory usage: `namespace_cpu_usage|namespace_memory_usage`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces/{namespace}/persistentvolumeclaims": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "PVC Metrics"
        ],
        "summary": "Get PVC-level metric data of the specific namespace's PVCs.",
        "operationId": "handlePVCMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both PVC available and used inodes: `pvc_inodes_available|pvc_inodes_used`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The PVC filter consists of a regexp pattern. It specifies which PVC data to return. For example, the following filter matches any pod whose name begins with redis: `redis.*`.",
            "name": "resources_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort PVCs by the specified metric. Not applicable if **start** and **end** are provided.",
            "name": "sort_metric",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc.",
            "description": "Sort order. One of asc, desc.",
            "name": "sort_type",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The page number. This field paginates result data of each metric, then returns a specific page. For example, setting **page** to 2 returns the second page. It only applies to sorted metric data.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 5,
            "description": "Page size, the maximum number of results in a single page. Defaults to 5.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces/{namespace}/persistentvolumeclaims/{pvc}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "PVC Metrics"
        ],
        "summary": "Get PVC-level metric data of a specific PVC. Navigate to the PVC by the PVC's namespace.",
        "operationId": "handlePVCMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "PVC name.",
            "name": "pvc",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both PVC available and used inodes: `pvc_inodes_available|pvc_inodes_used`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces/{namespace}/pods": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pod Metrics"
        ],
        "summary": "Get pod-level metric data of the specific namespace's pods.",
        "operationId": "handlePodMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both pod CPU usage and memory usage: `pod_cpu_usage|pod_memory_usage`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The pod filter consists of a regexp pattern. It specifies which pod data to return. For example, the following filter matches any pod whose name begins with redis: `redis.*`.",
            "name": "resources_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort pods by the specified metric. Not applicable if **start** and **end** are provided.",
            "name": "sort_metric",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc.",
            "description": "Sort order. One of asc, desc.",
            "name": "sort_type",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The page number. This field paginates result data of each metric, then returns a specific page. For example, setting **page** to 2 returns the second page. It only applies to sorted metric data.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 5,
            "description": "Page size, the maximum number of results in a single page. Defaults to 5.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces/{namespace}/pods/{pod}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pod Metrics"
        ],
        "summary": "Get pod-level metric data of a specific pod. Navigate to the pod by the pod's namespace.",
        "operationId": "handlePodMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Pod name.",
            "name": "pod",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both pod CPU usage and memory usage: `pod_cpu_usage|pod_memory_usage`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces/{namespace}/pods/{pod}/containers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Container Metrics"
        ],
        "summary": "Get container-level metric data of a specific pod's containers. Navigate to the pod by the pod's namespace.",
        "operationId": "handleContainerMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Pod name.",
            "name": "pod",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both container CPU usage and memory usage: `container_cpu_usage|container_memory_usage`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The container filter consists of a regexp pattern. It specifies which container data to return. For example, the following filter matches container prometheus and prometheus-config-reloader: `prometheus|prometheus-config-reloader`.",
            "name": "resources_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort containers by the specified metric. Not applicable if **start** and **end** are provided.",
            "name": "sort_metric",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc.",
            "description": "Sort order. One of asc, desc.",
            "name": "sort_type",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The page number. This field paginates result data of each metric, then returns a specific page. For example, setting **page** to 2 returns the second page. It only applies to sorted metric data.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 5,
            "description": "Page size, the maximum number of results in a single page. Defaults to 5.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces/{namespace}/pods/{pod}/containers/{container}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Container Metrics"
        ],
        "summary": "Get container-level metric data of a specific container. Navigate to the container by the pod name and the namespace.",
        "operationId": "handleContainerMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Pod name.",
            "name": "pod",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Container name.",
            "name": "container",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both container CPU usage and memory usage: `container_cpu_usage|container_memory_usage`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces/{namespace}/targets/labelsets": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custom Metrics"
        ],
        "summary": "List all available labels and values of a metric within a specific time span.",
        "operationId": "handleMetricLabelSetQuery",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the metric",
            "name": "metric",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Start time of query. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "End time of query. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.MetricLabelSet"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.MetricLabelSet"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces/{namespace}/targets/metadata": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custom Metrics"
        ],
        "summary": "Get metadata of metrics for the specific namespace.",
        "operationId": "handleMetadataQuery",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metadata"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metadata"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces/{namespace}/targets/query": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Custom Metrics"
        ],
        "summary": "Make an ad-hoc query in the specific namespace.",
        "operationId": "handleAdhocQuery",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The expression to be evaluated.",
            "name": "expr",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metric"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metric"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces/{namespace}/workloads": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Workload Metrics"
        ],
        "summary": "Get workload-level metric data of a specific namespace's workloads.",
        "operationId": "handleWorkloadMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both workload CPU usage and memory usage: `workload_cpu_usage|workload_memory_usage`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The workload filter consists of a regexp pattern. It specifies which workload data to return. For example, the following filter matches any workload whose name begins with prometheus: `prometheus.*`.",
            "name": "resources_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort workloads by the specified metric. Not applicable if **start** and **end** are provided.",
            "name": "sort_metric",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc.",
            "description": "Sort order. One of asc, desc.",
            "name": "sort_type",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The page number. This field paginates result data of each metric, then returns a specific page. For example, setting **page** to 2 returns the second page. It only applies to sorted metric data.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 5,
            "description": "Page size, the maximum number of results in a single page. Defaults to 5.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces/{namespace}/workloads/{kind}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Workload Metrics"
        ],
        "summary": "Get workload-level metric data of all workloads which belongs to a specific kind.",
        "operationId": "handleWorkloadMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Workload kind. One of deployment, daemonset, statefulset.",
            "name": "kind",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both workload CPU usage and memory usage: `workload_cpu_usage|workload_memory_usage`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The workload filter consists of a regexp pattern. It specifies which workload data to return. For example, the following filter matches any workload whose name begins with prometheus: `prometheus.*`.",
            "name": "resources_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort workloads by the specified metric. Not applicable if **start** and **end** are provided.",
            "name": "sort_metric",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc.",
            "description": "Sort order. One of asc, desc.",
            "name": "sort_type",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The page number. This field paginates result data of each metric, then returns a specific page. For example, setting **page** to 2 returns the second page. It only applies to sorted metric data.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 5,
            "description": "Page size, the maximum number of results in a single page. Defaults to 5.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces/{namespace}/workloads/{kind}/{workload}/pods": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pod Metrics"
        ],
        "summary": "Get pod-level metric data of a specific workload's pods. Navigate to the workload by the namespace.",
        "operationId": "handlePodMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the namespace.",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Workload kind. One of deployment, daemonset, statefulset.",
            "name": "kind",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Workload name.",
            "name": "workload",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both pod CPU usage and memory usage: `pod_cpu_usage|pod_memory_usage`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The pod filter consists of a regexp pattern. It specifies which pod data to return. For example, the following filter matches any pod whose name begins with redis: `redis.*`.",
            "name": "resources_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort pods by the specified metric. Not applicable if **start** and **end** are provided.",
            "name": "sort_metric",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc.",
            "description": "Sort order. One of asc, desc.",
            "name": "sort_type",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The page number. This field paginates result data of each metric, then returns a specific page. For example, setting **page** to 2 returns the second page. It only applies to sorted metric data.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 5,
            "description": "Page size, the maximum number of results in a single page. Defaults to 5.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/nodes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Node Metrics"
        ],
        "summary": "Get node-level metric data of all nodes.",
        "operationId": "handleNodeMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both node CPU usage and disk usage: `node_cpu_usage|node_disk_size_usage`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The node filter consists of a regexp pattern. It specifies which node data to return. For example, the following filter matches both node i-caojnter and i-cmu82ogj: `i-caojnter|i-cmu82ogj`.",
            "name": "resources_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort nodes by the specified metric. Not applicable if **start** and **end** are provided.",
            "name": "sort_metric",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc.",
            "description": "Sort order. One of asc, desc.",
            "name": "sort_type",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The page number. This field paginates result data of each metric, then returns a specific page. For example, setting **page** to 2 returns the second page. It only applies to sorted metric data.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 5,
            "description": "Page size, the maximum number of results in a single page. Defaults to 5.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/nodes/{node}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Node Metrics"
        ],
        "summary": "Get node-level metric data of the specific node.",
        "operationId": "handleNodeMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "Node name.",
            "name": "node",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both node CPU usage and disk usage: `node_cpu_usage|node_disk_size_usage`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/nodes/{node}/pods": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pod Metrics"
        ],
        "summary": "Get pod-level metric data of all pods on a specific node.",
        "operationId": "handlePodMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "Node name.",
            "name": "node",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both pod CPU usage and memory usage: `pod_cpu_usage|pod_memory_usage`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The pod filter consists of a regexp pattern. It specifies which pod data to return. For example, the following filter matches any pod whose name begins with redis: `redis.*`.",
            "name": "resources_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort pods by the specified metric. Not applicable if **start** and **end** are provided.",
            "name": "sort_metric",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc.",
            "description": "Sort order. One of asc, desc.",
            "name": "sort_type",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The page number. This field paginates result data of each metric, then returns a specific page. For example, setting **page** to 2 returns the second page. It only applies to sorted metric data.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 5,
            "description": "Page size, the maximum number of results in a single page. Defaults to 5.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/nodes/{node}/pods/{pod}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pod Metrics"
        ],
        "summary": "Get pod-level metric data of a specific pod. Navigate to the pod by the node where it is scheduled.",
        "operationId": "handlePodMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "Node name.",
            "name": "node",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Pod name.",
            "name": "pod",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both pod CPU usage and memory usage: `pod_cpu_usage|pod_memory_usage`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/storageclasses/{storageclass}/persistentvolumeclaims": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "PVC Metrics"
        ],
        "summary": "Get PVC-level metric data of the specific storageclass's PVCs.",
        "operationId": "handlePVCMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the storageclass.",
            "name": "storageclass",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both PVC available and used inodes: `pvc_inodes_available|pvc_inodes_used`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The PVC filter consists of a regexp pattern. It specifies which PVC data to return. For example, the following filter matches any pod whose name begins with redis: `redis.*`.",
            "name": "resources_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort PVCs by the specified metric. Not applicable if **start** and **end** are provided.",
            "name": "sort_metric",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc.",
            "description": "Sort order. One of asc, desc.",
            "name": "sort_type",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The page number. This field paginates result data of each metric, then returns a specific page. For example, setting **page** to 2 returns the second page. It only applies to sorted metric data.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 5,
            "description": "Page size, the maximum number of results in a single page. Defaults to 5.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/workspaces": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Workspace Metrics"
        ],
        "summary": "Get workspace-level metric data of all workspaces.",
        "operationId": "handleWorkspaceMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both workspace CPU usage and memory usage: `workspace_cpu_usage|workspace_memory_usage`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The workspace filter consists of a regexp pattern. It specifies which workspace data to return.",
            "name": "resources_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort workspaces by the specified metric. Not applicable if **start** and **end** are provided.",
            "name": "sort_metric",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc.",
            "description": "Sort order. One of asc, desc.",
            "name": "sort_type",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The page number. This field paginates result data of each metric, then returns a specific page. For example, setting **page** to 2 returns the second page. It only applies to sorted metric data.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 5,
            "description": "Page size, the maximum number of results in a single page. Defaults to 5.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/workspaces/{workspace}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Workspace Metrics"
        ],
        "summary": "Get workspace-level metric data of a specific workspace.",
        "operationId": "handleWorkspaceMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "Workspace name.",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both workspace CPU usage and memory usage: `workspace_cpu_usage|workspace_memory_usage`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Additional operations. Currently available types is statistics. It retrieves the total number of namespaces, devops projects, members and roles in this workspace at the moment.",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/monitoring.kubesphere.io/v1alpha3/workspaces/{workspace}/namespaces": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespace Metrics"
        ],
        "summary": "Get namespace-level metric data of a specific workspace.",
        "operationId": "handleNamespaceMetricsQuery",
        "parameters": [
          {
            "type": "string",
            "description": "Workspace name.",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both namespace CPU usage and memory usage: `namespace_cpu_usage|namespace_memory_usage`. View available metrics at [kubesphere.io](https://docs.kubesphere.io/advanced-v2.0/zh-CN/api-reference/monitoring-metrics/).",
            "name": "metrics_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The namespace filter consists of a regexp pattern. It specifies which namespace data to return. For example, the following filter matches both namespace test and kube-system: `test|kube-system`.",
            "name": "resources_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. ",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. ",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": "10m",
            "description": "Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.",
            "name": "time",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sort namespaces by the specified metric. Not applicable if **start** and **end** are provided.",
            "name": "sort_metric",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc.",
            "description": "Sort order. One of asc, desc.",
            "name": "sort_type",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The page number. This field paginates result data of each metric, then returns a specific page. For example, setting **page** to 2 returns the second page. It only applies to sorted metric data.",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 5,
            "description": "Page size, the maximum number of results in a single page. Defaults to 5.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/monitoring.Metrics"
            }
          }
        }
      }
    },
    "/kapis/network.kubesphere.io/v1alpha2/namespaces/{namespace}/topology": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Network Topology"
        ],
        "summary": "Get the topology with specifying a namespace",
        "operationId": "getNamespaceTopology",
        "parameters": [
          {
            "type": "string",
            "description": "name of the namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.TopologyResponse"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.TopologyResponse"
            }
          }
        }
      }
    },
    "/kapis/network.kubesphere.io/v1alpha2/namespaces/{namespace}/topology/{node_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Network Topology"
        ],
        "summary": "Get the topology with specifying a node id in the whole topology and specifying a namespace",
        "operationId": "getNamespaceNodeTopology",
        "parameters": [
          {
            "type": "string",
            "description": "name of the namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "id of the node in the whole topology",
            "name": "node_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.NodeResponse"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.NodeResponse"
            }
          }
        }
      }
    },
    "/kapis/operations.kubesphere.io/v1alpha2/namespaces/{namespace}/jobs/{job}": {
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Rerun job whether the job is complete or not",
        "operationId": "handleJobReRun",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "job name",
            "name": "job",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the namespace where the job runs in",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "action must be \"rerun\"",
            "name": "action",
            "in": "query"
          },
          {
            "type": "string",
            "description": "version of job, rerun when the version matches",
            "name": "resourceVersion",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha2/abnormalworkloads": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Resources"
        ],
        "summary": "get abnormal workloads' count of whole cluster",
        "operationId": "handleGetNamespacedAbnormalWorkloads",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.Workloads"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.Workloads"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha2/componenthealth": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Component Status"
        ],
        "summary": "Get the health status of system components.",
        "operationId": "handleGetSystemHealthStatus",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.HealthStatus"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.HealthStatus"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha2/components": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Component Status"
        ],
        "summary": "List the system components.",
        "operationId": "handleGetComponents",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha2.ComponentStatus"
              }
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha2.ComponentStatus"
              }
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha2/components/{component}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Component Status"
        ],
        "summary": "Describe the specified system component.",
        "operationId": "handleGetComponentStatus",
        "parameters": [
          {
            "type": "string",
            "description": "component name",
            "name": "component",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.ComponentStatus"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.ComponentStatus"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha2/git/verify": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Verification"
        ],
        "summary": "Verify if the kubernetes secret has read access to the git repository",
        "operationId": "handleVerifyGitCredential",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/git.AuthInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha2/namespaces/{namespace}/abnormalworkloads": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespace Resources"
        ],
        "summary": "get abnormal workloads' count of specified namespace",
        "operationId": "handleGetNamespacedAbnormalWorkloads",
        "parameters": [
          {
            "type": "string",
            "description": "the name of the project",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.Workloads"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.Workloads"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha2/namespaces/{namespace}/daemonsets/{daemonset}/revisions/{revision}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespace Resources"
        ],
        "summary": "Get the specified daemonset revision",
        "operationId": "handleGetDaemonSetRevision",
        "parameters": [
          {
            "type": "string",
            "description": "the name of the daemonset",
            "name": "daemonset",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the namespace of the daemonset",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the revision of the daemonset",
            "name": "revision",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.DaemonSet"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.DaemonSet"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha2/namespaces/{namespace}/deployments/{deployment}/revisions/{revision}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespace Resources"
        ],
        "summary": "Get the specified deployment revision",
        "operationId": "handleGetDeploymentRevision",
        "parameters": [
          {
            "type": "string",
            "description": "the name of deployment",
            "name": "deployment",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the namespace of the deployment",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the revision of the deployment",
            "name": "revision",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.ReplicaSet"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.ReplicaSet"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha2/namespaces/{namespace}/quotas": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespace Resources"
        ],
        "summary": "get specified namespace's resource quota and usage",
        "operationId": "handleGetNamespaceQuotas",
        "parameters": [
          {
            "type": "string",
            "description": "the name of the project",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ResourceQuota"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ResourceQuota"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha2/namespaces/{namespace}/router": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespace Resources"
        ],
        "summary": "List router of a specified project",
        "operationId": "handleGetRouter",
        "parameters": [
          {
            "type": "string",
            "description": "the name of the project",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Service"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Service"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespace Resources"
        ],
        "summary": "Update a router for a specified project",
        "operationId": "handleUpdateRouter",
        "parameters": [
          {
            "type": "string",
            "description": "the name of the project",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Service"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Service"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespace Resources"
        ],
        "summary": "Create a router for a specified project",
        "operationId": "handleCreateRouter",
        "parameters": [
          {
            "type": "string",
            "description": "the name of the project",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Service"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Service"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespace Resources"
        ],
        "summary": "List router of a specified project",
        "operationId": "handleDeleteRouter",
        "parameters": [
          {
            "type": "string",
            "description": "the name of the project",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Service"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Service"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha2/namespaces/{namespace}/statefulsets/{statefulset}/revisions/{revision}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespace Resources"
        ],
        "summary": "Get the specified statefulset revision",
        "operationId": "handleGetStatefulSetRevision",
        "parameters": [
          {
            "type": "string",
            "description": "the name of the statefulset",
            "name": "statefulset",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the namespace of the statefulset",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the revision of the statefulset",
            "name": "revision",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.StatefulSet"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.StatefulSet"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha2/namespaces/{namespace}/{resources}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespace Resources"
        ],
        "summary": "Namespace level resource query",
        "operationId": "handleListNamespaceResources",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "the name of the project",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "namespace level resource type, e.g. pods,jobs,configmaps,services.",
            "name": "resources",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "key=%s,key~%s",
            "description": "query conditions,connect multiple conditions with commas, equal symbol for exact query, wave symbol for fuzzy query e.g. name~a",
            "name": "conditions",
            "in": "query"
          },
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sort parameters, e.g. reverse=true",
            "name": "reverse",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sort parameters, e.g. orderBy=createTime",
            "name": "orderBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha2/quotas": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Resources"
        ],
        "summary": "get whole cluster's resource usage",
        "operationId": "handleGetClusterQuotas",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ResourceQuota"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ResourceQuota"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha2/registry/blob": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Docker Registry"
        ],
        "summary": "Retrieve the blob from the registry identified",
        "operationId": "handleGetRegistryEntry",
        "parameters": [
          {
            "type": "string",
            "format": "image=%s",
            "description": "query image, condition for filtering.",
            "name": "image",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "namespace=%s",
            "description": "namespace which secret in.",
            "name": "namespace",
            "in": "query"
          },
          {
            "type": "string",
            "format": "secret=%s",
            "description": "secret name",
            "name": "secret",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/registries.ImageDetails"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/registries.ImageDetails"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha2/registry/verify": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Verification"
        ],
        "summary": "verify if a user has access to the docker registry",
        "operationId": "handleVerifyRegistryCredential",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.RegistryCredential"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha2/users/{user}/kubeconfig": {
      "get": {
        "produces": [
          "text/plain",
          "application/json"
        ],
        "tags": [
          "User Resources"
        ],
        "summary": "get users' kubeconfig",
        "operationId": "GetKubeconfig",
        "parameters": [
          {
            "type": "string",
            "description": "username",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha2/users/{user}/kubectl": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "User Resources"
        ],
        "summary": "get user's kubectl pod",
        "operationId": "GetKubectlPod",
        "parameters": [
          {
            "type": "string",
            "description": "username",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.PodInfo"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.PodInfo"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha2/{resources}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Cluster Resources"
        ],
        "summary": "Cluster level resources",
        "operationId": "handleListNamespaceResources",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "cluster level resource type, e.g. nodes,workspaces,storageclasses,clusterrole.",
            "name": "resources",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "key=value,key~value",
            "description": "query conditions, connect multiple conditions with commas, equal symbol for exact query, wave symbol for fuzzy query e.g. name~a",
            "name": "conditions",
            "in": "query"
          },
          {
            "type": "string",
            "format": "limit=%d,page=%d",
            "default": "limit=10,page=1",
            "description": "paging query, e.g. limit=100,page=1",
            "name": "paging",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sort parameters, e.g. reverse=true",
            "name": "reverse",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sort parameters, e.g. orderBy=createTime",
            "name": "orderBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha3/componenthealth": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Component Status"
        ],
        "summary": "Get the health status of system components.",
        "operationId": "handleGetSystemHealthStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha2.HealthStatus"
            }
          },
          "default": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha2.HealthStatus"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha3/components": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Component Status"
        ],
        "summary": "List the system components.",
        "operationId": "handleGetComponents",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha2.ComponentStatus"
              }
            }
          },
          "default": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha2.ComponentStatus"
              }
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha3/components/{component}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Component Status"
        ],
        "summary": "Describe the specified system component.",
        "operationId": "handleGetComponentStatus",
        "parameters": [
          {
            "type": "string",
            "description": "component name",
            "name": "component",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha2.ComponentStatus"
            }
          },
          "default": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha2.ComponentStatus"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha3/namespaces/{namespace}/{resources}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespaced Resource"
        ],
        "summary": "Namespace level resource query",
        "operationId": "handleListResources",
        "parameters": [
          {
            "type": "string",
            "description": "the name of the project",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "namespace level resource type, e.g. pods,jobs,configmaps,services.",
            "name": "resources",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name used to do filtering",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "format": "page=%d",
            "default": "page=1",
            "description": "page",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "ascending=false",
            "description": "sort parameters, e.g. reverse=true",
            "name": "ascending",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sort parameters, e.g. orderBy=createTime",
            "name": "sortBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha3/namespaces/{namespace}/{resources}/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Namespaced Resource"
        ],
        "summary": "Namespace level get resource query",
        "operationId": "handleGetResources",
        "parameters": [
          {
            "type": "string",
            "description": "the name of the project",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "namespace level resource type, e.g. pods,jobs,configmaps,services.",
            "name": "resources",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of resource",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha3/{resources}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clustered Resource"
        ],
        "summary": "Cluster level resources",
        "operationId": "handleListResources",
        "parameters": [
          {
            "type": "string",
            "description": "cluster level resource type, e.g. pods,jobs,configmaps,services.",
            "name": "resources",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name used to do filtering",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "format": "page=%d",
            "default": "page=1",
            "description": "page",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "ascending=false",
            "description": "sort parameters, e.g. reverse=true",
            "name": "ascending",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sort parameters, e.g. orderBy=createTime",
            "name": "sortBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      }
    },
    "/kapis/resources.kubesphere.io/v1alpha3/{resources}/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Clustered Resource"
        ],
        "summary": "Cluster level resource",
        "operationId": "handleGetResources",
        "parameters": [
          {
            "type": "string",
            "description": "cluster level resource type, e.g. pods,jobs,configmaps,services.",
            "name": "resources",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "the name of the clustered resources",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "default": {
            "description": "ok"
          }
        }
      }
    },
    "/kapis/servicemesh.kubesphere.io/v1alpha2/namespaces/graph": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceMesh"
        ],
        "summary": "Get graph from all namespaces",
        "operationId": "getNamespacesGraph",
        "parameters": [
          {
            "type": "string",
            "default": "10m",
            "description": "duration of the query period, in seconds",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "workload",
            "description": "type of the generated service graph. Available graph types: [app, service, versionedApp, workload].",
            "name": "graphType",
            "in": "query"
          },
          {
            "type": "string",
            "default": "none",
            "description": "app box grouping characteristic. Available groupings: [app, none, version].",
            "name": "groupBy",
            "in": "query"
          },
          {
            "type": "string",
            "description": "from which time point in UNIX timestamp, default now",
            "name": "queryTime",
            "in": "query"
          },
          {
            "type": "string",
            "default": false,
            "description": "flag for injecting the requested service node between source and destination nodes.",
            "name": "injectServiceNodes",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.graphResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/v1alpha2.BadRequestError"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/v1alpha2.NotFoundError"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.graphResponse"
            }
          }
        }
      }
    },
    "/kapis/servicemesh.kubesphere.io/v1alpha2/namespaces/{namespace}/apps/{app}/health": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceMesh"
        ],
        "summary": "Get app health",
        "operationId": "getAppHealth",
        "parameters": [
          {
            "type": "string",
            "description": "name of a namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "app name",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "10m",
            "description": "the rate interval used for fetching error rate",
            "name": "rateInterval",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "the time to use for query",
            "name": "queryTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.appHealthResponse"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.appHealthResponse"
            }
          }
        }
      }
    },
    "/kapis/servicemesh.kubesphere.io/v1alpha2/namespaces/{namespace}/apps/{app}/metrics": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceMesh"
        ],
        "summary": "Get app metrics from a specific namespace",
        "operationId": "getAppMetrics",
        "parameters": [
          {
            "type": "string",
            "description": "name of the namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the app",
            "name": "app",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "[]",
            "description": "type of metrics type, fetch all metrics when empty, e.g. request_count, request_duration, request_error_count",
            "name": "filters[]",
            "in": "query"
          },
          {
            "type": "string",
            "description": "from which UNIX time to extract metrics",
            "name": "queryTime",
            "in": "query"
          },
          {
            "type": "string",
            "default": 1800,
            "description": "duration of the query period, in seconds",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": 15,
            "description": "step between graph data points, in seconds.",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "description": "metrics rate intervals, e.g. 20s",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "outbound",
            "description": "traffic direction: 'inbound' or 'outbound'",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "description": "list of quantiles to fetch, fetch no quantiles when empty. eg. 0.5, 0.9, 0.99",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "description": "list of labels to use for grouping metrics(via Prometheus 'by' clause), e.g. source_workload, destination_service_name",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "all protocols",
            "description": "request protocol for the telemetry, e.g. http/tcp/grpc",
            "name": "requestProtocol",
            "in": "query"
          },
          {
            "type": "string",
            "default": "source",
            "description": "istio telemetry reporter, 'source' or 'destination'",
            "name": "reporter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.metricsResponse"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.metricsResponse"
            }
          }
        }
      }
    },
    "/kapis/servicemesh.kubesphere.io/v1alpha2/namespaces/{namespace}/graph": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceMesh"
        ],
        "summary": "Get service graph for a specific namespace",
        "operationId": "getNamespaceGraph",
        "parameters": [
          {
            "type": "string",
            "description": "name of a namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "10m",
            "description": "duration of the query period, in seconds",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": "workload",
            "description": "type of the generated service graph. Available graph types: [app, service, versionedApp, workload].",
            "name": "graphType",
            "in": "query"
          },
          {
            "type": "string",
            "default": "none",
            "description": "app box grouping characteristic. Available groupings: [app, none, version].",
            "name": "groupBy",
            "in": "query"
          },
          {
            "type": "string",
            "description": "from which time point in UNIX timestamp, default now",
            "name": "queryTime",
            "in": "query"
          },
          {
            "type": "string",
            "default": false,
            "description": "flag for injecting the requested service node between source and destination nodes.",
            "name": "injectServiceNodes",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.graphResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/v1alpha2.BadRequestError"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/v1alpha2.NotFoundError"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.graphResponse"
            }
          }
        }
      }
    },
    "/kapis/servicemesh.kubesphere.io/v1alpha2/namespaces/{namespace}/health": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceMesh"
        ],
        "summary": "Get app/service/workload health of a namespace",
        "operationId": "getNamespaceHealth",
        "parameters": [
          {
            "type": "string",
            "description": "name of a namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "10m",
            "description": "the rate interval used for fetching error rate",
            "name": "rateInterval",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "the time to use for query",
            "name": "queryTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.namespaceAppHealthResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/v1alpha2.BadRequestError"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/v1alpha2.NotFoundError"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.namespaceAppHealthResponse"
            }
          }
        }
      }
    },
    "/kapis/servicemesh.kubesphere.io/v1alpha2/namespaces/{namespace}/metrics": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceMesh"
        ],
        "summary": "Get metrics from a specific namespace",
        "operationId": "getNamespaceMetrics",
        "parameters": [
          {
            "type": "string",
            "description": "name of the namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "[]",
            "description": "type of metrics type, fetch all metrics when empty, e.g. request_count, request_duration, request_error_count",
            "name": "filters[]",
            "in": "query"
          },
          {
            "type": "string",
            "description": "from which UNIX time to extract metrics",
            "name": "queryTime",
            "in": "query"
          },
          {
            "type": "string",
            "default": 1800,
            "description": "duration of the query period, in seconds",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": 15,
            "description": "step between graph data points, in seconds.",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "description": "metrics rate intervals, e.g. 20s",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "outbound",
            "description": "traffic direction: 'inbound' or 'outbound'",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "description": "list of quantiles to fetch, fetch no quantiles when empty. eg. 0.5, 0.9, 0.99",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "description": "list of labels to use for grouping metrics(via Prometheus 'by' clause), e.g. source_workload, destination_service_name",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "all protocols",
            "description": "request protocol for the telemetry, e.g. http/tcp/grpc",
            "name": "requestProtocol",
            "in": "query"
          },
          {
            "type": "string",
            "default": "source",
            "description": "istio telemetry reporter, 'source' or 'destination'",
            "name": "reporter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.metricsResponse"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.metricsResponse"
            }
          }
        }
      }
    },
    "/kapis/servicemesh.kubesphere.io/v1alpha2/namespaces/{namespace}/services/{service}/health": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceMesh"
        ],
        "summary": "Get service health",
        "operationId": "getServiceHealth",
        "parameters": [
          {
            "type": "string",
            "description": "name of a namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "service name",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "10m",
            "description": "the rate interval used for fetching error rate",
            "name": "rateInterval",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "the time to use for query",
            "name": "queryTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.serviceHealthResponse"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.serviceHealthResponse"
            }
          }
        }
      }
    },
    "/kapis/servicemesh.kubesphere.io/v1alpha2/namespaces/{namespace}/services/{service}/metrics": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceMesh"
        ],
        "summary": "Get service metrics from a specific namespace",
        "operationId": "getServiceMetrics",
        "parameters": [
          {
            "type": "string",
            "description": "name of the namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the service",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "[]",
            "description": "type of metrics type, fetch all metrics when empty, e.g. request_count, request_duration, request_error_count",
            "name": "filters[]",
            "in": "query"
          },
          {
            "type": "string",
            "description": "from which UNIX time to extract metrics",
            "name": "queryTime",
            "in": "query"
          },
          {
            "type": "string",
            "default": 1800,
            "description": "duration of the query period, in seconds",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": 15,
            "description": "step between graph data points, in seconds.",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "description": "metrics rate intervals, e.g. 20s",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "outbound",
            "description": "traffic direction: 'inbound' or 'outbound'",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "description": "list of quantiles to fetch, fetch no quantiles when empty. eg. 0.5, 0.9, 0.99",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "description": "list of labels to use for grouping metrics(via Prometheus 'by' clause), e.g. source_workload, destination_service_name",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "all protocols",
            "description": "request protocol for the telemetry, e.g. http/tcp/grpc",
            "name": "requestProtocol",
            "in": "query"
          },
          {
            "type": "string",
            "default": "source",
            "description": "istio telemetry reporter, 'source' or 'destination'",
            "name": "reporter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.metricsResponse"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.metricsResponse"
            }
          }
        }
      }
    },
    "/kapis/servicemesh.kubesphere.io/v1alpha2/namespaces/{namespace}/services/{service}/traces": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceMesh"
        ],
        "summary": "Get tracing of a service, should have servicemesh enabled first",
        "operationId": "getServiceTracing",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of service",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of service queried",
            "name": "service",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "start of time range want to query, in unix timestamp",
            "name": "start",
            "in": "query"
          },
          {
            "type": "string",
            "description": "end of time range want to query, in unix timestamp",
            "name": "end",
            "in": "query"
          },
          {
            "type": "string",
            "default": 10,
            "description": "maximum tracing entries returned at one query, default 10",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "loopback of duration want to query, e.g. 30m/1h/2d",
            "name": "loopback",
            "in": "query"
          },
          {
            "type": "string",
            "description": "maximum duration of a request",
            "name": "maxDuration",
            "in": "query"
          },
          {
            "type": "string",
            "description": "minimum duration of a request",
            "name": "minDuration",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/kapis/servicemesh.kubesphere.io/v1alpha2/namespaces/{namespace}/workloads/{workload}/health": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceMesh"
        ],
        "summary": "Get workload health",
        "operationId": "getWorkloadHealth",
        "parameters": [
          {
            "type": "string",
            "description": "name of a namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "workload name",
            "name": "workload",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "10m",
            "description": "the rate interval used for fetching error rate",
            "name": "rateInterval",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "the time to use for query",
            "name": "queryTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.workloadHealthResponse"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.workloadHealthResponse"
            }
          }
        }
      }
    },
    "/kapis/servicemesh.kubesphere.io/v1alpha2/namespaces/{namespace}/workloads/{workload}/metrics": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "ServiceMesh"
        ],
        "summary": "Get workload metrics from a specific namespace",
        "operationId": "getWorkloadMetrics",
        "parameters": [
          {
            "type": "string",
            "description": "name of the namespace",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the workload",
            "name": "workload",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "[]",
            "description": "type of metrics type, fetch all metrics when empty, e.g. request_count, request_duration, request_error_count",
            "name": "filters[]",
            "in": "query"
          },
          {
            "type": "string",
            "description": "from which UNIX time to extract metrics",
            "name": "queryTime",
            "in": "query"
          },
          {
            "type": "string",
            "default": 1800,
            "description": "duration of the query period, in seconds",
            "name": "duration",
            "in": "query"
          },
          {
            "type": "string",
            "default": 15,
            "description": "step between graph data points, in seconds.",
            "name": "step",
            "in": "query"
          },
          {
            "type": "string",
            "default": "1m",
            "description": "metrics rate intervals, e.g. 20s",
            "name": "rateInterval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "outbound",
            "description": "traffic direction: 'inbound' or 'outbound'",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "description": "list of quantiles to fetch, fetch no quantiles when empty. eg. 0.5, 0.9, 0.99",
            "name": "quantiles[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "[]",
            "description": "list of labels to use for grouping metrics(via Prometheus 'by' clause), e.g. source_workload, destination_service_name",
            "name": "byLabels[]",
            "in": "query"
          },
          {
            "type": "string",
            "default": "all protocols",
            "description": "request protocol for the telemetry, e.g. http/tcp/grpc",
            "name": "requestProtocol",
            "in": "query"
          },
          {
            "type": "string",
            "default": "source",
            "description": "istio telemetry reporter, 'source' or 'destination'",
            "name": "reporter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.metricsResponse"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.metricsResponse"
            }
          }
        }
      }
    },
    "/kapis/tenant.kubesphere.io/v1alpha2/auditing/events": {
      "get": {
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "tags": [
          "Auditing Query"
        ],
        "summary": "Query auditing events against the cluster",
        "operationId": "Auditing",
        "parameters": [
          {
            "type": "string",
            "default": "query",
            "description": "Operation type. This can be one of three types: `query` (for querying events), `statistics` (for retrieving statistical data), `histogram` (for displaying events count by time interval). Defaults to query.",
            "name": "operation",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of workspaces. This field restricts the query to specified workspaces. For example, the following filter matches the workspace my-ws and demo-ws: `my-ws,demo-ws`.",
            "name": "workspace_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of keywords. Differing from **workspace_filter**, this field performs fuzzy matching on workspaces. For example, the following value limits the query to workspaces whose name contains the word my(My,MY,...) *OR* demo(Demo,DemO,...): `my,demo`.",
            "name": "workspace_search",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of namespaces. This field restricts the query to specified `ObjectRef.Namespace`.",
            "name": "objectref_namespace_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of keywords. Differing from **objectref_namespace_filter**, this field performs fuzzy matching on `ObjectRef.Namespace`.",
            "name": "objectref_namespace_search",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of names. This field restricts the query to specified `ObjectRef.Name`.",
            "name": "objectref_name_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of keywords. Differing from **objectref_name_filter**, this field performs fuzzy matching on `ObjectRef.Name`.",
            "name": "objectref_name_search",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of levels. This know values are Metadata, Request, RequestResponse.",
            "name": "level_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of verbs. This field restricts the query to specified verb. This field restricts the query to specified `Verb`.",
            "name": "verb_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of user. This field restricts the query to specified user. For example, the following filter matches the user user1 and user2: `user1,user2`.",
            "name": "user_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of keywords. Differing from **user_filter**, this field performs fuzzy matching on 'User.username'. For example, the following value limits the query to user whose name contains the word my(My,MY,...) *OR* demo(Demo,DemO,...): `my,demo`.",
            "name": "user_search",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of keywords. This field performs fuzzy matching on 'User.Groups'. For example, the following value limits the query to group which contains the word my(My,MY,...) *OR* demo(Demo,DemO,...): `my,demo`.",
            "name": "group_search",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of keywords. This field performs fuzzy matching on 'SourceIPs'. For example, the following value limits the query to SourceIPs which contains 127.0 *OR* 192.168.: `127.0,192.168.`.",
            "name": "source_ip_search",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of resource. This field restricts the query to specified ip. This field restricts the query to specified `ObjectRef.Resource`.",
            "name": "objectref_resource_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of subresource. This field restricts the query to specified subresource. This field restricts the query to specified `ObjectRef.Subresource`.",
            "name": "objectref_subresource_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of response status code. This field restricts the query to specified response status code. This field restricts the query to specified `ResponseStatus.code`.",
            "name": "response_code_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of response status. This field restricts the query to specified response status. This field restricts the query to specified `ResponseStatus.status`.",
            "name": "response_status_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query (limits `RequestReceivedTimestamp`). The format is a string representing seconds since the epoch, eg. 1136214245.",
            "name": "start_time",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query (limits `RequestReceivedTimestamp`). The format is a string representing seconds since the epoch, eg. 1136214245.",
            "name": "end_time",
            "in": "query"
          },
          {
            "type": "string",
            "default": "15m",
            "description": "Time interval. It requires **operation** is set to `histogram`. The format is [0-9]+[smhdwMqy]. Defaults to 15m (i.e. 15 min).",
            "name": "interval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc",
            "description": "Sort order. One of asc, desc. This field sorts events by `RequestReceivedTimestamp`.",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "The offset from the result set. This field returns query results from the specified offset. It requires **operation** is set to `query`. Defaults to 0 (i.e. from the beginning of the result set).",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 10,
            "description": "Size of result set to return. It requires **operation** is set to `query`. Defaults to 10 (i.e. 10 event records).",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha1.APIResponse"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha1.APIResponse"
            }
          }
        }
      }
    },
    "/kapis/tenant.kubesphere.io/v1alpha2/clusters": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "summary": "List clusters available to users",
        "operationId": "ListClusters",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      }
    },
    "/kapis/tenant.kubesphere.io/v1alpha2/events": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Events Query"
        ],
        "summary": "Query events against the cluster",
        "operationId": "Events",
        "parameters": [
          {
            "type": "string",
            "default": "query",
            "description": "Operation type. This can be one of three types: `query` (for querying events), `statistics` (for retrieving statistical data), `histogram` (for displaying events count by time interval). Defaults to query.",
            "name": "operation",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of workspaces. This field restricts the query to specified workspaces. For example, the following filter matches the workspace my-ws and demo-ws: `my-ws,demo-ws`.",
            "name": "workspace_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of keywords. Differing from **workspace_filter**, this field performs fuzzy matching on workspaces. For example, the following value limits the query to workspaces whose name contains the word my(My,MY,...) *OR* demo(Demo,DemO,...): `my,demo`.",
            "name": "workspace_search",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of namespaces. This field restricts the query to specified `involvedObject.namespace`.",
            "name": "involved_object_namespace_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of keywords. Differing from **involved_object_namespace_filter**, this field performs fuzzy matching on `involvedObject.namespace`",
            "name": "involved_object_namespace_search",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of names. This field restricts the query to specified `involvedObject.name`.",
            "name": "involved_object_name_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of keywords. Differing from **involved_object_name_filter**, this field performs fuzzy matching on `involvedObject.name`.",
            "name": "involved_object_name_search",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of kinds. This field restricts the query to specified `involvedObject.kind`.",
            "name": "involved_object_kind_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of reasons. This field restricts the query to specified `reason`.",
            "name": "reason_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of keywords. Differing from **reason_filter**, this field performs fuzzy matching on `reason`.",
            "name": "reason_search",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of keywords. This field performs fuzzy matching on `message`.",
            "name": "message_search",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Type of event matching on `type`. This can be one of two types: `Warning`, `Normal`",
            "name": "type_filter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query (limits `lastTimestamp`). The format is a string representing seconds since the epoch, eg. 1136214245.",
            "name": "start_time",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query (limits `lastTimestamp`). The format is a string representing seconds since the epoch, eg. 1136214245.",
            "name": "end_time",
            "in": "query"
          },
          {
            "type": "string",
            "default": "15m",
            "description": "Time interval. It requires **operation** is set to `histogram`. The format is [0-9]+[smhdwMqy]. Defaults to 15m (i.e. 15 min).",
            "name": "interval",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc",
            "description": "Sort order. One of asc, desc. This field sorts events by `lastTimestamp`.",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "The offset from the result set. This field returns query results from the specified offset. It requires **operation** is set to `query`. Defaults to 0 (i.e. from the beginning of the result set).",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 10,
            "description": "Size of result set to return. It requires **operation** is set to `query`. Defaults to 10 (i.e. 10 event records).",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha1.APIResponse"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha1.APIResponse"
            }
          }
        }
      }
    },
    "/kapis/tenant.kubesphere.io/v1alpha2/federatednamespaces": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "summary": "List the federated namespaces for the current user",
        "operationId": "ListFederatedNamespaces",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      }
    },
    "/kapis/tenant.kubesphere.io/v1alpha2/logs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Log Query"
        ],
        "summary": "Query logs against the cluster.",
        "operationId": "QueryLogs",
        "parameters": [
          {
            "type": "string",
            "default": "query",
            "description": "Operation type. This can be one of four types: query (for querying logs), statistics (for retrieving statistical data), histogram (for displaying log count by time interval) and export (for exporting logs). Defaults to query.",
            "name": "operation",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of namespaces. This field restricts the query to specified namespaces. For example, the following filter matches the namespace my-ns and demo-ns: `my-ns,demo-ns`",
            "name": "namespaces",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of keywords. Differing from **namespaces**, this field performs fuzzy matching on namespaces. For example, the following value limits the query to namespaces whose name contains the word my(My,MY,...) *OR* demo(Demo,DemO,...): `my,demo`.",
            "name": "namespace_query",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of workloads. This field restricts the query to specified workloads. For example, the following filter matches the workload my-wl and demo-wl: `my-wl,demo-wl`",
            "name": "workloads",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of keywords. Differing from **workloads**, this field performs fuzzy matching on workloads. For example, the following value limits the query to workloads whose name contains the word my(My,MY,...) *OR* demo(Demo,DemO,...): `my,demo`.",
            "name": "workload_query",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of pods. This field restricts the query to specified pods. For example, the following filter matches the pod my-po and demo-po: `my-po,demo-po`",
            "name": "pods",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of keywords. Differing from **pods**, this field performs fuzzy matching on pods. For example, the following value limits the query to pods whose name contains the word my(My,MY,...) *OR* demo(Demo,DemO,...): `my,demo`.",
            "name": "pod_query",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of containers. This field restricts the query to specified containers. For example, the following filter matches the container my-cont and demo-cont: `my-cont,demo-cont`",
            "name": "containers",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of keywords. Differing from **containers**, this field performs fuzzy matching on containers. For example, the following value limits the query to containers whose name contains the word my(My,MY,...) *OR* demo(Demo,DemO,...): `my,demo`.",
            "name": "container_query",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A comma-separated list of keywords. The query returns logs which contain at least one keyword. Case-insensitive matching. For example, if the field is set to `err,INFO`, the query returns any log containing err(ERR,Err,...) *OR* INFO(info,InFo,...).",
            "name": "log_query",
            "in": "query"
          },
          {
            "type": "string",
            "default": "15m",
            "description": "Time interval. It requires **operation** is set to histogram. The format is [0-9]+[smhdwMqy]. Defaults to 15m (i.e. 15 min).",
            "name": "interval",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start time of query. Default to 0. The format is a string representing seconds since the epoch, eg. 1559664000.",
            "name": "start_time",
            "in": "query"
          },
          {
            "type": "string",
            "description": "End time of query. Default to now. The format is a string representing seconds since the epoch, eg. 1559664000.",
            "name": "end_time",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc",
            "description": "Sort order. One of asc, desc. This field sorts logs by timestamp.",
            "name": "sort",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "The offset from the result set. This field returns query results from the specified offset. It requires **operation** is set to query. Defaults to 0 (i.e. from the beginning of the result set).",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 10,
            "description": "Size of result to return. It requires **operation** is set to query. Defaults to 10 (i.e. 10 log records).",
            "name": "size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.APIResponse"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.APIResponse"
            }
          }
        }
      }
    },
    "/kapis/tenant.kubesphere.io/v1alpha2/namespaces": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "summary": "List the namespaces for the current user",
        "operationId": "ListNamespaces",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      }
    },
    "/kapis/tenant.kubesphere.io/v1alpha2/workspaces": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "summary": "List all workspaces that belongs to the current user",
        "operationId": "ListWorkspaces",
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/models.PageableResponse"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "summary": "Create workspace.",
        "operationId": "CreateWorkspace",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceTemplate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceTemplate"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceTemplate"
            }
          }
        }
      }
    },
    "/kapis/tenant.kubesphere.io/v1alpha2/workspaces/{workspace}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "summary": "Describe workspace.",
        "operationId": "DescribeWorkspace",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceTemplate"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceTemplate"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "summary": "Update workspace.",
        "operationId": "UpdateWorkspace",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceTemplate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceTemplate"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceTemplate"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "summary": "Delete workspace.",
        "operationId": "DeleteWorkspace",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/merge-patch+json",
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "summary": "Update workspace.",
        "operationId": "PatchWorkspace",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceTemplate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceTemplate"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1alpha2.WorkspaceTemplate"
            }
          }
        }
      }
    },
    "/kapis/tenant.kubesphere.io/v1alpha2/workspaces/{workspace}/clusters": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "summary": "List clusters authorized to the specified workspace.",
        "operationId": "ListWorkspaceClusters",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      }
    },
    "/kapis/tenant.kubesphere.io/v1alpha2/workspaces/{workspace}/devops": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "summary": "List the devops projects of the specified workspace for the current user",
        "operationId": "ListDevOpsProjects",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      }
    },
    "/kapis/tenant.kubesphere.io/v1alpha2/workspaces/{workspace}/federatednamespaces": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "summary": "List the federated namespaces of the specified workspace for the current user",
        "operationId": "ListFederatedNamespaces",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      }
    },
    "/kapis/tenant.kubesphere.io/v1alpha2/workspaces/{workspace}/namespaces": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "summary": "List the namespaces of the specified workspace for the current user",
        "operationId": "ListNamespaces",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/api.ListResult"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "summary": "List the namespaces of the specified workspace for the current user",
        "operationId": "CreateNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          }
        }
      }
    },
    "/kapis/tenant.kubesphere.io/v1alpha2/workspaces/{workspace}/namespaces/{namespace}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "summary": "Retrieve namespace details.",
        "operationId": "DescribeNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "project name",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "operationId": "UpdateNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "project name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "summary": "Delete namespace.",
        "operationId": "DeleteNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "project name",
            "name": "namespace",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/errors.Error"
            }
          }
        }
      },
      "patch": {
        "consumes": [
          "application/json",
          "application/merge-patch+json",
          "application/json-patch+json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "operationId": "PatchNamespace",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "project name",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          }
        }
      }
    },
    "/kapis/tenant.kubesphere.io/v1alpha2/workspaces/{workspace}/workspacemembers/{workspacemember}/devops": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "summary": "List the devops projects of specified workspace for the workspace member",
        "operationId": "ListDevOpsProjects",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "workspacemember username",
            "name": "workspacemember",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          }
        }
      }
    },
    "/kapis/tenant.kubesphere.io/v1alpha2/workspaces/{workspace}/workspacemembers/{workspacemember}/namespaces": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tenant Resources"
        ],
        "summary": "List the namespaces of the specified workspace for the workspace member",
        "operationId": "ListNamespaces",
        "parameters": [
          {
            "type": "string",
            "description": "workspace name",
            "name": "workspace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "workspacemember username",
            "name": "workspacemember",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          },
          "default": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/v1.Namespace"
            }
          }
        }
      }
    },
    "/kapis/terminal.kubesphere.io/v1alpha2/namespaces/{namespace}/pods/{pod}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "Terminal"
        ],
        "summary": "create terminal session",
        "operationId": "handleTerminalSession",
        "parameters": [
          {
            "type": "string",
            "description": "namespace of which the pod located in",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "name of the pod",
            "name": "pod",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "definitions": {
    "._links": {
      "properties": {
        "actions": {
          "$ref": "#/definitions/.actions"
        },
        "branches": {
          "$ref": "#/definitions/.branches"
        },
        "queue": {
          "$ref": "#/definitions/.queue"
        },
        "runs": {
          "$ref": "#/definitions/.runs"
        },
        "scm": {
          "$ref": "#/definitions/.scm"
        },
        "self": {
          "$ref": "#/definitions/.self"
        },
        "trends": {
          "$ref": "#/definitions/.trends"
        }
      }
    },
    ".actions": {
      "properties": {
        "_class": {
          "type": "string"
        },
        "href": {
          "type": "string"
        }
      }
    },
    ".branch": {
      "properties": {
        "isPrimary": {
          "description": "primary or not",
          "type": "boolean"
        },
        "issues": {
          "description": "issues",
          "type": "array",
          "items": {
            "$ref": "#/definitions/.branch.issues"
          }
        },
        "url": {
          "description": "url",
          "type": "string"
        }
      }
    },
    ".branch.issues": {},
    ".branches": {
      "properties": {
        "_class": {
          "type": "string"
        },
        "href": {
          "type": "string"
        }
      }
    },
    ".data": {
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/.data.errors"
          }
        },
        "jenkinsfile": {
          "description": "jenkinsfile",
          "type": "string"
        },
        "result": {
          "description": "result e.g. success",
          "type": "string"
        }
      }
    },
    ".data.errors": {
      "properties": {
        "error": {
          "description": "error message",
          "type": "string"
        },
        "location": {
          "description": "err location",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    ".defaultParameterValue": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "value": {
          "description": "value",
          "type": "string"
        }
      }
    },
    ".latestRun": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource",
          "$ref": "#/definitions/._links"
        },
        "actions": {
          "description": "the list of all actions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/.latestRun.actions"
          }
        },
        "artifactsZipFile": {
          "description": "the artifacts zip file",
          "type": "string"
        },
        "causeOfBlockage": {
          "description": "the cause of blockage",
          "$ref": "#/definitions/.latestRun.causeOfBlockage"
        },
        "causes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/.latestRun.causes"
          }
        },
        "changeSet": {
          "description": "changeset information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/.latestRun.changeSet"
          }
        },
        "description": {
          "description": "description",
          "$ref": "#/definitions/.latestRun.description"
        },
        "durationInMillis": {
          "description": "duration time in millis",
          "type": "integer",
          "format": "int32"
        },
        "enQueueTime": {
          "description": "the time of enter the queue",
          "type": "string"
        },
        "endTime": {
          "description": "the time of end",
          "type": "string"
        },
        "estimatedDurationInMillis": {
          "description": "estimated duration time in millis",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "name": {
          "description": "name",
          "$ref": "#/definitions/.latestRun.name"
        },
        "organization": {
          "description": "the name of organization",
          "type": "string"
        },
        "pipeline": {
          "description": "pipeline",
          "type": "string"
        },
        "replayable": {
          "description": "Replayable or not",
          "type": "boolean"
        },
        "result": {
          "description": "the result of pipeline run. e.g. SUCCESS",
          "type": "string"
        },
        "runSummary": {
          "description": "pipeline run summary",
          "type": "string"
        },
        "startTime": {
          "description": "the time of start",
          "type": "string"
        },
        "state": {
          "description": "run state. e.g. RUNNING",
          "type": "string"
        },
        "type": {
          "description": "type",
          "type": "string"
        }
      }
    },
    ".latestRun.actions": {},
    ".latestRun.causeOfBlockage": {},
    ".latestRun.causes": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "shortDescription": {
          "description": "short description",
          "type": "string"
        },
        "userId": {
          "description": "user id",
          "type": "string"
        },
        "userName": {
          "description": "user name",
          "type": "string"
        }
      }
    },
    ".latestRun.changeSet": {},
    ".latestRun.description": {},
    ".latestRun.name": {},
    ".permissions": {
      "properties": {
        "configure": {
          "description": "configure action",
          "type": "boolean"
        },
        "create": {
          "description": "create action",
          "type": "boolean"
        },
        "read": {
          "description": "read action",
          "type": "boolean"
        },
        "start": {
          "description": "start action",
          "type": "boolean"
        },
        "stop": {
          "description": "stop action",
          "type": "boolean"
        }
      }
    },
    ".queue": {
      "properties": {
        "_class": {
          "type": "string"
        },
        "href": {
          "type": "string"
        }
      }
    },
    ".ranges": {
      "properties": {
        "ranges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/.ranges.ranges"
          }
        }
      }
    },
    ".ranges.ranges": {
      "properties": {
        "end": {
          "description": "End build number",
          "type": "integer",
          "format": "int32"
        },
        "start": {
          "description": "Start build number",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    ".repositories": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource",
          "$ref": "#/definitions/._links"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/.repositories.items"
          }
        },
        "lastPage": {
          "description": "last page",
          "$ref": "#/definitions/.repositories.lastPage"
        },
        "nextPage": {
          "description": "next page",
          "$ref": "#/definitions/.repositories.nextPage"
        },
        "pageSize": {
          "description": "page size",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    ".repositories.items": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource",
          "$ref": "#/definitions/._links"
        },
        "defaultBranch": {
          "description": "default branch",
          "type": "string"
        },
        "description": {
          "description": "description",
          "type": "string"
        },
        "fullName": {
          "description": "full name",
          "type": "string"
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "permissions": {
          "$ref": "#/definitions/.permissions"
        },
        "private": {
          "description": "private or not",
          "type": "boolean"
        }
      }
    },
    ".repositories.lastPage": {},
    ".repositories.nextPage": {},
    ".runs": {
      "properties": {
        "_class": {
          "type": "string"
        },
        "href": {
          "type": "string"
        }
      }
    },
    ".scm": {
      "properties": {
        "_class": {
          "type": "string"
        },
        "href": {
          "type": "string"
        }
      }
    },
    ".scmSource": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "apiUrl": {
          "description": "api url",
          "$ref": "#/definitions/.scmSource.apiUrl"
        },
        "id": {
          "description": "The id of the source configuration management (SCM).",
          "type": "string"
        }
      }
    },
    ".scmSource.apiUrl": {},
    ".self": {
      "properties": {
        "_class": {
          "type": "string"
        },
        "href": {
          "type": "string"
        }
      }
    },
    ".trends": {
      "properties": {
        "_class": {
          "type": "string"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "api.ListResult": {
      "required": [
        "items",
        "totalItems"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.ListResult.items"
          }
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "api.ListResult.items": {},
    "api.RegistryCredential": {
      "required": [
        "username",
        "password",
        "serverhost"
      ],
      "properties": {
        "password": {
          "description": "password",
          "type": "string"
        },
        "serverhost": {
          "description": "registry server host",
          "type": "string"
        },
        "username": {
          "description": "username",
          "type": "string"
        }
      }
    },
    "api.ResourceQuota": {
      "required": [
        "namespace",
        "data"
      ],
      "properties": {
        "data": {
          "description": "resource quota status",
          "$ref": "#/definitions/v1.ResourceQuotaStatus"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        }
      }
    },
    "api.Workloads": {
      "required": [
        "namespace",
        "data"
      ],
      "properties": {
        "data": {
          "description": "the number of unhealthy workloads",
          "type": "object",
          "additionalProperties": {
            "type": "integer"
          }
        },
        "items": {
          "description": "unhealthy workloads",
          "type": "object"
        },
        "namespace": {
          "description": "the name of the namespace",
          "type": "string"
        }
      }
    },
    "big.Int": {
      "required": [
        "neg",
        "abs"
      ],
      "properties": {
        "abs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/big.Word"
          }
        },
        "neg": {
          "type": "boolean"
        }
      }
    },
    "big.Word": {},
    "cytoscape.EdgeData": {
      "required": [
        "id",
        "source",
        "target"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "isMTLS": {
          "type": "string"
        },
        "isUnused": {
          "type": "boolean"
        },
        "responseTime": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "traffic": {
          "$ref": "#/definitions/cytoscape.ProtocolTraffic"
        }
      }
    },
    "cytoscape.EdgeWrapper": {
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/cytoscape.EdgeData"
        }
      }
    },
    "cytoscape.Elements": {
      "required": [
        "nodes",
        "edges"
      ],
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cytoscape.EdgeWrapper"
          }
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cytoscape.NodeWrapper"
          }
        }
      }
    },
    "cytoscape.NodeData": {
      "required": [
        "id",
        "nodeType",
        "namespace"
      ],
      "properties": {
        "app": {
          "type": "string"
        },
        "destServices": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "hasCB": {
          "type": "boolean"
        },
        "hasMissingSC": {
          "type": "boolean"
        },
        "hasVS": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "isDead": {
          "type": "boolean"
        },
        "isGroup": {
          "type": "string"
        },
        "isInaccessible": {
          "type": "boolean"
        },
        "isMisconfigured": {
          "type": "string"
        },
        "isOutside": {
          "type": "boolean"
        },
        "isRoot": {
          "type": "boolean"
        },
        "isServiceEntry": {
          "type": "string"
        },
        "isUnused": {
          "type": "boolean"
        },
        "namespace": {
          "type": "string"
        },
        "nodeType": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "traffic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cytoscape.ProtocolTraffic"
          }
        },
        "version": {
          "type": "string"
        },
        "workload": {
          "type": "string"
        }
      }
    },
    "cytoscape.NodeWrapper": {
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/cytoscape.NodeData"
        }
      }
    },
    "cytoscape.ProtocolTraffic": {
      "required": [
        "protocol",
        "rates"
      ],
      "properties": {
        "protocol": {
          "type": "string"
        },
        "rates": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "devops.Artifacts": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource",
          "$ref": "#/definitions/._links"
        },
        "downloadable": {
          "description": "downloadable or not",
          "type": "boolean"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "path": {
          "description": "path",
          "type": "string"
        },
        "size": {
          "description": "size",
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "description": "The url for Download artifacts",
          "type": "string"
        }
      }
    },
    "devops.BranchPipeline": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource",
          "$ref": "#/definitions/._links"
        },
        "actions": {
          "description": "the list of all actions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.BranchPipeline.actions"
          }
        },
        "branch": {
          "$ref": "#/definitions/.branch"
        },
        "disabled": {
          "description": "disable or not, if disabled, can not do any action",
          "type": "boolean"
        },
        "displayName": {
          "description": "display name",
          "type": "string"
        },
        "estimatedDurationInMillis": {
          "description": "estimated duration time in millis",
          "type": "integer",
          "format": "int32"
        },
        "fullDisplayName": {
          "description": "full display name",
          "type": "string"
        },
        "fullName": {
          "description": "full name",
          "type": "string"
        },
        "latestRun": {
          "$ref": "#/definitions/.latestRun"
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "organization": {
          "description": "the name of organization",
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.BranchPipeline.parameters"
          }
        },
        "permissions": {
          "$ref": "#/definitions/.permissions"
        },
        "weatherScore": {
          "description": "the score to description the result of pipeline",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "devops.BranchPipeline.actions": {},
    "devops.BranchPipeline.parameters": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "defaultParameterValue": {
          "$ref": "#/definitions/.defaultParameterValue"
        },
        "description": {
          "description": "description",
          "type": "string"
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "type": {
          "description": "type",
          "type": "string"
        }
      }
    },
    "devops.BranchPipelineRunNodes": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource",
          "$ref": "#/definitions/._links"
        },
        "actions": {
          "description": "the list of all actions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.BranchPipelineRunNodes.actions"
          }
        },
        "causeOfBlockage": {
          "description": "the cause of blockage",
          "$ref": "#/definitions/devops.BranchPipelineRunNodes.causeOfBlockage"
        },
        "displayDescription": {
          "description": "display description",
          "$ref": "#/definitions/devops.BranchPipelineRunNodes.displayDescription"
        },
        "displayName": {
          "description": "display name",
          "type": "string"
        },
        "durationInMillis": {
          "description": "duration time in millis",
          "type": "integer",
          "format": "int32"
        },
        "edges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.BranchPipelineRunNodes.edges"
          }
        },
        "firstParent": {
          "description": "first parent resource",
          "$ref": "#/definitions/devops.BranchPipelineRunNodes.firstParent"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "input": {
          "description": "the action should user input",
          "$ref": "#/definitions/devops.Input"
        },
        "restartable": {
          "description": "restartable or not",
          "type": "boolean"
        },
        "result": {
          "description": "the result of pipeline run. e.g. SUCCESS. e.g. SUCCESS",
          "type": "string"
        },
        "startTime": {
          "description": "the time of start",
          "type": "string"
        },
        "state": {
          "description": "run state. e.g. RUNNING",
          "type": "string"
        },
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.BranchPipelineRunNodes.steps"
          }
        },
        "type": {
          "description": "source type, e.g. \"WorkflowRun\"",
          "type": "string"
        }
      }
    },
    "devops.BranchPipelineRunNodes.actions": {},
    "devops.BranchPipelineRunNodes.causeOfBlockage": {},
    "devops.BranchPipelineRunNodes.displayDescription": {},
    "devops.BranchPipelineRunNodes.edges": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "type": {
          "description": "source type",
          "type": "string"
        }
      }
    },
    "devops.BranchPipelineRunNodes.firstParent": {},
    "devops.BranchPipelineRunNodes.steps": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "$ref": "#/definitions/._links"
        },
        "actions": {
          "description": "references the reachable path to this resource",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.BranchPipelineRunNodes.steps.actions"
          }
        },
        "displayDescription": {
          "description": "display description",
          "$ref": "#/definitions/devops.BranchPipelineRunNodes.steps.displayDescription"
        },
        "displayName": {
          "description": "display name",
          "type": "string"
        },
        "durationInMillis": {
          "description": "duration time in millis",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "input": {
          "description": "the action should user input",
          "$ref": "#/definitions/devops.Input"
        },
        "result": {
          "description": "result",
          "type": "string"
        },
        "startTime": {
          "description": "the time of start",
          "type": "string"
        },
        "state": {
          "description": "run state. e.g. RUNNING",
          "type": "string"
        },
        "type": {
          "description": "source type",
          "type": "string"
        }
      }
    },
    "devops.BranchPipelineRunNodes.steps.actions": {
      "properties": {
        "_class": {
          "type": "string"
        },
        "_links": {
          "$ref": "#/definitions/._links"
        },
        "urlName": {
          "type": "string"
        }
      }
    },
    "devops.BranchPipelineRunNodes.steps.displayDescription": {},
    "devops.CheckCronRes": {
      "properties": {
        "lastTime": {
          "description": "last run time.",
          "type": "string"
        },
        "message": {
          "description": "message",
          "type": "string"
        },
        "nextTime": {
          "description": "next run time.",
          "type": "string"
        },
        "result": {
          "description": "result e.g. ok, error",
          "type": "string"
        }
      }
    },
    "devops.CheckPlayload": {
      "properties": {
        "abort": {
          "description": "abort or not",
          "type": "boolean"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.CheckPlayloadParameters"
          }
        }
      }
    },
    "devops.CheckPlayloadParameters": {
      "properties": {
        "name": {
          "description": "name",
          "type": "string"
        },
        "value": {
          "description": "value",
          "$ref": "#/definitions/devops.CheckPlayloadParameters.value"
        }
      }
    },
    "devops.CheckPlayloadParameters.value": {},
    "devops.CheckScript": {
      "properties": {
        "column": {
          "description": "column e.g. 0",
          "type": "integer",
          "format": "int32"
        },
        "line": {
          "description": "line e.g. 0",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "message e.g. unexpected char: '#'",
          "type": "string"
        },
        "status": {
          "description": "status e.g. fail",
          "type": "string"
        }
      }
    },
    "devops.CreateScmServerReq": {
      "properties": {
        "apiUrl": {
          "description": "url of scm server",
          "type": "string"
        },
        "name": {
          "description": "name of scm server",
          "type": "string"
        }
      }
    },
    "devops.Credential": {
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "description": {
          "description": "Credential's description'",
          "type": "string"
        },
        "display_name": {
          "description": "Credential's display name",
          "type": "string"
        },
        "domain": {
          "description": "Credential's domain,In ks we only use the default domain, default '_''",
          "type": "string"
        },
        "fingerprint": {
          "description": "usage of the Credential",
          "$ref": "#/definitions/devops.Credential.fingerprint"
        },
        "id": {
          "description": "Id of Credential, e.g. dockerhub-id",
          "type": "string"
        },
        "type": {
          "description": "Type of Credential, e.g. ssh/kubeconfig",
          "type": "string"
        }
      }
    },
    "devops.Credential.fingerprint": {
      "properties": {
        "file_name": {
          "description": "Credential's display name and description",
          "type": "string"
        },
        "hash": {
          "description": "Credential's hash",
          "type": "string"
        },
        "usage": {
          "description": "all usage of Credential",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.Credential.fingerprint.usage"
          }
        }
      }
    },
    "devops.Credential.fingerprint.usage": {
      "properties": {
        "name": {
          "description": "pipeline full name",
          "type": "string"
        },
        "ranges": {
          "description": "The build number of all pipelines that use this credential",
          "$ref": "#/definitions/.ranges"
        }
      }
    },
    "devops.CronData": {
      "required": [
        "cron"
      ],
      "properties": {
        "cron": {
          "description": "Cron script data.",
          "type": "string"
        },
        "pipelineName": {
          "description": "Pipeline name, if pipeline haven't created, not required'",
          "type": "string"
        }
      }
    },
    "devops.Crumb": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "crumb": {
          "description": "crumb data",
          "type": "string"
        },
        "crumbRequestField": {
          "description": "crumb request field",
          "type": "string"
        }
      }
    },
    "devops.Input": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource",
          "$ref": "#/definitions/devops.Input._links"
        },
        "id": {
          "description": "the id of check action",
          "type": "string"
        },
        "message": {
          "description": "the message of check action",
          "type": "string"
        },
        "ok": {
          "description": "check status. e.g. \"Proceed\"",
          "type": "string"
        },
        "parameters": {
          "description": "the parameters of check action",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.Input.parameters"
          }
        },
        "submitter": {
          "description": "check submitter",
          "$ref": "#/definitions/devops.Input.submitter"
        }
      }
    },
    "devops.Input._links": {
      "properties": {
        "self": {
          "$ref": "#/definitions/devops.Input._links.self"
        }
      }
    },
    "devops.Input._links.self": {
      "properties": {
        "_class": {
          "type": "string"
        },
        "href": {
          "type": "string"
        }
      }
    },
    "devops.Input.parameters": {},
    "devops.Input.submitter": {},
    "devops.NodeSteps": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource",
          "$ref": "#/definitions/._links"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.NodeSteps.actions"
          }
        },
        "displayDescription": {
          "description": "display description",
          "type": "string"
        },
        "displayName": {
          "description": "display name",
          "type": "string"
        },
        "durationInMillis": {
          "description": "duration time in mullis",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "input": {
          "description": "the action should user input",
          "$ref": "#/definitions/devops.Input"
        },
        "result": {
          "description": "the result of pipeline run. e.g. SUCCESS",
          "type": "string"
        },
        "startTime": {
          "description": "the time of starts",
          "type": "string"
        },
        "state": {
          "description": "run state. e.g. SKIPPED",
          "type": "string"
        },
        "type": {
          "description": "type",
          "type": "string"
        }
      }
    },
    "devops.NodeSteps.actions": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource",
          "$ref": "#/definitions/._links"
        },
        "urlName": {
          "description": "url name",
          "type": "string"
        }
      }
    },
    "devops.NodesDetail": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource",
          "$ref": "#/definitions/._links"
        },
        "actions": {
          "description": "the list of all actions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.NodesDetail.actions"
          }
        },
        "causeOfBlockage": {
          "description": "the cause of blockage",
          "$ref": "#/definitions/devops.NodesDetail.causeOfBlockage"
        },
        "displayDescription": {
          "description": "display description",
          "$ref": "#/definitions/devops.NodesDetail.displayDescription"
        },
        "displayName": {
          "description": "display name",
          "type": "string"
        },
        "durationInMillis": {
          "description": "duration time in mullis",
          "type": "integer",
          "format": "int32"
        },
        "edges": {
          "description": "edges",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.NodesDetail.edges"
          }
        },
        "firstParent": {
          "description": "first parent",
          "$ref": "#/definitions/devops.NodesDetail.firstParent"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "input": {
          "description": "the action should user input",
          "$ref": "#/definitions/devops.Input"
        },
        "restartable": {
          "description": "restartable or not",
          "type": "boolean"
        },
        "result": {
          "description": "the result of pipeline run. e.g. SUCCESS",
          "type": "string"
        },
        "startTime": {
          "description": "the time of start",
          "type": "string"
        },
        "state": {
          "description": "run state. e.g. FINISHED",
          "type": "string"
        },
        "steps": {
          "description": "steps",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.NodeSteps"
          }
        },
        "type": {
          "description": "type",
          "type": "string"
        }
      }
    },
    "devops.NodesDetail.actions": {},
    "devops.NodesDetail.causeOfBlockage": {},
    "devops.NodesDetail.displayDescription": {},
    "devops.NodesDetail.edges": {},
    "devops.NodesDetail.firstParent": {},
    "devops.OrgRepo": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource",
          "$ref": "#/definitions/._links"
        },
        "repositories": {
          "$ref": "#/definitions/.repositories"
        }
      }
    },
    "devops.Pipeline": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource.",
          "$ref": "#/definitions/._links"
        },
        "actions": {
          "description": "the list of all actions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.Pipeline.actions"
          }
        },
        "branchNames": {
          "description": "branch names",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "disabled": {
          "description": "disable or not, if disabled, can not do any action.",
          "$ref": "#/definitions/devops.Pipeline.disabled"
        },
        "displayName": {
          "description": "display name",
          "type": "string"
        },
        "estimatedDurationInMillis": {
          "description": "estimated duration time, unit is millis",
          "type": "integer",
          "format": "int32"
        },
        "fullDisplayName": {
          "description": "full display name",
          "type": "string"
        },
        "fullName": {
          "description": "full name",
          "type": "string"
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "numberOfFailingBranches": {
          "description": "number of failing branches",
          "type": "integer",
          "format": "int32"
        },
        "numberOfFailingPullRequests": {
          "description": "number of failing pull requests",
          "type": "integer",
          "format": "int32"
        },
        "numberOfFolders": {
          "description": "number of folders",
          "type": "integer",
          "format": "int32"
        },
        "numberOfPipelines": {
          "description": "number of pipelines",
          "type": "integer",
          "format": "int32"
        },
        "numberOfSuccessfulBranches": {
          "description": "number of successful pull requests",
          "type": "integer",
          "format": "int32"
        },
        "numberOfSuccessfulPullRequests": {
          "description": "number of successful pull requests",
          "type": "integer",
          "format": "int32"
        },
        "organization": {
          "description": "the name of organization",
          "type": "string"
        },
        "parameters": {
          "description": "parameters of pipeline, a pipeline can define list of parameters pipeline job expects.",
          "$ref": "#/definitions/devops.Pipeline.parameters"
        },
        "permissions": {
          "description": "permissions",
          "$ref": "#/definitions/.permissions"
        },
        "pipelineFolderNames": {
          "description": "pipeline folder names",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.Pipeline.pipelineFolderNames"
          }
        },
        "scmSource": {
          "$ref": "#/definitions/.scmSource"
        },
        "totalNumberOfBranches": {
          "description": "total number of branches",
          "type": "integer",
          "format": "int32"
        },
        "totalNumberOfPullRequests": {
          "description": "total number of pull requests",
          "type": "integer",
          "format": "int32"
        },
        "weatherScore": {
          "description": "the score to description the result of pipeline activity",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "devops.Pipeline.actions": {},
    "devops.Pipeline.disabled": {},
    "devops.Pipeline.parameters": {},
    "devops.Pipeline.pipelineFolderNames": {},
    "devops.PipelineBranch": {},
    "devops.PipelineList": {
      "required": [
        "items",
        "total_count"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.Pipeline"
          }
        },
        "total_count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "devops.PipelineRun": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource",
          "$ref": "#/definitions/._links"
        },
        "actions": {
          "description": "the list of all actions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.PipelineRun.actions"
          }
        },
        "artifactsZipFile": {
          "description": "the artifacts zip file",
          "$ref": "#/definitions/devops.PipelineRun.artifactsZipFile"
        },
        "branch": {
          "description": "branch",
          "$ref": "#/definitions/devops.PipelineRun.branch"
        },
        "causeOfBlockage": {
          "description": "the cause of blockage",
          "$ref": "#/definitions/devops.PipelineRun.causeOfBlockage"
        },
        "causes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.PipelineRun.causes"
          }
        },
        "changeSet": {
          "description": "changeset information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.PipelineRun.changeSet"
          }
        },
        "commitId": {
          "description": "commit id",
          "$ref": "#/definitions/devops.PipelineRun.commitId"
        },
        "commitUrl": {
          "description": "commit url",
          "$ref": "#/definitions/devops.PipelineRun.commitUrl"
        },
        "description": {
          "description": "description",
          "$ref": "#/definitions/devops.PipelineRun.description"
        },
        "durationInMillis": {
          "description": "duration time in millis",
          "type": "integer",
          "format": "int32"
        },
        "enQueueTime": {
          "description": "the time of enter the queue",
          "type": "string"
        },
        "endTime": {
          "description": "the time of end",
          "type": "string"
        },
        "estimatedDurationInMillis": {
          "description": "estimated duration time in millis",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "name": {
          "description": "name",
          "$ref": "#/definitions/devops.PipelineRun.name"
        },
        "organization": {
          "description": "the name of organization",
          "type": "string"
        },
        "pipeline": {
          "description": "the name of pipeline",
          "type": "string"
        },
        "pullRequest": {
          "description": "pull request",
          "$ref": "#/definitions/devops.PipelineRun.pullRequest"
        },
        "replayable": {
          "description": "replayable or not",
          "type": "boolean"
        },
        "result": {
          "description": "the result of pipeline run. e.g. SUCCESS",
          "type": "string"
        },
        "runSummary": {
          "description": "pipeline run summary",
          "type": "string"
        },
        "startTime": {
          "description": "the time of start",
          "type": "string"
        },
        "state": {
          "description": "run state. e.g. RUNNING",
          "type": "string"
        },
        "type": {
          "description": "type",
          "type": "string"
        }
      }
    },
    "devops.PipelineRun.actions": {},
    "devops.PipelineRun.artifactsZipFile": {},
    "devops.PipelineRun.branch": {},
    "devops.PipelineRun.causeOfBlockage": {},
    "devops.PipelineRun.causes": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "shortDescription": {
          "description": "short description",
          "type": "string"
        },
        "userId": {
          "description": "user id",
          "type": "string"
        },
        "userName": {
          "description": "user name",
          "type": "string"
        }
      }
    },
    "devops.PipelineRun.changeSet": {},
    "devops.PipelineRun.commitId": {},
    "devops.PipelineRun.commitUrl": {},
    "devops.PipelineRun.description": {},
    "devops.PipelineRun.name": {},
    "devops.PipelineRun.pullRequest": {},
    "devops.PipelineRunList": {
      "required": [
        "items",
        "totalItems"
      ],
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.PipelineRun"
          }
        },
        "totalItems": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "devops.PipelineRunNodes": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource",
          "$ref": "#/definitions/._links"
        },
        "actions": {
          "description": "the list of all actions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.PipelineRunNodes.actions"
          }
        },
        "causeOfBlockage": {
          "description": "the cause of blockage",
          "$ref": "#/definitions/devops.PipelineRunNodes.causeOfBlockage"
        },
        "displayDescription": {
          "description": "display description",
          "$ref": "#/definitions/devops.PipelineRunNodes.displayDescription"
        },
        "displayName": {
          "description": "display name",
          "type": "string"
        },
        "durationInMillis": {
          "description": "duration time in mullis",
          "type": "integer",
          "format": "int32"
        },
        "edges": {
          "description": "edges",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.PipelineRunNodes.edges"
          }
        },
        "firstParent": {
          "description": "first parent",
          "$ref": "#/definitions/devops.PipelineRunNodes.firstParent"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "input": {
          "description": "the action should user input",
          "$ref": "#/definitions/devops.Input"
        },
        "restartable": {
          "description": "restartable or not",
          "type": "boolean"
        },
        "result": {
          "description": "the result of pipeline run. e.g. SUCCESS",
          "type": "string"
        },
        "startTime": {
          "description": "the time of start",
          "type": "string"
        },
        "state": {
          "description": "run state. e.g. FINISHED",
          "type": "string"
        },
        "type": {
          "description": "type",
          "type": "string"
        }
      }
    },
    "devops.PipelineRunNodes.actions": {},
    "devops.PipelineRunNodes.causeOfBlockage": {},
    "devops.PipelineRunNodes.displayDescription": {},
    "devops.PipelineRunNodes.edges": {},
    "devops.PipelineRunNodes.firstParent": {},
    "devops.ReplayPipeline": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource",
          "$ref": "#/definitions/._links"
        },
        "actions": {
          "description": "the list of all actions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.ReplayPipeline.actions"
          }
        },
        "artifactsZipFile": {
          "description": "the artifacts zip file",
          "$ref": "#/definitions/devops.ReplayPipeline.artifactsZipFile"
        },
        "causeOfBlockage": {
          "description": "the cause of blockage",
          "type": "string"
        },
        "causes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.ReplayPipeline.causes"
          }
        },
        "changeSet": {
          "description": "changeset information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.ReplayPipeline.changeSet"
          }
        },
        "description": {
          "description": "description",
          "$ref": "#/definitions/devops.ReplayPipeline.description"
        },
        "durationInMillis": {
          "description": "duration time in millis",
          "$ref": "#/definitions/devops.ReplayPipeline.durationInMillis"
        },
        "enQueueTime": {
          "description": "the time of enter the queue",
          "$ref": "#/definitions/devops.ReplayPipeline.enQueueTime"
        },
        "endTime": {
          "description": "the time of end",
          "$ref": "#/definitions/devops.ReplayPipeline.endTime"
        },
        "estimatedDurationInMillis": {
          "description": "estimated duration time, unit is millis",
          "$ref": "#/definitions/devops.ReplayPipeline.estimatedDurationInMillis"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "name": {
          "description": "name",
          "$ref": "#/definitions/devops.ReplayPipeline.name"
        },
        "organization": {
          "description": "the name of organization",
          "type": "string"
        },
        "pipeline": {
          "description": "pipeline",
          "type": "string"
        },
        "queueId": {
          "description": "queue id",
          "type": "string"
        },
        "replayable": {
          "description": "replayable or not",
          "type": "boolean"
        },
        "result": {
          "description": "the result of pipeline run. e.g. SUCCESS",
          "type": "string"
        },
        "runSummary": {
          "description": "pipeline run summary",
          "$ref": "#/definitions/devops.ReplayPipeline.runSummary"
        },
        "startTime": {
          "description": "the time of start",
          "$ref": "#/definitions/devops.ReplayPipeline.startTime"
        },
        "state": {
          "description": "run state. e.g. RUNNING",
          "type": "string"
        },
        "type": {
          "description": "type",
          "type": "string"
        }
      }
    },
    "devops.ReplayPipeline.actions": {},
    "devops.ReplayPipeline.artifactsZipFile": {},
    "devops.ReplayPipeline.causes": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "shortDescription": {
          "description": "short description",
          "type": "string"
        },
        "userId": {
          "description": "user id",
          "type": "string"
        },
        "userName": {
          "description": "user name",
          "type": "string"
        }
      }
    },
    "devops.ReplayPipeline.changeSet": {},
    "devops.ReplayPipeline.description": {},
    "devops.ReplayPipeline.durationInMillis": {},
    "devops.ReplayPipeline.enQueueTime": {},
    "devops.ReplayPipeline.endTime": {},
    "devops.ReplayPipeline.estimatedDurationInMillis": {},
    "devops.ReplayPipeline.name": {},
    "devops.ReplayPipeline.runSummary": {},
    "devops.ReplayPipeline.startTime": {},
    "devops.ReqJenkinsfile": {
      "properties": {
        "jenkinsfile": {
          "description": "jenkinsfile",
          "type": "string"
        }
      }
    },
    "devops.ReqJson": {
      "properties": {
        "json": {
          "description": "json data",
          "type": "string"
        }
      }
    },
    "devops.ReqScript": {
      "properties": {
        "value": {
          "description": "Pipeline script data",
          "type": "string"
        }
      }
    },
    "devops.ResJenkinsfile": {
      "properties": {
        "data": {
          "$ref": "#/definitions/.data"
        },
        "status": {
          "description": "status e.g. ok",
          "type": "string"
        }
      }
    },
    "devops.ResJson": {
      "properties": {
        "data": {
          "$ref": "#/definitions/.data"
        },
        "status": {
          "description": "status e.g. ok",
          "type": "string"
        }
      }
    },
    "devops.RunPayload": {
      "properties": {
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.RunPayload.parameters"
          }
        }
      }
    },
    "devops.RunPayload.parameters": {
      "properties": {
        "name": {
          "description": "name",
          "type": "string"
        },
        "value": {
          "description": "value",
          "type": "string"
        }
      }
    },
    "devops.RunPipeline": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource",
          "$ref": "#/definitions/._links"
        },
        "actions": {
          "description": "the list of all actions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.RunPipeline.actions"
          }
        },
        "artifactsZipFile": {
          "description": "the artifacts zip file",
          "$ref": "#/definitions/devops.RunPipeline.artifactsZipFile"
        },
        "causeOfBlockage": {
          "description": "the cause of blockage",
          "type": "string"
        },
        "causes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.RunPipeline.causes"
          }
        },
        "changeSet": {
          "description": "changeset information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.RunPipeline.changeSet"
          }
        },
        "description": {
          "description": "description",
          "$ref": "#/definitions/devops.RunPipeline.description"
        },
        "durationInMillis": {
          "description": "duration time in millis",
          "$ref": "#/definitions/devops.RunPipeline.durationInMillis"
        },
        "enQueueTime": {
          "description": "the time of enter the queue",
          "$ref": "#/definitions/devops.RunPipeline.enQueueTime"
        },
        "endTime": {
          "description": "the time of end",
          "$ref": "#/definitions/devops.RunPipeline.endTime"
        },
        "estimatedDurationInMillis": {
          "description": "estimated duration time in millis",
          "$ref": "#/definitions/devops.RunPipeline.estimatedDurationInMillis"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "name": {
          "description": "name",
          "$ref": "#/definitions/devops.RunPipeline.name"
        },
        "organization": {
          "description": "the name of organization",
          "type": "string"
        },
        "pipeline": {
          "description": "pipeline",
          "type": "string"
        },
        "queueId": {
          "description": "queue id",
          "type": "string"
        },
        "replayable": {
          "description": "replayable or not",
          "type": "boolean"
        },
        "result": {
          "description": "the result of pipeline run. e.g. SUCCESS",
          "type": "string"
        },
        "runSummary": {
          "description": "pipeline run summary",
          "$ref": "#/definitions/devops.RunPipeline.runSummary"
        },
        "startTime": {
          "description": "the time of start",
          "$ref": "#/definitions/devops.RunPipeline.startTime"
        },
        "state": {
          "description": "run state. e.g. RUNNING",
          "type": "string"
        },
        "type": {
          "description": "type",
          "type": "string"
        }
      }
    },
    "devops.RunPipeline.actions": {},
    "devops.RunPipeline.artifactsZipFile": {},
    "devops.RunPipeline.causes": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "shortDescription": {
          "description": "short description",
          "type": "string"
        },
        "userId": {
          "description": "user id",
          "type": "string"
        },
        "userName": {
          "description": "user name",
          "type": "string"
        }
      }
    },
    "devops.RunPipeline.changeSet": {},
    "devops.RunPipeline.description": {},
    "devops.RunPipeline.durationInMillis": {},
    "devops.RunPipeline.enQueueTime": {},
    "devops.RunPipeline.endTime": {},
    "devops.RunPipeline.estimatedDurationInMillis": {},
    "devops.RunPipeline.name": {},
    "devops.RunPipeline.runSummary": {},
    "devops.RunPipeline.startTime": {},
    "devops.SCMOrg": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource",
          "$ref": "#/definitions/._links"
        },
        "avatar": {
          "description": "the url of organization avatar",
          "type": "string"
        },
        "jenkinsOrganizationPipeline": {
          "description": "weather or not already have jenkins pipeline.",
          "type": "boolean"
        },
        "name": {
          "description": "organization name",
          "type": "string"
        }
      }
    },
    "devops.SCMServer": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource",
          "$ref": "#/definitions/._links"
        },
        "apiUrl": {
          "description": "url of scm server",
          "type": "string"
        },
        "id": {
          "description": "server id of scm server",
          "type": "string"
        },
        "name": {
          "description": "name of scm server",
          "type": "string"
        }
      }
    },
    "devops.StopPipeline": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "_links": {
          "description": "references the reachable path to this resource",
          "$ref": "#/definitions/._links"
        },
        "actions": {
          "description": "the list of all actions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.StopPipeline.actions"
          }
        },
        "artifactsZipFile": {
          "description": "the artifacts zip file",
          "$ref": "#/definitions/devops.StopPipeline.artifactsZipFile"
        },
        "branch": {
          "$ref": "#/definitions/.branch"
        },
        "causeOfBlockage": {
          "description": "the cause of blockage",
          "$ref": "#/definitions/devops.StopPipeline.causeOfBlockage"
        },
        "causes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.StopPipeline.causes"
          }
        },
        "changeSet": {
          "description": "changeset information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/devops.StopPipeline.changeSet"
          }
        },
        "commitId": {
          "description": "commit id",
          "type": "string"
        },
        "commitUrl": {
          "description": "commit url",
          "$ref": "#/definitions/devops.StopPipeline.commitUrl"
        },
        "description": {
          "description": "description",
          "$ref": "#/definitions/devops.StopPipeline.description"
        },
        "durationInMillis": {
          "description": "duration time in millis",
          "type": "integer",
          "format": "int32"
        },
        "enQueueTime": {
          "description": "the time of enter the queue",
          "type": "string"
        },
        "endTime": {
          "description": "the time of end",
          "type": "string"
        },
        "estimatedDurationInMillis": {
          "description": "estimated duration time in millis",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "id",
          "type": "string"
        },
        "name": {
          "description": "name",
          "$ref": "#/definitions/devops.StopPipeline.name"
        },
        "organization": {
          "description": "the name of organization",
          "type": "string"
        },
        "pipeline": {
          "description": "pipeline",
          "type": "string"
        },
        "pullRequest": {
          "description": "pull request",
          "$ref": "#/definitions/devops.StopPipeline.pullRequest"
        },
        "replayable": {
          "description": "replayable or not",
          "type": "boolean"
        },
        "result": {
          "description": "the result of pipeline run. e.g. SUCCESS",
          "type": "string"
        },
        "runSummary": {
          "description": "pipeline run summary",
          "type": "string"
        },
        "startTime": {
          "description": "the time of start",
          "type": "string"
        },
        "state": {
          "description": "run state. e.g. RUNNING",
          "type": "string"
        },
        "type": {
          "description": "type",
          "type": "string"
        }
      }
    },
    "devops.StopPipeline.actions": {},
    "devops.StopPipeline.artifactsZipFile": {},
    "devops.StopPipeline.causeOfBlockage": {},
    "devops.StopPipeline.causes": {
      "properties": {
        "_class": {
          "description": "It’s a fully qualified name and is an identifier of the producer of this resource's capability.",
          "type": "string"
        },
        "shortDescription": {
          "description": "short description",
          "type": "string"
        }
      }
    },
    "devops.StopPipeline.changeSet": {},
    "devops.StopPipeline.commitUrl": {},
    "devops.StopPipeline.description": {},
    "devops.StopPipeline.name": {},
    "devops.StopPipeline.pullRequest": {},
    "devops.Validates": {
      "properties": {
        "credentialId": {
          "description": "the id of credential",
          "type": "string"
        }
      }
    },
    "errors.Error": {
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "description": "error message",
          "type": "string"
        }
      }
    },
    "events.Bucket": {
      "required": [
        "time",
        "count"
      ],
      "properties": {
        "count": {
          "description": "total number of events at intervals",
          "type": "integer",
          "format": "int64"
        },
        "time": {
          "description": "timestamp",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "events.Events": {
      "required": [
        "total",
        "records"
      ],
      "properties": {
        "records": {
          "description": "actual array of results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Event"
          }
        },
        "total": {
          "description": "total number of matched results",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "events.Histogram": {
      "required": [
        "total",
        "buckets"
      ],
      "properties": {
        "buckets": {
          "description": "actual array of histogram results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/events.Bucket"
          }
        },
        "total": {
          "description": "total number of events",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "events.Statistics": {
      "required": [
        "resources",
        "events"
      ],
      "properties": {
        "events": {
          "description": "total number of events",
          "type": "integer",
          "format": "int64"
        },
        "resources": {
          "description": "total number of resources",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "git.AuthInfo": {
      "required": [
        "remoteUrl"
      ],
      "properties": {
        "remoteUrl": {
          "description": "git server url",
          "type": "string"
        },
        "secretRef": {
          "description": "auth secret reference",
          "$ref": "#/definitions/v1.SecretReference"
        }
      }
    },
    "iam.PasswordReset": {
      "required": [
        "currentPassword",
        "password"
      ],
      "properties": {
        "currentPassword": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "inf.Dec": {
      "required": [
        "unscaled",
        "scale"
      ],
      "properties": {
        "scale": {
          "$ref": "#/definitions/inf.Scale"
        },
        "unscaled": {
          "$ref": "#/definitions/big.Int"
        }
      }
    },
    "logging.Bucket": {
      "required": [
        "time",
        "count"
      ],
      "properties": {
        "count": {
          "description": "total number of logs at intervals",
          "type": "integer",
          "format": "int64"
        },
        "time": {
          "description": "timestamp",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "logging.Histogram": {
      "required": [
        "total",
        "histograms"
      ],
      "properties": {
        "histograms": {
          "description": "actual array of histogram results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/logging.Bucket"
          }
        },
        "total": {
          "description": "total number of logs",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "logging.Logs": {
      "required": [
        "total"
      ],
      "properties": {
        "records": {
          "description": "actual array of results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/logging.Record"
          }
        },
        "total": {
          "description": "total number of matched results",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "logging.Record": {
      "properties": {
        "container": {
          "description": "container name",
          "type": "string"
        },
        "log": {
          "description": "log message",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "pod": {
          "description": "pod name",
          "type": "string"
        },
        "time": {
          "description": "log timestamp",
          "type": "string"
        }
      }
    },
    "logging.Statistics": {
      "required": [
        "containers",
        "logs"
      ],
      "properties": {
        "containers": {
          "description": "total number of containers",
          "type": "integer",
          "format": "int64"
        },
        "logs": {
          "description": "total number of logs",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "model.LabelValue": {},
    "model.SamplePair": {
      "required": [
        "Timestamp",
        "Value"
      ],
      "properties": {
        "Timestamp": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      }
    },
    "model.SampleStream": {
      "required": [
        "metric",
        "values"
      ],
      "properties": {
        "metric": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/model.LabelValue"
          }
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.SamplePair"
          }
        }
      }
    },
    "models.AppHealth": {
      "required": [
        "workloadStatuses",
        "requests"
      ],
      "properties": {
        "requests": {
          "$ref": "#/definitions/models.RequestHealth"
        },
        "workloadStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.WorkloadStatus"
          }
        }
      }
    },
    "models.PageableResponse": {
      "required": [
        "items",
        "total_count"
      ],
      "properties": {
        "items": {
          "description": "paging data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.PageableResponse.items"
          }
        },
        "total_count": {
          "description": "total count",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "models.PageableResponse.items": {},
    "models.PodInfo": {
      "required": [
        "namespace",
        "pod",
        "container"
      ],
      "properties": {
        "container": {
          "description": "container name",
          "type": "string"
        },
        "namespace": {
          "description": "namespace",
          "type": "string"
        },
        "pod": {
          "description": "pod name",
          "type": "string"
        }
      }
    },
    "models.RequestHealth": {
      "required": [
        "inboundErrorRate",
        "outboundErrorRate",
        "inboundRequestRate",
        "outboundRequestRate",
        "errorRatio",
        "inboundErrorRatio",
        "outboundErrorRatio"
      ],
      "properties": {
        "errorRatio": {
          "type": "number",
          "format": "double"
        },
        "inboundErrorRate": {
          "type": "number",
          "format": "double"
        },
        "inboundErrorRatio": {
          "type": "number",
          "format": "double"
        },
        "inboundRequestRate": {
          "type": "number",
          "format": "double"
        },
        "outboundErrorRate": {
          "type": "number",
          "format": "double"
        },
        "outboundErrorRatio": {
          "type": "number",
          "format": "double"
        },
        "outboundRequestRate": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "models.WorkloadStatus": {
      "required": [
        "name",
        "replicas",
        "available"
      ],
      "properties": {
        "available": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "replicas": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "monitoring.Metadata": {
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "description": "actual array of results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoring.Metadata"
          }
        }
      }
    },
    "monitoring.Metric": {
      "properties": {
        "data": {
          "description": "actual metric result",
          "$ref": "#/definitions/monitoring.MetricData"
        },
        "error": {
          "type": "string"
        },
        "metric_name": {
          "description": "metric name, eg. scheduler_up_sum",
          "type": "string"
        }
      }
    },
    "monitoring.MetricData": {
      "properties": {
        "result": {
          "description": "metric data including labels, time series and values",
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoring.MetricValue"
          }
        },
        "resultType": {
          "description": "result type, one of matrix, vector",
          "type": "string"
        }
      }
    },
    "monitoring.MetricLabelSet": {
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "description": "actual array of results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoring.MetricLabelSet.data"
          }
        }
      }
    },
    "monitoring.MetricLabelSet.data": {},
    "monitoring.MetricValue": {
      "properties": {
        "metric": {
          "description": "time series labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "value": {
          "description": "time series, values of vector type",
          "type": "string"
        },
        "values": {
          "description": "time series, values of matrix type",
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoring.Point"
          }
        }
      }
    },
    "monitoring.Metrics": {
      "required": [
        "results"
      ],
      "properties": {
        "page": {
          "description": "current page returned",
          "type": "integer",
          "format": "int32"
        },
        "results": {
          "description": "actual array of results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/monitoring.Metric"
          }
        },
        "total_item": {
          "description": "page size",
          "type": "integer",
          "format": "int32"
        },
        "total_page": {
          "description": "total number of pages",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "monitoring.Point": {},
    "prometheus.Metric": {
      "required": [
        "matrix",
        "err"
      ],
      "properties": {
        "err": {
          "$ref": "#/definitions/error"
        },
        "matrix": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.SampleStream"
          }
        }
      }
    },
    "prometheus.Metrics.histograms": {},
    "registries.Config": {
      "properties": {
        "ArgsEscaped": {
          "description": "Command is already escaped (Windows only)",
          "type": "boolean"
        },
        "AttachStderr": {
          "description": "Boolean value, attaches to stderr.",
          "type": "boolean"
        },
        "AttachStdin": {
          "description": "Boolean value, attaches to stdin.",
          "type": "boolean"
        },
        "AttachStdout": {
          "description": "Boolean value, attaches to stdout.",
          "type": "boolean"
        },
        "Cmd": {
          "description": "Command to run specified as a string or an array of strings.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Domainname": {
          "description": "A string value containing the domain name to use for the container.",
          "type": "string"
        },
        "Entrypoint": {
          "description": "The entry point set for the container as a string or an array of strings.",
          "$ref": "#/definitions/registries.Config.Entrypoint"
        },
        "Env": {
          "description": "A list of environment variables in the form of [\"VAR=value\", ...]",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ExposedPorts": {
          "description": "An object mapping ports to an empty object in the form of: \"ExposedPorts\": { \"\u003cport\u003e/\u003ctcp|udp\u003e: {}\" }",
          "type": "object"
        },
        "Hostname": {
          "description": "A string value containing the hostname to use for the container.",
          "type": "string"
        },
        "Image": {
          "description": "A string specifying the image name to use for the container.",
          "type": "string"
        },
        "Labels": {
          "description": "The map of labels to a container.",
          "$ref": "#/definitions/registries.Labels"
        },
        "OnBuild": {
          "description": "ONBUILD metadata that were defined in the image's Dockerfile.",
          "$ref": "#/definitions/registries.Config.OnBuild"
        },
        "OpenStdin": {
          "description": "Boolean value, opens stdin",
          "type": "boolean"
        },
        "StdinOnce": {
          "description": "Boolean value, close stdin after the 1 attached client disconnects.",
          "type": "boolean"
        },
        "StopSignal": {
          "description": "Signal to stop a container as a string or unsigned integer.",
          "type": "string"
        },
        "Tty": {
          "description": "Boolean value, Attach standard streams to a tty, including stdin if it is not closed.",
          "type": "boolean"
        },
        "User": {
          "description": "A string value specifying the user inside the container.",
          "type": "string"
        },
        "Volumes": {
          "description": "An object mapping mount point paths (strings) inside the container to empty objects.",
          "$ref": "#/definitions/registries.Config.Volumes"
        },
        "WorkingDir": {
          "description": "A string specifying the working directory for commands to run in.",
          "type": "string"
        }
      }
    },
    "registries.Config.Entrypoint": {},
    "registries.Config.OnBuild": {},
    "registries.Config.Volumes": {},
    "registries.ContainerConfig": {
      "properties": {
        "ArgsEscaped": {
          "description": "Command is already escaped (Windows only)",
          "type": "boolean"
        },
        "AttachStderr": {
          "description": "Boolean value, attaches to stderr.",
          "type": "boolean"
        },
        "AttachStdin": {
          "description": "Boolean value, attaches to stdin.",
          "type": "boolean"
        },
        "AttachStdout": {
          "description": "Boolean value, attaches to stdout.",
          "type": "boolean"
        },
        "Cmd": {
          "description": "Command to run specified as a string or an array of strings.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Domainname": {
          "description": "A string value containing the domain name to use for the container.",
          "type": "string"
        },
        "Entrypoint": {
          "description": "The entry point set for the container as a string or an array of strings.",
          "$ref": "#/definitions/registries.ContainerConfig.Entrypoint"
        },
        "Env": {
          "description": "A list of environment variables in the form of [\"VAR=value\", ...]",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ExposedPorts": {
          "description": "An object mapping ports to an empty object in the form of: \"ExposedPorts\": { \"\u003cport\u003e/\u003ctcp|udp\u003e: {}\" }",
          "type": "object"
        },
        "Hostname": {
          "description": "A string value containing the hostname to use for the container.",
          "type": "string"
        },
        "Image": {
          "description": "A string specifying the image name to use for the container.",
          "type": "string"
        },
        "Labels": {
          "description": "The map of labels to a container.",
          "$ref": "#/definitions/registries.Labels"
        },
        "OnBuild": {
          "description": "ONBUILD metadata that were defined in the image's Dockerfile.",
          "$ref": "#/definitions/registries.ContainerConfig.OnBuild"
        },
        "OpenStdin": {
          "description": "Boolean value, opens stdin",
          "type": "boolean"
        },
        "StdinOnce": {
          "description": "Boolean value, close stdin after the 1 attached client disconnects.",
          "type": "boolean"
        },
        "StopSignal": {
          "description": "Signal to stop a container as a string or unsigned integer.",
          "type": "string"
        },
        "Tty": {
          "description": "Boolean value, Attach standard streams to a tty, including stdin if it is not closed.",
          "type": "boolean"
        },
        "User": {
          "description": "A string value specifying the user inside the container.",
          "type": "string"
        },
        "Volumes": {
          "description": "An object mapping mount point paths (strings) inside the container to empty objects.",
          "$ref": "#/definitions/registries.ContainerConfig.Volumes"
        },
        "WorkingDir": {
          "description": "A string specifying the working directory for commands to run in.",
          "type": "string"
        }
      }
    },
    "registries.ContainerConfig.Entrypoint": {},
    "registries.ContainerConfig.OnBuild": {},
    "registries.ContainerConfig.Volumes": {},
    "registries.History": {
      "properties": {
        "created": {
          "description": "Created time.",
          "type": "string",
          "format": "date-time"
        },
        "created_by": {
          "description": "Created command.",
          "type": "string"
        },
        "empty_layer": {
          "description": "Layer empty or not.",
          "type": "boolean"
        }
      }
    },
    "registries.ImageBlob": {
      "required": [
        "rootfs omitempty"
      ],
      "properties": {
        "architecture": {
          "description": "The architecture field specifies the CPU architecture, for example amd64 or ppc64le.",
          "type": "string"
        },
        "config": {
          "description": "The config field references a configuration object for a container.",
          "$ref": "#/definitions/registries.Config"
        },
        "container": {
          "description": "Container id.",
          "type": "string"
        },
        "container_config": {
          "description": "The config data of container.",
          "$ref": "#/definitions/registries.ContainerConfig"
        },
        "created": {
          "description": "Create time.",
          "type": "string",
          "format": "date-time"
        },
        "docker_version": {
          "description": "docker version.",
          "type": "string"
        },
        "history": {
          "description": "The data of history update.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/registries.History"
          }
        },
        "os": {
          "description": "Operating system.",
          "type": "string"
        },
        "rootfs omitempty": {
          "description": "Root filesystem.",
          "$ref": "#/definitions/registries.Rootfs"
        }
      }
    },
    "registries.ImageDetails": {
      "properties": {
        "imageBlob": {
          "description": "Retrieve the blob from the registry identified. Reference: https://docs.docker.com/registry/spec/api/#blob",
          "$ref": "#/definitions/registries.ImageBlob"
        },
        "imageManifest": {
          "description": "Retrieve the manifest from the registry identified. Reference: https://docs.docker.com/registry/spec/api/#manifest",
          "$ref": "#/definitions/registries.ImageManifest"
        },
        "imageTag": {
          "description": "image tag.",
          "type": "string"
        },
        "message": {
          "description": "Status message.",
          "type": "string"
        },
        "registry": {
          "description": "registry domain.",
          "type": "string"
        },
        "status": {
          "description": "Status is the status of the image search, such as \"succeeded\".",
          "type": "string"
        }
      }
    },
    "registries.ImageManifest": {
      "properties": {
        "config": {
          "description": "The config field references a configuration object for a container.",
          "$ref": "#/definitions/registries.ManifestConfig"
        },
        "layers": {
          "description": "Fields of an item in the layers list.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/registries.Layers"
          }
        },
        "mediaType": {
          "description": "The MIME type of the manifest.",
          "type": "string"
        },
        "schemaVersion": {
          "description": "This field specifies the image manifest schema version as an integer.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "registries.Labels": {
      "required": [
        "maintainer"
      ],
      "properties": {
        "maintainer": {
          "type": "string"
        }
      }
    },
    "registries.Layers": {
      "properties": {
        "digest": {
          "description": "The digest of the content, as defined by the Registry V2 HTTP API Specificiation. Reference https://docs.docker.com/registry/spec/api/#digest-parameter",
          "type": "string"
        },
        "mediaType": {
          "description": "The MIME type of the layer.",
          "type": "string"
        },
        "size": {
          "description": "The size in bytes of the layer.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "registries.ManifestConfig": {
      "properties": {
        "digest": {
          "description": "The digest of the content, as defined by the Registry V2 HTTP API Specificiation. Reference https://docs.docker.com/registry/spec/api/#digest-parameter",
          "type": "string"
        },
        "mediaType": {
          "description": "The MIME type of the image.",
          "type": "string"
        },
        "size": {
          "description": "The size in bytes of the image.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "registries.Rootfs": {
      "properties": {
        "diff_ids": {
          "description": "Contain ids of layer list",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "description": "Root filesystem type, always \"layers\" ",
          "type": "string"
        }
      }
    },
    "resource.Quantity": {
      "required": [
        "i",
        "d",
        "s",
        "Format"
      ],
      "properties": {
        "Format": {
          "type": "string"
        },
        "d": {
          "$ref": "#/definitions/resource.infDecAmount"
        },
        "i": {
          "$ref": "#/definitions/resource.int64Amount"
        },
        "s": {
          "type": "string"
        }
      }
    },
    "resource.infDecAmount": {
      "required": [
        "Dec"
      ],
      "properties": {
        "Dec": {
          "$ref": "#/definitions/inf.Dec"
        }
      }
    },
    "resource.int64Amount": {
      "required": [
        "value",
        "scale"
      ],
      "properties": {
        "scale": {
          "$ref": "#/definitions/resource.Scale"
        },
        "value": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1.AWSElasticBlockStoreVolumeSource": {
      "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
      "required": [
        "volumeID"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "string"
        },
        "partition": {
          "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
          "type": "integer",
          "format": "int32"
        },
        "readOnly": {
          "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "boolean"
        },
        "volumeID": {
          "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "string"
        }
      }
    },
    "v1.Affinity": {
      "description": "Affinity is a group of affinity scheduling rules.",
      "properties": {
        "nodeAffinity": {
          "description": "Describes node affinity scheduling rules for the pod.",
          "$ref": "#/definitions/v1.NodeAffinity"
        },
        "podAffinity": {
          "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
          "$ref": "#/definitions/v1.PodAffinity"
        },
        "podAntiAffinity": {
          "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
          "$ref": "#/definitions/v1.PodAntiAffinity"
        }
      }
    },
    "v1.AggregationRule": {
      "description": "AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole",
      "properties": {
        "clusterRoleSelectors": {
          "description": "ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.LabelSelector"
          }
        }
      }
    },
    "v1.AzureDataDiskCachingMode": {},
    "v1.AzureDataDiskKind": {},
    "v1.AzureDiskVolumeSource": {
      "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
      "required": [
        "diskName",
        "diskURI"
      ],
      "properties": {
        "cachingMode": {
          "description": "Host Caching mode: None, Read Only, Read Write.",
          "$ref": "#/definitions/v1.AzureDataDiskCachingMode"
        },
        "diskName": {
          "description": "The Name of the data disk in the blob storage",
          "type": "string"
        },
        "diskURI": {
          "description": "The URI the data disk in the blob storage",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "kind": {
          "description": "Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
          "$ref": "#/definitions/v1.AzureDataDiskKind"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        }
      }
    },
    "v1.AzureFileVolumeSource": {
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
      "required": [
        "secretName",
        "shareName"
      ],
      "properties": {
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretName": {
          "description": "the name of secret that contains Azure Storage Account Name and Key",
          "type": "string"
        },
        "shareName": {
          "description": "Share Name",
          "type": "string"
        }
      }
    },
    "v1.CSIVolumeSource": {
      "description": "Represents a source location of a volume to mount, managed by an external CSI driver",
      "required": [
        "driver"
      ],
      "properties": {
        "driver": {
          "description": "Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
          "type": "string"
        },
        "nodePublishSecretRef": {
          "description": "NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.",
          "$ref": "#/definitions/v1.LocalObjectReference"
        },
        "readOnly": {
          "description": "Specifies a read-only configuration for the volume. Defaults to false (read/write).",
          "type": "boolean"
        },
        "volumeAttributes": {
          "description": "VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1.Capabilities": {
      "description": "Adds and removes POSIX capabilities from running containers.",
      "properties": {
        "add": {
          "description": "Added capabilities",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Capability"
          }
        },
        "drop": {
          "description": "Removed capabilities",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Capability"
          }
        }
      }
    },
    "v1.Capability": {},
    "v1.CephFSVolumeSource": {
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
      "required": [
        "monitors"
      ],
      "properties": {
        "monitors": {
          "description": "Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "path": {
          "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
          "type": "string"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretFile": {
          "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        },
        "secretRef": {
          "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "$ref": "#/definitions/v1.LocalObjectReference"
        },
        "user": {
          "description": "Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        }
      }
    },
    "v1.CinderVolumeSource": {
      "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
      "required": [
        "volumeID"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "boolean"
        },
        "secretRef": {
          "description": "Optional: points to a secret object containing parameters used to connect to OpenStack.",
          "$ref": "#/definitions/v1.LocalObjectReference"
        },
        "volumeID": {
          "description": "volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        }
      }
    },
    "v1.ClientIPConfig": {
      "description": "ClientIPConfig represents the configurations of Client IP based session affinity.",
      "properties": {
        "timeoutSeconds": {
          "description": "timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be \u003e0 \u0026\u0026 \u003c=86400(for 1 day) if ServiceAffinity == \"ClientIP\". Default value is 10800(for 3 hours).",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1.ClusterRole": {
      "description": "ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.",
      "required": [
        "rules"
      ],
      "properties": {
        "aggregationRule": {
          "description": "AggregationRule is an optional field that describes how to build the Rules for this ClusterRole. If AggregationRule is set, then the Rules are controller managed and direct changes to Rules will be stomped by the controller.",
          "$ref": "#/definitions/v1.AggregationRule"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this ClusterRole",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PolicyRule"
          }
        }
      }
    },
    "v1.ConfigMapEnvSource": {
      "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap must be defined",
          "type": "boolean"
        }
      }
    },
    "v1.ConfigMapKeySelector": {
      "description": "Selects a key from a ConfigMap.",
      "required": [
        "key"
      ],
      "properties": {
        "key": {
          "description": "The key to select.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or its key must be defined",
          "type": "boolean"
        }
      }
    },
    "v1.ConfigMapProjection": {
      "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
      "properties": {
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.KeyToPath"
          }
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or its keys must be defined",
          "type": "boolean"
        }
      }
    },
    "v1.ConfigMapVolumeSource": {
      "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.KeyToPath"
          }
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or its keys must be defined",
          "type": "boolean"
        }
      }
    },
    "v1.Container": {
      "description": "A single application container that you want to run within a pod.",
      "required": [
        "name"
      ],
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.EnvVar"
          }
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.EnvFromSource"
          }
        },
        "image": {
          "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
          "type": "string"
        },
        "lifecycle": {
          "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated.",
          "$ref": "#/definitions/v1.Lifecycle"
        },
        "livenessProbe": {
          "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "$ref": "#/definitions/v1.Probe"
        },
        "name": {
          "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
          "type": "string"
        },
        "ports": {
          "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ContainerPort"
          }
        },
        "readinessProbe": {
          "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "$ref": "#/definitions/v1.Probe"
        },
        "resources": {
          "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "$ref": "#/definitions/v1.ResourceRequirements"
        },
        "securityContext": {
          "description": "Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/",
          "$ref": "#/definitions/v1.SecurityContext"
        },
        "startupProbe": {
          "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. This is an alpha feature enabled by the StartupProbe feature flag. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "$ref": "#/definitions/v1.Probe"
        },
        "stdin": {
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
          "type": "boolean"
        },
        "stdinOnce": {
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
          "type": "boolean"
        },
        "terminationMessagePath": {
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
          "type": "string"
        },
        "tty": {
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container. This is a beta feature.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.VolumeDevice"
          }
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.VolumeMount"
          }
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      }
    },
    "v1.ContainerPort": {
      "description": "ContainerPort represents a network port in a single container.",
      "required": [
        "containerPort"
      ],
      "properties": {
        "containerPort": {
          "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 \u003c x \u003c 65536.",
          "type": "integer",
          "format": "int32"
        },
        "hostIP": {
          "description": "What host IP to bind the external port to.",
          "type": "string"
        },
        "hostPort": {
          "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 \u003c x \u003c 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
          "type": "string"
        }
      }
    },
    "v1.DaemonSet": {
      "description": "DaemonSet represents the configuration of a daemon set.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "description": "The desired behavior of this daemon set. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/v1.DaemonSetSpec"
        },
        "status": {
          "description": "The current status of this daemon set. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/v1.DaemonSetStatus"
        }
      }
    },
    "v1.DaemonSetCondition": {
      "description": "DaemonSetCondition describes the state of a DaemonSet at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "type": "string"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of DaemonSet condition.",
          "type": "string"
        }
      }
    },
    "v1.DaemonSetSpec": {
      "description": "DaemonSetSpec is the specification of a daemon set.",
      "required": [
        "selector",
        "template"
      ],
      "properties": {
        "minReadySeconds": {
          "description": "The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/v1.LabelSelector"
        },
        "template": {
          "description": "An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
          "$ref": "#/definitions/v1.PodTemplateSpec"
        },
        "updateStrategy": {
          "description": "An update strategy to replace existing DaemonSet pods with new pods.",
          "$ref": "#/definitions/v1.DaemonSetUpdateStrategy"
        }
      }
    },
    "v1.DaemonSetStatus": {
      "description": "DaemonSetStatus represents the current status of a daemon set.",
      "required": [
        "currentNumberScheduled",
        "numberMisscheduled",
        "desiredNumberScheduled",
        "numberReady"
      ],
      "properties": {
        "collisionCount": {
          "description": "Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a DaemonSet's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.DaemonSetCondition"
          }
        },
        "currentNumberScheduled": {
          "description": "The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
          "type": "integer",
          "format": "int32"
        },
        "desiredNumberScheduled": {
          "description": "The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
          "type": "integer",
          "format": "int32"
        },
        "numberAvailable": {
          "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)",
          "type": "integer",
          "format": "int32"
        },
        "numberMisscheduled": {
          "description": "The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
          "type": "integer",
          "format": "int32"
        },
        "numberReady": {
          "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.",
          "type": "integer",
          "format": "int32"
        },
        "numberUnavailable": {
          "description": "The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)",
          "type": "integer",
          "format": "int32"
        },
        "observedGeneration": {
          "description": "The most recent generation observed by the daemon set controller.",
          "type": "integer",
          "format": "int64"
        },
        "updatedNumberScheduled": {
          "description": "The total number of nodes that are running updated daemon pod",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1.DaemonSetUpdateStrategy": {
      "description": "DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.",
      "properties": {
        "rollingUpdate": {
          "description": "Rolling update config params. Present only if type = \"RollingUpdate\".",
          "$ref": "#/definitions/v1.RollingUpdateDaemonSet"
        },
        "type": {
          "description": "Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate.",
          "type": "string"
        }
      }
    },
    "v1.DownwardAPIProjection": {
      "description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
      "properties": {
        "items": {
          "description": "Items is a list of DownwardAPIVolume file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.DownwardAPIVolumeFile"
          }
        }
      }
    },
    "v1.DownwardAPIVolumeFile": {
      "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
      "required": [
        "path"
      ],
      "properties": {
        "fieldRef": {
          "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.",
          "$ref": "#/definitions/v1.ObjectFieldSelector"
        },
        "mode": {
          "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "path": {
          "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
          "type": "string"
        },
        "resourceFieldRef": {
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.",
          "$ref": "#/definitions/v1.ResourceFieldSelector"
        }
      }
    },
    "v1.DownwardAPIVolumeSource": {
      "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "description": "Items is a list of downward API volume file",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.DownwardAPIVolumeFile"
          }
        }
      }
    },
    "v1.EmptyDirVolumeSource": {
      "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
      "properties": {
        "medium": {
          "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
          "type": "string"
        },
        "sizeLimit": {
          "description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir",
          "type": "string"
        }
      }
    },
    "v1.EnvFromSource": {
      "description": "EnvFromSource represents the source of a set of ConfigMaps",
      "properties": {
        "configMapRef": {
          "description": "The ConfigMap to select from",
          "$ref": "#/definitions/v1.ConfigMapEnvSource"
        },
        "prefix": {
          "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "secretRef": {
          "description": "The Secret to select from",
          "$ref": "#/definitions/v1.SecretEnvSource"
        }
      }
    },
    "v1.EnvVar": {
      "description": "EnvVar represents an environment variable present in a Container.",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "value": {
          "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
          "type": "string"
        },
        "valueFrom": {
          "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
          "$ref": "#/definitions/v1.EnvVarSource"
        }
      }
    },
    "v1.EnvVarSource": {
      "description": "EnvVarSource represents a source for the value of an EnvVar.",
      "properties": {
        "configMapKeyRef": {
          "description": "Selects a key of a ConfigMap.",
          "$ref": "#/definitions/v1.ConfigMapKeySelector"
        },
        "fieldRef": {
          "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
          "$ref": "#/definitions/v1.ObjectFieldSelector"
        },
        "resourceFieldRef": {
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
          "$ref": "#/definitions/v1.ResourceFieldSelector"
        },
        "secretKeyRef": {
          "description": "Selects a key of a secret in the pod's namespace",
          "$ref": "#/definitions/v1.SecretKeySelector"
        }
      }
    },
    "v1.EphemeralContainer": {
      "description": "An EphemeralContainer is a container that may be added temporarily to an existing pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a pod is removed or restarted. If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral containers may not be added by directly updating the pod spec. They must be added via the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This is an alpha feature enabled by the EphemeralContainers feature flag.",
      "required": [
        "name"
      ],
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.EnvVar"
          }
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.EnvFromSource"
          }
        },
        "image": {
          "description": "Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
          "type": "string"
        },
        "lifecycle": {
          "description": "Lifecycle is not allowed for ephemeral containers.",
          "$ref": "#/definitions/v1.Lifecycle"
        },
        "livenessProbe": {
          "description": "Probes are not allowed for ephemeral containers.",
          "$ref": "#/definitions/v1.Probe"
        },
        "name": {
          "description": "Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.",
          "type": "string"
        },
        "ports": {
          "description": "Ports are not allowed for ephemeral containers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ContainerPort"
          }
        },
        "readinessProbe": {
          "description": "Probes are not allowed for ephemeral containers.",
          "$ref": "#/definitions/v1.Probe"
        },
        "resources": {
          "description": "Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.",
          "$ref": "#/definitions/v1.ResourceRequirements"
        },
        "securityContext": {
          "description": "SecurityContext is not allowed for ephemeral containers.",
          "$ref": "#/definitions/v1.SecurityContext"
        },
        "startupProbe": {
          "description": "Probes are not allowed for ephemeral containers.",
          "$ref": "#/definitions/v1.Probe"
        },
        "stdin": {
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
          "type": "boolean"
        },
        "stdinOnce": {
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
          "type": "boolean"
        },
        "targetContainerName": {
          "description": "If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature.",
          "type": "string"
        },
        "terminationMessagePath": {
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
          "type": "string"
        },
        "tty": {
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container. This is a beta feature.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.VolumeDevice"
          }
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.VolumeMount"
          }
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      }
    },
    "v1.Event": {
      "description": "Event is a report of an event somewhere in the cluster.",
      "required": [
        "metadata",
        "involvedObject",
        "reportingComponent",
        "reportingInstance"
      ],
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the Regarding object.",
          "type": "string"
        },
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "count": {
          "description": "The number of times this event has occurred.",
          "type": "integer",
          "format": "int32"
        },
        "eventTime": {
          "description": "Time when this Event was first observed.",
          "type": "string"
        },
        "firstTimestamp": {
          "description": "The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)",
          "type": "string"
        },
        "involvedObject": {
          "description": "The object that this event is about.",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "lastTimestamp": {
          "description": "The time at which the most recent occurrence of this event was recorded.",
          "type": "string"
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "reason": {
          "description": "This should be a short, machine understandable string that gives the reason for the transition into the object's current status.",
          "type": "string"
        },
        "related": {
          "description": "Optional secondary object for more complex actions.",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "reportingComponent": {
          "description": "Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "ID of the controller instance, e.g. `kubelet-xyzf`.",
          "type": "string"
        },
        "series": {
          "description": "Data about the Event series this event represents or nil if it's a singleton Event.",
          "$ref": "#/definitions/v1.EventSeries"
        },
        "source": {
          "description": "The component reporting this event. Should be a short machine understandable string.",
          "$ref": "#/definitions/v1.EventSource"
        },
        "type": {
          "description": "Type of this event (Normal, Warning), new types could be added in the future",
          "type": "string"
        }
      }
    },
    "v1.EventSeries": {
      "description": "EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.",
      "properties": {
        "count": {
          "description": "Number of occurrences in this series up to the last heartbeat time",
          "type": "integer",
          "format": "int32"
        },
        "lastObservedTime": {
          "description": "Time of the last occurrence observed",
          "type": "string"
        },
        "state": {
          "description": "State of this Series: Ongoing or Finished Deprecated. Planned removal for 1.18",
          "type": "string"
        }
      }
    },
    "v1.EventSource": {
      "description": "EventSource contains information for an event.",
      "properties": {
        "component": {
          "description": "Component from which the event is generated.",
          "type": "string"
        },
        "host": {
          "description": "Node name on which the event is generated.",
          "type": "string"
        }
      }
    },
    "v1.ExecAction": {
      "description": "ExecAction describes a \"run in container\" action.",
      "properties": {
        "command": {
          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1.FCVolumeSource": {
      "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "lun": {
          "description": "Optional: FC target lun number",
          "type": "integer",
          "format": "int32"
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "targetWWNs": {
          "description": "Optional: FC target worldwide names (WWNs)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "wwids": {
          "description": "Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1.FinalizerName": {},
    "v1.FlexVolumeSource": {
      "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
      "required": [
        "driver"
      ],
      "properties": {
        "driver": {
          "description": "Driver is the name of the driver to use for this volume.",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
          "type": "string"
        },
        "options": {
          "description": "Optional: Extra command options if any.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "readOnly": {
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.",
          "$ref": "#/definitions/v1.LocalObjectReference"
        }
      }
    },
    "v1.FlockerVolumeSource": {
      "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "datasetName": {
          "description": "Name of the dataset stored as metadata -\u003e name on the dataset for Flocker should be considered as deprecated",
          "type": "string"
        },
        "datasetUUID": {
          "description": "UUID of the dataset. This is unique identifier of a Flocker dataset",
          "type": "string"
        }
      }
    },
    "v1.GCEPersistentDiskVolumeSource": {
      "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
      "required": [
        "pdName"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "string"
        },
        "partition": {
          "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "integer",
          "format": "int32"
        },
        "pdName": {
          "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "boolean"
        }
      }
    },
    "v1.GitRepoVolumeSource": {
      "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
      "required": [
        "repository"
      ],
      "properties": {
        "directory": {
          "description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
          "type": "string"
        },
        "repository": {
          "description": "Repository URL",
          "type": "string"
        },
        "revision": {
          "description": "Commit hash for the specified revision.",
          "type": "string"
        }
      }
    },
    "v1.GlusterfsVolumeSource": {
      "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
      "required": [
        "endpoints",
        "path"
      ],
      "properties": {
        "endpoints": {
          "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "path": {
          "description": "Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "boolean"
        }
      }
    },
    "v1.HTTPGetAction": {
      "description": "HTTPGetAction describes an action based on HTTP Get requests.",
      "required": [
        "port"
      ],
      "properties": {
        "host": {
          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
          "type": "string"
        },
        "httpHeaders": {
          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.HTTPHeader"
          }
        },
        "path": {
          "description": "Path to access on the HTTP server.",
          "type": "string"
        },
        "port": {
          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
          "type": "string"
        },
        "scheme": {
          "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
          "type": "string"
        }
      }
    },
    "v1.HTTPHeader": {
      "description": "HTTPHeader describes a custom header to be used in HTTP probes",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "description": "The header field name",
          "type": "string"
        },
        "value": {
          "description": "The header field value",
          "type": "string"
        }
      }
    },
    "v1.Handler": {
      "description": "Handler defines a specific action that should be taken",
      "properties": {
        "exec": {
          "description": "One and only one of the following should be specified. Exec specifies the action to take.",
          "$ref": "#/definitions/v1.ExecAction"
        },
        "httpGet": {
          "description": "HTTPGet specifies the http request to perform.",
          "$ref": "#/definitions/v1.HTTPGetAction"
        },
        "tcpSocket": {
          "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported",
          "$ref": "#/definitions/v1.TCPSocketAction"
        }
      }
    },
    "v1.HostAlias": {
      "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
      "properties": {
        "hostnames": {
          "description": "Hostnames for the above IP address.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ip": {
          "description": "IP address of the host file entry.",
          "type": "string"
        }
      }
    },
    "v1.HostPathType": {},
    "v1.HostPathVolumeSource": {
      "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "description": "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "type": "string"
        },
        "type": {
          "description": "Type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "$ref": "#/definitions/v1.HostPathType"
        }
      }
    },
    "v1.IPFamily": {},
    "v1.ISCSIVolumeSource": {
      "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
      "required": [
        "targetPortal",
        "iqn",
        "lun"
      ],
      "properties": {
        "chapAuthDiscovery": {
          "description": "whether support iSCSI Discovery CHAP authentication",
          "type": "boolean"
        },
        "chapAuthSession": {
          "description": "whether support iSCSI Session CHAP authentication",
          "type": "boolean"
        },
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
          "type": "string"
        },
        "initiatorName": {
          "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface \u003ctarget portal\u003e:\u003cvolume name\u003e will be created for the connection.",
          "type": "string"
        },
        "iqn": {
          "description": "Target iSCSI Qualified Name.",
          "type": "string"
        },
        "iscsiInterface": {
          "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
          "type": "string"
        },
        "lun": {
          "description": "iSCSI Target Lun number.",
          "type": "integer",
          "format": "int32"
        },
        "portals": {
          "description": "iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "CHAP Secret for iSCSI target and initiator authentication",
          "$ref": "#/definitions/v1.LocalObjectReference"
        },
        "targetPortal": {
          "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "string"
        }
      }
    },
    "v1.KeyToPath": {
      "description": "Maps a string key to a path within a volume.",
      "required": [
        "key",
        "path"
      ],
      "properties": {
        "key": {
          "description": "The key to project.",
          "type": "string"
        },
        "mode": {
          "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "path": {
          "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
          "type": "string"
        }
      }
    },
    "v1.LabelSelector": {
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.LabelSelectorRequirement"
          }
        },
        "matchLabels": {
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1.LabelSelectorRequirement": {
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "description": "key is the label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
          "type": "string"
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1.Lifecycle": {
      "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
      "properties": {
        "postStart": {
          "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
          "$ref": "#/definitions/v1.Handler"
        },
        "preStop": {
          "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks",
          "$ref": "#/definitions/v1.Handler"
        }
      }
    },
    "v1.LoadBalancerIngress": {
      "description": "LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.",
      "properties": {
        "hostname": {
          "description": "Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)",
          "type": "string"
        },
        "ip": {
          "description": "IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)",
          "type": "string"
        }
      }
    },
    "v1.LoadBalancerStatus": {
      "description": "LoadBalancerStatus represents the status of a load-balancer.",
      "properties": {
        "ingress": {
          "description": "Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.LoadBalancerIngress"
          }
        }
      }
    },
    "v1.LocalObjectReference": {
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        }
      }
    },
    "v1.ManagedFieldsEntry": {
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
          "type": "string"
        },
        "fieldsType": {
          "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
          "type": "string"
        },
        "fieldsV1": {
          "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.",
          "type": "string"
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
          "type": "string"
        },
        "time": {
          "description": "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'",
          "type": "string"
        }
      }
    },
    "v1.MountPropagationMode": {},
    "v1.NFSVolumeSource": {
      "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
      "required": [
        "server",
        "path"
      ],
      "properties": {
        "path": {
          "description": "Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "boolean"
        },
        "server": {
          "description": "Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        }
      }
    },
    "v1.Namespace": {
      "description": "Namespace provides a scope for Names. Use of multiple namespaces is optional.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/v1.NamespaceSpec"
        },
        "status": {
          "description": "Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/v1.NamespaceStatus"
        }
      }
    },
    "v1.NamespaceCondition": {
      "description": "NamespaceCondition contains details about state of namespace.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of namespace controller condition.",
          "type": "string"
        }
      }
    },
    "v1.NamespaceSpec": {
      "description": "NamespaceSpec describes the attributes on a Namespace.",
      "properties": {
        "finalizers": {
          "description": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.FinalizerName"
          }
        }
      }
    },
    "v1.NamespaceStatus": {
      "description": "NamespaceStatus is information about the current status of a Namespace.",
      "properties": {
        "conditions": {
          "description": "Represents the latest available observations of a namespace's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.NamespaceCondition"
          }
        },
        "phase": {
          "description": "Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/",
          "type": "string"
        }
      }
    },
    "v1.NodeAffinity": {
      "description": "Node affinity is a group of node affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PreferredSchedulingTerm"
          }
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
          "$ref": "#/definitions/v1.NodeSelector"
        }
      }
    },
    "v1.NodeSelector": {
      "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
      "required": [
        "nodeSelectorTerms"
      ],
      "properties": {
        "nodeSelectorTerms": {
          "description": "Required. A list of node selector terms. The terms are ORed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.NodeSelectorTerm"
          }
        }
      }
    },
    "v1.NodeSelectorRequirement": {
      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "required": [
        "key",
        "operator"
      ],
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1.NodeSelectorTerm": {
      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
      "properties": {
        "matchExpressions": {
          "description": "A list of node selector requirements by node's labels.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.NodeSelectorRequirement"
          }
        },
        "matchFields": {
          "description": "A list of node selector requirements by node's fields.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.NodeSelectorRequirement"
          }
        }
      }
    },
    "v1.ObjectFieldSelector": {
      "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
      "required": [
        "fieldPath"
      ],
      "properties": {
        "apiVersion": {
          "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
          "type": "string"
        },
        "fieldPath": {
          "description": "Path of the field to select in the specified API version.",
          "type": "string"
        }
      }
    },
    "v1.ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
          "type": "string"
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "type": "string"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "type": "string"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ManagedFieldsEntry"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.OwnerReference"
          }
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "v1.ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "string"
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": "string"
        }
      }
    },
    "v1.OwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "v1.PersistentVolumeAccessMode": {},
    "v1.PersistentVolumeClaim": {
      "description": "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "$ref": "#/definitions/v1.PersistentVolumeClaimSpec"
        },
        "status": {
          "description": "Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "$ref": "#/definitions/v1.PersistentVolumeClaimStatus"
        }
      }
    },
    "v1.PersistentVolumeClaimCondition": {
      "description": "PersistentVolumeClaimCondition contails details about state of pvc",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "description": "Last time we probed the condition.",
          "type": "string"
        },
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "type": "string"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1.PersistentVolumeClaimSpec": {
      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
      "properties": {
        "accessModes": {
          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PersistentVolumeAccessMode"
          }
        },
        "dataSource": {
          "description": "This field requires the VolumeSnapshotDataSource alpha feature gate to be enabled and currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. In the future, we plan to support more data source types and the behavior of the provisioner may change.",
          "$ref": "#/definitions/v1.TypedLocalObjectReference"
        },
        "resources": {
          "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
          "$ref": "#/definitions/v1.ResourceRequirements"
        },
        "selector": {
          "description": "A label query over volumes to consider for binding.",
          "$ref": "#/definitions/v1.LabelSelector"
        },
        "storageClassName": {
          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
          "type": "string"
        },
        "volumeMode": {
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.",
          "$ref": "#/definitions/v1.PersistentVolumeMode"
        },
        "volumeName": {
          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
          "type": "string"
        }
      }
    },
    "v1.PersistentVolumeClaimStatus": {
      "description": "PersistentVolumeClaimStatus is the current status of a persistent volume claim.",
      "properties": {
        "accessModes": {
          "description": "AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PersistentVolumeAccessMode"
          }
        },
        "capacity": {
          "description": "Represents the actual resources of the underlying volume.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }
        },
        "conditions": {
          "description": "Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PersistentVolumeClaimCondition"
          }
        },
        "phase": {
          "description": "Phase represents the current phase of PersistentVolumeClaim.",
          "type": "string"
        }
      }
    },
    "v1.PersistentVolumeClaimVolumeSource": {
      "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
      "required": [
        "claimName"
      ],
      "properties": {
        "claimName": {
          "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "string"
        },
        "readOnly": {
          "description": "Will force the ReadOnly setting in VolumeMounts. Default false.",
          "type": "boolean"
        }
      }
    },
    "v1.PersistentVolumeMode": {},
    "v1.PhotonPersistentDiskVolumeSource": {
      "description": "Represents a Photon Controller persistent disk resource.",
      "required": [
        "pdID"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "pdID": {
          "description": "ID that identifies Photon Controller persistent disk",
          "type": "string"
        }
      }
    },
    "v1.PodAffinity": {
      "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.WeightedPodAffinityTerm"
          }
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PodAffinityTerm"
          }
        }
      }
    },
    "v1.PodAffinityTerm": {
      "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running",
      "required": [
        "topologyKey"
      ],
      "properties": {
        "labelSelector": {
          "description": "A label query over a set of resources, in this case pods.",
          "$ref": "#/definitions/v1.LabelSelector"
        },
        "namespaces": {
          "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "topologyKey": {
          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
          "type": "string"
        }
      }
    },
    "v1.PodAntiAffinity": {
      "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.WeightedPodAffinityTerm"
          }
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PodAffinityTerm"
          }
        }
      }
    },
    "v1.PodDNSConfig": {
      "description": "PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.",
      "properties": {
        "nameservers": {
          "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "options": {
          "description": "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PodDNSConfigOption"
          }
        },
        "searches": {
          "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1.PodDNSConfigOption": {
      "description": "PodDNSConfigOption defines DNS resolver options of a pod.",
      "properties": {
        "name": {
          "description": "Required.",
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1.PodReadinessGate": {
      "description": "PodReadinessGate contains the reference to a pod condition",
      "required": [
        "conditionType"
      ],
      "properties": {
        "conditionType": {
          "description": "ConditionType refers to a condition in the pod's condition list with matching type.",
          "type": "string"
        }
      }
    },
    "v1.PodSecurityContext": {
      "description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
      "properties": {
        "fsGroup": {
          "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw ",
          "type": "integer",
          "format": "int64"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
          "type": "integer",
          "format": "int64"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
          "type": "integer",
          "format": "int64"
        },
        "seLinuxOptions": {
          "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
          "$ref": "#/definitions/v1.SELinuxOptions"
        },
        "supplementalGroups": {
          "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "sysctls": {
          "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Sysctl"
          }
        },
        "windowsOptions": {
          "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "$ref": "#/definitions/v1.WindowsSecurityContextOptions"
        }
      }
    },
    "v1.PodSpec": {
      "description": "PodSpec is a description of a pod.",
      "required": [
        "containers"
      ],
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.",
          "type": "integer",
          "format": "int64"
        },
        "affinity": {
          "description": "If specified, the pod's scheduling constraints",
          "$ref": "#/definitions/v1.Affinity"
        },
        "automountServiceAccountToken": {
          "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.",
          "type": "boolean"
        },
        "containers": {
          "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Container"
          }
        },
        "dnsConfig": {
          "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
          "$ref": "#/definitions/v1.PodDNSConfig"
        },
        "dnsPolicy": {
          "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
          "type": "string"
        },
        "enableServiceLinks": {
          "description": "EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.",
          "type": "boolean"
        },
        "ephemeralContainers": {
          "description": "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.EphemeralContainer"
          }
        },
        "hostAliases": {
          "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.HostAlias"
          }
        },
        "hostIPC": {
          "description": "Use the host's ipc namespace. Optional: Default to false.",
          "type": "boolean"
        },
        "hostNetwork": {
          "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
          "type": "boolean"
        },
        "hostPID": {
          "description": "Use the host's pid namespace. Optional: Default to false.",
          "type": "boolean"
        },
        "hostname": {
          "description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.LocalObjectReference"
          }
        },
        "initContainers": {
          "description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Container"
          }
        },
        "nodeName": {
          "description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.",
          "type": "string"
        },
        "nodeSelector": {
          "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "overhead": {
          "description": "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }
        },
        "preemptionPolicy": {
          "description": "PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature.",
          "$ref": "#/definitions/v1.PreemptionPolicy"
        },
        "priority": {
          "description": "The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
          "type": "integer",
          "format": "int32"
        },
        "priorityClassName": {
          "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
          "type": "string"
        },
        "readinessGates": {
          "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PodReadinessGate"
          }
        },
        "restartPolicy": {
          "description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
          "type": "string"
        },
        "runtimeClassName": {
          "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.",
          "type": "string"
        },
        "schedulerName": {
          "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
          "type": "string"
        },
        "securityContext": {
          "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.",
          "$ref": "#/definitions/v1.PodSecurityContext"
        },
        "serviceAccount": {
          "description": "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.",
          "type": "string"
        },
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
          "type": "string"
        },
        "shareProcessNamespace": {
          "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.",
          "type": "boolean"
        },
        "subdomain": {
          "description": "If specified, the fully qualified Pod hostname will be \"\u003chostname\u003e.\u003csubdomain\u003e.\u003cpod namespace\u003e.svc.\u003ccluster domain\u003e\". If not specified, the pod will not have a domainname at all.",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.",
          "type": "integer",
          "format": "int64"
        },
        "tolerations": {
          "description": "If specified, the pod's tolerations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Toleration"
          }
        },
        "topologySpreadConstraints": {
          "description": "TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. This field is alpha-level and is only honored by clusters that enables the EvenPodsSpread feature. All topologySpreadConstraints are ANDed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.TopologySpreadConstraint"
          }
        },
        "volumes": {
          "description": "List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.Volume"
          }
        }
      }
    },
    "v1.PodTemplateSpec": {
      "description": "PodTemplateSpec describes the data a pod should have when created from a template",
      "properties": {
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "description": "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/v1.PodSpec"
        }
      }
    },
    "v1.PolicyRule": {
      "description": "PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.",
      "required": [
        "verbs"
      ],
      "properties": {
        "apiGroups": {
          "description": "APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nonResourceURLs": {
          "description": "NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceNames": {
          "description": "ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resources": {
          "description": "Resources is a list of resources this rule applies to.  ResourceAll represents all resources.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "verbs": {
          "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1.PortworxVolumeSource": {
      "description": "PortworxVolumeSource represents a Portworx volume resource.",
      "required": [
        "volumeID"
      ],
      "properties": {
        "fsType": {
          "description": "FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "volumeID": {
          "description": "VolumeID uniquely identifies a Portworx volume",
          "type": "string"
        }
      }
    },
    "v1.PreemptionPolicy": {},
    "v1.PreferredSchedulingTerm": {
      "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
      "required": [
        "weight",
        "preference"
      ],
      "properties": {
        "preference": {
          "description": "A node selector term, associated with the corresponding weight.",
          "$ref": "#/definitions/v1.NodeSelectorTerm"
        },
        "weight": {
          "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1.Probe": {
      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
      "properties": {
        "exec": {
          "description": "One and only one of the following should be specified. Exec specifies the action to take.",
          "$ref": "#/definitions/v1.ExecAction"
        },
        "failureThreshold": {
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
          "type": "integer",
          "format": "int32"
        },
        "httpGet": {
          "description": "HTTPGet specifies the http request to perform.",
          "$ref": "#/definitions/v1.HTTPGetAction"
        },
        "initialDelaySeconds": {
          "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "type": "integer",
          "format": "int32"
        },
        "periodSeconds": {
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
          "type": "integer",
          "format": "int32"
        },
        "successThreshold": {
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
          "type": "integer",
          "format": "int32"
        },
        "tcpSocket": {
          "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported",
          "$ref": "#/definitions/v1.TCPSocketAction"
        },
        "timeoutSeconds": {
          "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1.ProcMountType": {},
    "v1.ProjectedVolumeSource": {
      "description": "Represents a projected volume source",
      "required": [
        "sources"
      ],
      "properties": {
        "defaultMode": {
          "description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "sources": {
          "description": "list of volume projections",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.VolumeProjection"
          }
        }
      }
    },
    "v1.QuobyteVolumeSource": {
      "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
      "required": [
        "registry",
        "volume"
      ],
      "properties": {
        "group": {
          "description": "Group to map volume access to Default is no group",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
          "type": "boolean"
        },
        "registry": {
          "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
          "type": "string"
        },
        "tenant": {
          "description": "Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin",
          "type": "string"
        },
        "user": {
          "description": "User to map volume access to Defaults to serivceaccount user",
          "type": "string"
        },
        "volume": {
          "description": "Volume is a string that references an already created Quobyte volume by name.",
          "type": "string"
        }
      }
    },
    "v1.RBDVolumeSource": {
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
      "required": [
        "monitors",
        "image"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
          "type": "string"
        },
        "image": {
          "description": "The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "keyring": {
          "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "monitors": {
          "description": "A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "pool": {
          "description": "The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "readOnly": {
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretRef": {
          "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "$ref": "#/definitions/v1.LocalObjectReference"
        },
        "user": {
          "description": "The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        }
      }
    },
    "v1.ReplicaSet": {
      "description": "ReplicaSet ensures that a specified number of pod replicas are running at any given time.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages. Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the specification of the desired behavior of the ReplicaSet. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/v1.ReplicaSetSpec"
        },
        "status": {
          "description": "Status is the most recently observed status of the ReplicaSet. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/v1.ReplicaSetStatus"
        }
      }
    },
    "v1.ReplicaSetCondition": {
      "description": "ReplicaSetCondition describes the state of a replica set at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "The last time the condition transitioned from one status to another.",
          "type": "string"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of replica set condition.",
          "type": "string"
        }
      }
    },
    "v1.ReplicaSetSpec": {
      "description": "ReplicaSetSpec is the specification of a ReplicaSet.",
      "required": [
        "selector"
      ],
      "properties": {
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/v1.LabelSelector"
        },
        "template": {
          "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template",
          "$ref": "#/definitions/v1.PodTemplateSpec"
        }
      }
    },
    "v1.ReplicaSetStatus": {
      "description": "ReplicaSetStatus represents the current status of a ReplicaSet.",
      "required": [
        "replicas"
      ],
      "properties": {
        "availableReplicas": {
          "description": "The number of available replicas (ready for at least minReadySeconds) for this replica set.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a replica set's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ReplicaSetCondition"
          }
        },
        "fullyLabeledReplicas": {
          "description": "The number of pods that have labels matching the labels of the pod template of the replicaset.",
          "type": "integer",
          "format": "int32"
        },
        "observedGeneration": {
          "description": "ObservedGeneration reflects the generation of the most recently observed ReplicaSet.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "The number of ready replicas for this replica set.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1.ResourceFieldSelector": {
      "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
      "required": [
        "resource"
      ],
      "properties": {
        "containerName": {
          "description": "Container name: required for volumes, optional for env vars",
          "type": "string"
        },
        "divisor": {
          "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
          "type": "string"
        },
        "resource": {
          "description": "Required: resource to select",
          "type": "string"
        }
      }
    },
    "v1.ResourceQuotaStatus": {
      "description": "ResourceQuotaStatus defines the enforced hard limits and observed use.",
      "properties": {
        "hard": {
          "description": "Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }
        },
        "used": {
          "description": "Used is the current observed total usage of the resource in the namespace.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }
        }
      }
    },
    "v1.ResourceRequirements": {
      "description": "ResourceRequirements describes the compute resource requirements.",
      "properties": {
        "limits": {
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }
        },
        "requests": {
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/resource.Quantity"
          }
        }
      }
    },
    "v1.Role": {
      "description": "Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.",
      "required": [
        "rules"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata.",
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "rules": {
          "description": "Rules holds all the PolicyRules for this Role",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PolicyRule"
          }
        }
      }
    },
    "v1.RollingUpdateDaemonSet": {
      "description": "Spec to control the desired behavior of daemon set rolling update.",
      "properties": {
        "maxUnavailable": {
          "description": "The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.",
          "type": "string"
        }
      }
    },
    "v1.RollingUpdateStatefulSetStrategy": {
      "description": "RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.",
      "properties": {
        "partition": {
          "description": "Partition indicates the ordinal at which the StatefulSet should be partitioned. Default value is 0.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1.SELinuxOptions": {
      "description": "SELinuxOptions are the labels to be applied to the container",
      "properties": {
        "level": {
          "description": "Level is SELinux level label that applies to the container.",
          "type": "string"
        },
        "role": {
          "description": "Role is a SELinux role label that applies to the container.",
          "type": "string"
        },
        "type": {
          "description": "Type is a SELinux type label that applies to the container.",
          "type": "string"
        },
        "user": {
          "description": "User is a SELinux user label that applies to the container.",
          "type": "string"
        }
      }
    },
    "v1.ScaleIOVolumeSource": {
      "description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
      "required": [
        "gateway",
        "system",
        "secretRef"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".",
          "type": "string"
        },
        "gateway": {
          "description": "The host address of the ScaleIO API Gateway.",
          "type": "string"
        },
        "protectionDomain": {
          "description": "The name of the ScaleIO Protection Domain for the configured storage.",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.",
          "$ref": "#/definitions/v1.LocalObjectReference"
        },
        "sslEnabled": {
          "description": "Flag to enable/disable SSL communication with Gateway, default false",
          "type": "boolean"
        },
        "storageMode": {
          "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
          "type": "string"
        },
        "storagePool": {
          "description": "The ScaleIO Storage Pool associated with the protection domain.",
          "type": "string"
        },
        "system": {
          "description": "The name of the storage system as configured in ScaleIO.",
          "type": "string"
        },
        "volumeName": {
          "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
          "type": "string"
        }
      }
    },
    "v1.Secret": {
      "description": "Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "data": {
          "description": "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1.Secret.data"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "stringData": {
          "description": "stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "description": "Used to facilitate programmatic handling of secret data.",
          "type": "string"
        }
      }
    },
    "v1.SecretEnvSource": {
      "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret must be defined",
          "type": "boolean"
        }
      }
    },
    "v1.SecretKeySelector": {
      "description": "SecretKeySelector selects a key of a Secret.",
      "required": [
        "key"
      ],
      "properties": {
        "key": {
          "description": "The key of the secret to select from.  Must be a valid secret key.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret or its key must be defined",
          "type": "boolean"
        }
      }
    },
    "v1.SecretProjection": {
      "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
      "properties": {
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.KeyToPath"
          }
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret or its key must be defined",
          "type": "boolean"
        }
      }
    },
    "v1.SecretReference": {
      "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
      "properties": {
        "name": {
          "description": "Name is unique within a namespace to reference a secret resource.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which the secret name must be unique.",
          "type": "string"
        }
      }
    },
    "v1.SecretVolumeSource": {
      "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "type": "integer",
          "format": "int32"
        },
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.KeyToPath"
          }
        },
        "optional": {
          "description": "Specify whether the Secret or its keys must be defined",
          "type": "boolean"
        },
        "secretName": {
          "description": "Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
          "type": "string"
        }
      }
    },
    "v1.SecurityContext": {
      "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
      "properties": {
        "allowPrivilegeEscalation": {
          "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
          "type": "boolean"
        },
        "capabilities": {
          "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.",
          "$ref": "#/definitions/v1.Capabilities"
        },
        "privileged": {
          "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
          "type": "boolean"
        },
        "procMount": {
          "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
          "$ref": "#/definitions/v1.ProcMountType"
        },
        "readOnlyRootFilesystem": {
          "description": "Whether this container has a read-only root filesystem. Default is false.",
          "type": "boolean"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "integer",
          "format": "int64"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "integer",
          "format": "int64"
        },
        "seLinuxOptions": {
          "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "$ref": "#/definitions/v1.SELinuxOptions"
        },
        "windowsOptions": {
          "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "$ref": "#/definitions/v1.WindowsSecurityContextOptions"
        }
      }
    },
    "v1.Service": {
      "description": "Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/v1.ServiceSpec"
        },
        "status": {
          "description": "Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
          "$ref": "#/definitions/v1.ServiceStatus"
        }
      }
    },
    "v1.ServiceAccountTokenProjection": {
      "description": "ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).",
      "required": [
        "path"
      ],
      "properties": {
        "audience": {
          "description": "Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
          "type": "string"
        },
        "expirationSeconds": {
          "description": "ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
          "type": "integer",
          "format": "int64"
        },
        "path": {
          "description": "Path is the path relative to the mount point of the file to project the token into.",
          "type": "string"
        }
      }
    },
    "v1.ServicePort": {
      "description": "ServicePort contains information on service's port.",
      "required": [
        "port"
      ],
      "properties": {
        "name": {
          "description": "The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.",
          "type": "string"
        },
        "nodePort": {
          "description": "The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport",
          "type": "integer",
          "format": "int32"
        },
        "port": {
          "description": "The port that will be exposed by this service.",
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.",
          "type": "string"
        },
        "targetPort": {
          "description": "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service",
          "type": "string"
        }
      }
    },
    "v1.ServiceSpec": {
      "description": "ServiceSpec describes the attributes that a user creates on a service.",
      "properties": {
        "clusterIP": {
          "description": "clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "type": "string"
        },
        "externalIPs": {
          "description": "externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "externalName": {
          "description": "externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.",
          "type": "string"
        },
        "externalTrafficPolicy": {
          "description": "externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.",
          "type": "string"
        },
        "healthCheckNodePort": {
          "description": "healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.",
          "type": "integer",
          "format": "int32"
        },
        "ipFamily": {
          "description": "ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.",
          "$ref": "#/definitions/v1.IPFamily"
        },
        "loadBalancerIP": {
          "description": "Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.",
          "type": "string"
        },
        "loadBalancerSourceRanges": {
          "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ports": {
          "description": "The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ServicePort"
          }
        },
        "publishNotReadyAddresses": {
          "description": "publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.",
          "type": "boolean"
        },
        "selector": {
          "description": "Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sessionAffinity": {
          "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
          "type": "string"
        },
        "sessionAffinityConfig": {
          "description": "sessionAffinityConfig contains the configurations of session affinity.",
          "$ref": "#/definitions/v1.SessionAffinityConfig"
        },
        "topologyKeys": {
          "description": "topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value \"*\" may be used to mean \"any topology\". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ExternalName\" maps to the specified externalName. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types",
          "type": "string"
        }
      }
    },
    "v1.ServiceStatus": {
      "description": "ServiceStatus represents the current status of a service.",
      "properties": {
        "loadBalancer": {
          "description": "LoadBalancer contains the current status of the load-balancer, if one is present.",
          "$ref": "#/definitions/v1.LoadBalancerStatus"
        }
      }
    },
    "v1.SessionAffinityConfig": {
      "description": "SessionAffinityConfig represents the configurations of session affinity.",
      "properties": {
        "clientIP": {
          "description": "clientIP contains the configurations of Client IP based session affinity.",
          "$ref": "#/definitions/v1.ClientIPConfig"
        }
      }
    },
    "v1.StatefulSet": {
      "description": "StatefulSet represents a set of pods with consistent identities. Identities are defined as:\n - Network: A single stable DNS and hostname.\n - Storage: As many VolumeClaims as requested.\nThe StatefulSet guarantees that a given network identity will always map to the same storage identity.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "description": "Spec defines the desired identities of pods in this set.",
          "$ref": "#/definitions/v1.StatefulSetSpec"
        },
        "status": {
          "description": "Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time.",
          "$ref": "#/definitions/v1.StatefulSetStatus"
        }
      }
    },
    "v1.StatefulSetCondition": {
      "description": "StatefulSetCondition describes the state of a statefulset at a certain point.",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "Last time the condition transitioned from one status to another.",
          "type": "string"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of statefulset condition.",
          "type": "string"
        }
      }
    },
    "v1.StatefulSetSpec": {
      "description": "A StatefulSetSpec is the specification of a StatefulSet.",
      "required": [
        "selector",
        "template",
        "serviceName"
      ],
      "properties": {
        "podManagementPolicy": {
          "description": "podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.",
          "type": "string"
        },
        "replicas": {
          "description": "replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.",
          "type": "integer",
          "format": "int32"
        },
        "revisionHistoryLimit": {
          "description": "revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.",
          "type": "integer",
          "format": "int32"
        },
        "selector": {
          "description": "selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
          "$ref": "#/definitions/v1.LabelSelector"
        },
        "serviceName": {
          "description": "serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.",
          "type": "string"
        },
        "template": {
          "description": "template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.",
          "$ref": "#/definitions/v1.PodTemplateSpec"
        },
        "updateStrategy": {
          "description": "updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.",
          "$ref": "#/definitions/v1.StatefulSetUpdateStrategy"
        },
        "volumeClaimTemplates": {
          "description": "volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PersistentVolumeClaim"
          }
        }
      }
    },
    "v1.StatefulSetStatus": {
      "description": "StatefulSetStatus represents the current state of a StatefulSet.",
      "required": [
        "replicas"
      ],
      "properties": {
        "collisionCount": {
          "description": "collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
          "type": "integer",
          "format": "int32"
        },
        "conditions": {
          "description": "Represents the latest available observations of a statefulset's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.StatefulSetCondition"
          }
        },
        "currentReplicas": {
          "description": "currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.",
          "type": "integer",
          "format": "int32"
        },
        "currentRevision": {
          "description": "currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).",
          "type": "string"
        },
        "observedGeneration": {
          "description": "observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.",
          "type": "integer",
          "format": "int32"
        },
        "replicas": {
          "description": "replicas is the number of Pods created by the StatefulSet controller.",
          "type": "integer",
          "format": "int32"
        },
        "updateRevision": {
          "description": "updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)",
          "type": "string"
        },
        "updatedReplicas": {
          "description": "updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1.StatefulSetUpdateStrategy": {
      "description": "StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.",
      "properties": {
        "rollingUpdate": {
          "description": "RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.",
          "$ref": "#/definitions/v1.RollingUpdateStatefulSetStrategy"
        },
        "type": {
          "description": "Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.",
          "type": "string"
        }
      }
    },
    "v1.StorageOSVolumeSource": {
      "description": "Represents a StorageOS persistent volume resource.",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "description": "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.",
          "$ref": "#/definitions/v1.LocalObjectReference"
        },
        "volumeName": {
          "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
          "type": "string"
        },
        "volumeNamespace": {
          "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
          "type": "string"
        }
      }
    },
    "v1.Sysctl": {
      "description": "Sysctl defines a kernel parameter to be set",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "description": "Name of a property to set",
          "type": "string"
        },
        "value": {
          "description": "Value of a property to set",
          "type": "string"
        }
      }
    },
    "v1.TCPSocketAction": {
      "description": "TCPSocketAction describes an action based on opening a socket",
      "required": [
        "port"
      ],
      "properties": {
        "host": {
          "description": "Optional: Host name to connect to, defaults to the pod IP.",
          "type": "string"
        },
        "port": {
          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.",
          "type": "string"
        }
      }
    },
    "v1.Toleration": {
      "description": "The pod this Toleration is attached to tolerates any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
      "properties": {
        "effect": {
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
          "type": "string"
        },
        "key": {
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
          "type": "string"
        },
        "operator": {
          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
          "type": "string"
        },
        "tolerationSeconds": {
          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
          "type": "integer",
          "format": "int64"
        },
        "value": {
          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
          "type": "string"
        }
      }
    },
    "v1.TopologySpreadConstraint": {
      "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
      "required": [
        "maxSkew",
        "topologyKey",
        "whenUnsatisfiable"
      ],
      "properties": {
        "labelSelector": {
          "description": "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.",
          "$ref": "#/definitions/v1.LabelSelector"
        },
        "maxSkew": {
          "description": "MaxSkew describes the degree to which pods may be unevenly distributed. It's the maximum permitted difference between the number of matching pods in any two topology domains of a given topology type. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: ",
          "type": "integer",
          "format": "int32"
        },
        "topologyKey": {
          "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each \u003ckey, value\u003e as a \"bucket\", and try to put balanced number of pods into each bucket. It's a required field.",
          "type": "string"
        },
        "whenUnsatisfiable": {
          "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it - ScheduleAnyway tells the scheduler to still schedule it It's considered as \"Unsatisfiable\" if and only if placing incoming pod on any topology violates \"MaxSkew\". For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: ",
          "type": "string"
        }
      }
    },
    "v1.TypedLocalObjectReference": {
      "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
      "required": [
        "apiGroup",
        "kind",
        "name"
      ],
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of resource being referenced",
          "type": "string"
        }
      }
    },
    "v1.Volume": {
      "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
      "required": [
        "name"
      ],
      "properties": {
        "awsElasticBlockStore": {
          "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "$ref": "#/definitions/v1.AWSElasticBlockStoreVolumeSource"
        },
        "azureDisk": {
          "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
          "$ref": "#/definitions/v1.AzureDiskVolumeSource"
        },
        "azureFile": {
          "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
          "$ref": "#/definitions/v1.AzureFileVolumeSource"
        },
        "cephfs": {
          "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime",
          "$ref": "#/definitions/v1.CephFSVolumeSource"
        },
        "cinder": {
          "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "$ref": "#/definitions/v1.CinderVolumeSource"
        },
        "configMap": {
          "description": "ConfigMap represents a configMap that should populate this volume",
          "$ref": "#/definitions/v1.ConfigMapVolumeSource"
        },
        "csi": {
          "description": "CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature).",
          "$ref": "#/definitions/v1.CSIVolumeSource"
        },
        "downwardAPI": {
          "description": "DownwardAPI represents downward API about the pod that should populate this volume",
          "$ref": "#/definitions/v1.DownwardAPIVolumeSource"
        },
        "emptyDir": {
          "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
          "$ref": "#/definitions/v1.EmptyDirVolumeSource"
        },
        "fc": {
          "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.",
          "$ref": "#/definitions/v1.FCVolumeSource"
        },
        "flexVolume": {
          "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
          "$ref": "#/definitions/v1.FlexVolumeSource"
        },
        "flocker": {
          "description": "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running",
          "$ref": "#/definitions/v1.FlockerVolumeSource"
        },
        "gcePersistentDisk": {
          "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "$ref": "#/definitions/v1.GCEPersistentDiskVolumeSource"
        },
        "gitRepo": {
          "description": "GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
          "$ref": "#/definitions/v1.GitRepoVolumeSource"
        },
        "glusterfs": {
          "description": "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md",
          "$ref": "#/definitions/v1.GlusterfsVolumeSource"
        },
        "hostPath": {
          "description": "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "$ref": "#/definitions/v1.HostPathVolumeSource"
        },
        "iscsi": {
          "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md",
          "$ref": "#/definitions/v1.ISCSIVolumeSource"
        },
        "name": {
          "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "nfs": {
          "description": "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "$ref": "#/definitions/v1.NFSVolumeSource"
        },
        "persistentVolumeClaim": {
          "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "$ref": "#/definitions/v1.PersistentVolumeClaimVolumeSource"
        },
        "photonPersistentDisk": {
          "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine",
          "$ref": "#/definitions/v1.PhotonPersistentDiskVolumeSource"
        },
        "portworxVolume": {
          "description": "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine",
          "$ref": "#/definitions/v1.PortworxVolumeSource"
        },
        "projected": {
          "description": "Items for all in one resources secrets, configmaps, and downward API",
          "$ref": "#/definitions/v1.ProjectedVolumeSource"
        },
        "quobyte": {
          "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime",
          "$ref": "#/definitions/v1.QuobyteVolumeSource"
        },
        "rbd": {
          "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md",
          "$ref": "#/definitions/v1.RBDVolumeSource"
        },
        "scaleIO": {
          "description": "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.",
          "$ref": "#/definitions/v1.ScaleIOVolumeSource"
        },
        "secret": {
          "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
          "$ref": "#/definitions/v1.SecretVolumeSource"
        },
        "storageos": {
          "description": "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.",
          "$ref": "#/definitions/v1.StorageOSVolumeSource"
        },
        "vsphereVolume": {
          "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine",
          "$ref": "#/definitions/v1.VsphereVirtualDiskVolumeSource"
        }
      }
    },
    "v1.VolumeDevice": {
      "description": "volumeDevice describes a mapping of a raw block device within a container.",
      "required": [
        "name",
        "devicePath"
      ],
      "properties": {
        "devicePath": {
          "description": "devicePath is the path inside of the container that the device will be mapped to.",
          "type": "string"
        },
        "name": {
          "description": "name must match the name of a persistentVolumeClaim in the pod",
          "type": "string"
        }
      }
    },
    "v1.VolumeMount": {
      "description": "VolumeMount describes a mounting of a Volume within a container.",
      "required": [
        "name",
        "mountPath"
      ],
      "properties": {
        "mountPath": {
          "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
          "type": "string"
        },
        "mountPropagation": {
          "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
          "$ref": "#/definitions/v1.MountPropagationMode"
        },
        "name": {
          "description": "This must match the Name of a Volume.",
          "type": "string"
        },
        "readOnly": {
          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
          "type": "boolean"
        },
        "subPath": {
          "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
          "type": "string"
        },
        "subPathExpr": {
          "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
          "type": "string"
        }
      }
    },
    "v1.VolumeProjection": {
      "description": "Projection that may be projected along with other supported volume types",
      "properties": {
        "configMap": {
          "description": "information about the configMap data to project",
          "$ref": "#/definitions/v1.ConfigMapProjection"
        },
        "downwardAPI": {
          "description": "information about the downwardAPI data to project",
          "$ref": "#/definitions/v1.DownwardAPIProjection"
        },
        "secret": {
          "description": "information about the secret data to project",
          "$ref": "#/definitions/v1.SecretProjection"
        },
        "serviceAccountToken": {
          "description": "information about the serviceAccountToken data to project",
          "$ref": "#/definitions/v1.ServiceAccountTokenProjection"
        }
      }
    },
    "v1.VsphereVirtualDiskVolumeSource": {
      "description": "Represents a vSphere volume resource.",
      "required": [
        "volumePath"
      ],
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "storagePolicyID": {
          "description": "Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
          "type": "string"
        },
        "storagePolicyName": {
          "description": "Storage Policy Based Management (SPBM) profile name.",
          "type": "string"
        },
        "volumePath": {
          "description": "Path that identifies vSphere volume vmdk",
          "type": "string"
        }
      }
    },
    "v1.WeightedPodAffinityTerm": {
      "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
      "required": [
        "weight",
        "podAffinityTerm"
      ],
      "properties": {
        "podAffinityTerm": {
          "description": "Required. A pod affinity term, associated with the corresponding weight.",
          "$ref": "#/definitions/v1.PodAffinityTerm"
        },
        "weight": {
          "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1.WindowsSecurityContextOptions": {
      "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
      "properties": {
        "gmsaCredentialSpec": {
          "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.",
          "type": "string"
        },
        "gmsaCredentialSpecName": {
          "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use. This field is alpha-level and is only honored by servers that enable the WindowsGMSA feature flag.",
          "type": "string"
        },
        "runAsUserName": {
          "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. This field is beta-level and may be disabled with the WindowsRunAsUserName feature flag.",
          "type": "string"
        }
      }
    },
    "v1alpha1.APIResponse": {
      "properties": {
        "histogram": {
          "description": "histogram results",
          "$ref": "#/definitions/events.Histogram"
        },
        "query": {
          "description": "query results",
          "$ref": "#/definitions/events.Events"
        },
        "statistics": {
          "description": "statistics results",
          "$ref": "#/definitions/events.Statistics"
        }
      }
    },
    "v1alpha1.WorkspaceSpec": {
      "properties": {
        "manager": {
          "type": "string"
        },
        "networkIsolation": {
          "type": "boolean"
        }
      }
    },
    "v1alpha2.APIResponse": {
      "properties": {
        "histogram": {
          "description": "histogram results",
          "$ref": "#/definitions/logging.Histogram"
        },
        "query": {
          "description": "query results",
          "$ref": "#/definitions/logging.Logs"
        },
        "statistics": {
          "description": "statistics results",
          "$ref": "#/definitions/logging.Statistics"
        }
      }
    },
    "v1alpha2.BadRequestError": {
      "required": [
        "status",
        "reason"
      ],
      "properties": {
        "reason": {
          "$ref": "#/definitions/error"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha2.Column": {
      "required": [
        "id",
        "label",
        "dataType"
      ],
      "properties": {
        "dataType": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      }
    },
    "v1alpha2.ComponentStatus": {
      "required": [
        "name",
        "namespace",
        "selfLink",
        "label",
        "startedAt",
        "totalBackends",
        "healthyBackends"
      ],
      "properties": {
        "healthyBackends": {
          "description": "the number of healthy backend components",
          "type": "integer",
          "format": "int32"
        },
        "label": {
          "description": "labels",
          "$ref": "#/definitions/v1alpha2.ComponentStatus.label"
        },
        "name": {
          "description": "component name",
          "type": "string"
        },
        "namespace": {
          "description": "the name of the namespace",
          "type": "string"
        },
        "selfLink": {
          "description": "self link",
          "type": "string"
        },
        "startedAt": {
          "description": "started time",
          "type": "string",
          "format": "date-time"
        },
        "totalBackends": {
          "description": "the total replicas of each backend system component",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha2.ComponentStatus.label": {},
    "v1alpha2.Connection": {
      "required": [
        "id",
        "nodeId",
        "label"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "labelMinor": {
          "type": "string"
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.MetadataRow"
          }
        },
        "nodeId": {
          "type": "string"
        }
      }
    },
    "v1alpha2.ConnectionsSummary": {
      "required": [
        "id",
        "topologyId",
        "label",
        "columns",
        "connections"
      ],
      "properties": {
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.Column"
          }
        },
        "connections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.Connection"
          }
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "topologyId": {
          "type": "string"
        }
      }
    },
    "v1alpha2.Control": {
      "required": [
        "id",
        "human",
        "icon",
        "rank"
      ],
      "properties": {
        "confirmation": {
          "type": "string"
        },
        "human": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "rank": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha2.ControlInstance": {
      "required": [
        "ProbeID",
        "NodeID",
        "Control"
      ],
      "properties": {
        "Control": {
          "$ref": "#/definitions/v1alpha2.Control"
        },
        "NodeID": {
          "type": "string"
        },
        "ProbeID": {
          "type": "string"
        }
      }
    },
    "v1alpha2.GlobalRole": {
      "required": [
        "rules"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PolicyRule"
          }
        }
      }
    },
    "v1alpha2.HealthStatus": {
      "required": [
        "kubesphereStatus",
        "nodeStatus"
      ],
      "properties": {
        "kubesphereStatus": {
          "description": "kubesphere components status",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.ComponentStatus"
          }
        },
        "nodeStatus": {
          "description": "nodes status",
          "$ref": "#/definitions/v1alpha2.NodeStatus"
        }
      }
    },
    "v1alpha2.Member": {
      "required": [
        "username",
        "roleRef"
      ],
      "properties": {
        "roleRef": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1alpha2.MetadataRow": {
      "required": [
        "id",
        "label",
        "value"
      ],
      "properties": {
        "dataType": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "priority": {
          "type": "number",
          "format": "double"
        },
        "truncate": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1alpha2.Metric": {
      "required": [
        "min",
        "max"
      ],
      "properties": {
        "max": {
          "type": "number",
          "format": "double"
        },
        "min": {
          "type": "number",
          "format": "double"
        },
        "samples": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.Sample"
          }
        }
      }
    },
    "v1alpha2.MetricRow": {
      "required": [
        "ID",
        "Label",
        "Format",
        "Group",
        "Value",
        "ValueEmpty",
        "Priority",
        "URL",
        "Metric"
      ],
      "properties": {
        "Format": {
          "type": "string"
        },
        "Group": {
          "type": "string"
        },
        "ID": {
          "type": "string"
        },
        "Label": {
          "type": "string"
        },
        "Metric": {
          "$ref": "#/definitions/v1alpha2.Metric"
        },
        "Priority": {
          "type": "number",
          "format": "double"
        },
        "URL": {
          "type": "string"
        },
        "Value": {
          "type": "number",
          "format": "double"
        },
        "ValueEmpty": {
          "type": "boolean"
        }
      }
    },
    "v1alpha2.Node": {
      "required": [
        "id",
        "label",
        "rank",
        "labelMinor",
        "controls"
      ],
      "properties": {
        "adjacency": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.NodeSummaryGroup"
          }
        },
        "connections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.ConnectionsSummary"
          }
        },
        "controls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.ControlInstance"
          }
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "labelMinor": {
          "type": "string"
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.MetadataRow"
          }
        },
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.MetricRow"
          }
        },
        "parents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.Parent"
          }
        },
        "pseudo": {
          "type": "boolean"
        },
        "rank": {
          "type": "string"
        },
        "shape": {
          "type": "string"
        },
        "stack": {
          "type": "boolean"
        },
        "tables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.Table"
          }
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "v1alpha2.NodeResponse": {
      "required": [
        "node"
      ],
      "properties": {
        "node": {
          "$ref": "#/definitions/v1alpha2.Node"
        }
      }
    },
    "v1alpha2.NodeStatus": {
      "required": [
        "totalNodes",
        "healthyNodes"
      ],
      "properties": {
        "healthyNodes": {
          "description": "the number of healthy nodes",
          "type": "integer",
          "format": "int32"
        },
        "totalNodes": {
          "description": "total number of nodes",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha2.NodeSummary": {
      "required": [
        "labelMinor",
        "rank",
        "id",
        "label"
      ],
      "properties": {
        "adjacency": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "labelMinor": {
          "type": "string"
        },
        "metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.MetadataRow"
          }
        },
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.MetricRow"
          }
        },
        "parents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.Parent"
          }
        },
        "pseudo": {
          "type": "boolean"
        },
        "rank": {
          "type": "string"
        },
        "shape": {
          "type": "string"
        },
        "stack": {
          "type": "boolean"
        },
        "tables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.Table"
          }
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "v1alpha2.NodeSummaryGroup": {
      "required": [
        "id",
        "label",
        "nodes",
        "topologyId",
        "columns"
      ],
      "properties": {
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.Column"
          }
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.NodeSummary"
          }
        },
        "topologyId": {
          "type": "string"
        }
      }
    },
    "v1alpha2.NotFoundError": {
      "required": [
        "status",
        "reason"
      ],
      "properties": {
        "reason": {
          "$ref": "#/definitions/error"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha2.Parent": {
      "required": [
        "id",
        "label",
        "topologyId"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "topologyId": {
          "type": "string"
        }
      }
    },
    "v1alpha2.Row": {
      "required": [
        "id",
        "entries"
      ],
      "properties": {
        "entries": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1alpha2.Sample": {
      "required": [
        "date",
        "value"
      ],
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "v1alpha2.Table": {
      "required": [
        "id",
        "label",
        "type",
        "columns",
        "rows"
      ],
      "properties": {
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.Column"
          }
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha2.Row"
          }
        },
        "truncationCount": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1alpha2.TopologyResponse": {
      "required": [
        "nodes"
      ],
      "properties": {
        "nodes": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1alpha2.NodeSummary"
          }
        }
      }
    },
    "v1alpha2.User": {
      "required": [
        "spec"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha2.UserSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha2.UserStatus"
        }
      }
    },
    "v1alpha2.UserSpec": {
      "required": [
        "email"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lang": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "v1alpha2.UserStatus": {
      "properties": {
        "lastLoginTime": {
          "type": "string"
        },
        "lastTransitionTime": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha2.WorkspaceRole": {
      "required": [
        "rules"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "rules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.PolicyRule"
          }
        }
      }
    },
    "v1alpha2.WorkspaceTemplate": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1beta1.FederatedWorkspaceSpec"
        }
      }
    },
    "v1alpha2.appHealthResponse": {
      "required": [
        "workloadStatuses",
        "requests"
      ],
      "properties": {
        "requests": {
          "$ref": "#/definitions/models.RequestHealth"
        },
        "workloadStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/models.WorkloadStatus"
          }
        }
      }
    },
    "v1alpha2.graphResponse": {
      "required": [
        "duration",
        "graphType",
        "elements",
        "timestamp"
      ],
      "properties": {
        "duration": {
          "type": "integer",
          "format": "int64"
        },
        "elements": {
          "$ref": "#/definitions/cytoscape.Elements"
        },
        "graphType": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1alpha2.metricsResponse": {
      "required": [
        "metrics",
        "histograms"
      ],
      "properties": {
        "histograms": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/prometheus.Metrics.histograms"
          }
        },
        "metrics": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/prometheus.Metric"
          }
        }
      }
    },
    "v1alpha2.namespaceAppHealthResponse": {
      "required": [
        "NamespaceAppHealth"
      ],
      "properties": {
        "NamespaceAppHealth": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/models.AppHealth"
          }
        }
      }
    },
    "v1alpha2.serviceHealthResponse": {
      "required": [
        "requests"
      ],
      "properties": {
        "requests": {
          "$ref": "#/definitions/models.RequestHealth"
        }
      }
    },
    "v1alpha2.workloadHealthResponse": {
      "required": [
        "workloadStatus",
        "requests"
      ],
      "properties": {
        "requests": {
          "$ref": "#/definitions/models.RequestHealth"
        },
        "workloadStatus": {
          "$ref": "#/definitions/models.WorkloadStatus"
        }
      }
    },
    "v1alpha3.BitbucketServerSource": {
      "properties": {
        "api_uri": {
          "description": "The api url can specify the location of the github apiserver.For private cloud configuration",
          "type": "string"
        },
        "credential_id": {
          "description": "credential id to access github source",
          "type": "string"
        },
        "discover_branches": {
          "description": "Discover branch configuration",
          "type": "integer",
          "format": "int32"
        },
        "discover_pr_from_forks": {
          "description": "Discover fork PR configuration",
          "$ref": "#/definitions/v1alpha3.DiscoverPRFromForks"
        },
        "discover_pr_from_origin": {
          "description": "Discover origin PR configuration",
          "type": "integer",
          "format": "int32"
        },
        "git_clone_option": {
          "description": "advavced git clone options",
          "$ref": "#/definitions/v1alpha3.GitCloneOption"
        },
        "owner": {
          "description": "owner of github repo",
          "type": "string"
        },
        "regex_filter": {
          "description": "Regex used to match the name of the branch that needs to be run",
          "type": "string"
        },
        "repo": {
          "description": "repo name of github repo",
          "type": "string"
        },
        "scm_id": {
          "description": "uid of scm",
          "type": "string"
        }
      }
    },
    "v1alpha3.DevOpsProject": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha3.DevOpsProjectSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha3.DevOpsProjectStatus"
        }
      }
    },
    "v1alpha3.DevOpsProjectSpec": {},
    "v1alpha3.DevOpsProjectStatus": {
      "properties": {
        "adminNamespace": {
          "type": "string"
        }
      }
    },
    "v1alpha3.DiscarderProperty": {
      "properties": {
        "days_to_keep": {
          "description": "days to keep pipeline",
          "type": "string"
        },
        "num_to_keep": {
          "description": "nums to keep pipeline",
          "type": "string"
        }
      }
    },
    "v1alpha3.DiscoverPRFromForks": {
      "properties": {
        "strategy": {
          "description": "github discover strategy",
          "type": "integer",
          "format": "int32"
        },
        "trust": {
          "description": "trust user type",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha3.GitCloneOption": {
      "properties": {
        "depth": {
          "description": "git clone depth",
          "type": "integer",
          "format": "int32"
        },
        "shallow": {
          "description": "Whether to use git shallow clone",
          "type": "boolean"
        },
        "timeout": {
          "description": "git clone timeout mins",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha3.GitSource": {
      "properties": {
        "credential_id": {
          "description": "credential id to access git source",
          "type": "string"
        },
        "discover_branches": {
          "description": "Whether to discover a branch",
          "type": "boolean"
        },
        "git_clone_option": {
          "description": "advavced git clone options",
          "$ref": "#/definitions/v1alpha3.GitCloneOption"
        },
        "regex_filter": {
          "description": "Regex used to match the name of the branch that needs to be run",
          "type": "string"
        },
        "scm_id": {
          "description": "uid of scm",
          "type": "string"
        },
        "url": {
          "description": "url of git source",
          "type": "string"
        }
      }
    },
    "v1alpha3.GithubSource": {
      "properties": {
        "api_uri": {
          "description": "The api url can specify the location of the github apiserver.For private cloud configuration",
          "type": "string"
        },
        "credential_id": {
          "description": "credential id to access github source",
          "type": "string"
        },
        "discover_branches": {
          "description": "Discover branch configuration",
          "type": "integer",
          "format": "int32"
        },
        "discover_pr_from_forks": {
          "description": "Discover fork PR configuration",
          "$ref": "#/definitions/v1alpha3.DiscoverPRFromForks"
        },
        "discover_pr_from_origin": {
          "description": "Discover origin PR configuration",
          "type": "integer",
          "format": "int32"
        },
        "git_clone_option": {
          "description": "advavced git clone options",
          "$ref": "#/definitions/v1alpha3.GitCloneOption"
        },
        "owner": {
          "description": "owner of github repo",
          "type": "string"
        },
        "regex_filter": {
          "description": "Regex used to match the name of the branch that needs to be run",
          "type": "string"
        },
        "repo": {
          "description": "repo name of github repo",
          "type": "string"
        },
        "scm_id": {
          "description": "uid of scm",
          "type": "string"
        }
      }
    },
    "v1alpha3.MultiBranchJobTrigger": {
      "properties": {
        "create_action_job_to_trigger": {
          "description": "pipeline name to trigger",
          "type": "string"
        },
        "delete_action_job_to_trigger": {
          "description": "pipeline name to trigger",
          "type": "string"
        }
      }
    },
    "v1alpha3.MultiBranchPipeline": {
      "required": [
        "name",
        "source_type",
        "script_path"
      ],
      "properties": {
        "bitbucket_server_source": {
          "description": "bitbucket server scm defile",
          "$ref": "#/definitions/v1alpha3.BitbucketServerSource"
        },
        "description": {
          "description": "description of pipeline",
          "type": "string"
        },
        "discarder": {
          "description": "Discarder of pipeline, managing when to drop a pipeline",
          "$ref": "#/definitions/v1alpha3.DiscarderProperty"
        },
        "git_source": {
          "description": "git scm define",
          "$ref": "#/definitions/v1alpha3.GitSource"
        },
        "github_source": {
          "description": "github scm define",
          "$ref": "#/definitions/v1alpha3.GithubSource"
        },
        "multibranch_job_trigger": {
          "description": "Pipeline tasks that need to be triggered when branch creation/deletion",
          "$ref": "#/definitions/v1alpha3.MultiBranchJobTrigger"
        },
        "name": {
          "description": "name of pipeline",
          "type": "string"
        },
        "script_path": {
          "description": "script path in scm",
          "type": "string"
        },
        "single_svn_source": {
          "description": "single branch svn scm define",
          "$ref": "#/definitions/v1alpha3.SingleSvnSource"
        },
        "source_type": {
          "description": "type of scm, such as github/git/svn",
          "type": "string"
        },
        "svn_source": {
          "description": "multi branch svn scm define",
          "$ref": "#/definitions/v1alpha3.SvnSource"
        },
        "timer_trigger": {
          "description": "Timer to trigger pipeline run",
          "$ref": "#/definitions/v1alpha3.TimerTrigger"
        }
      }
    },
    "v1alpha3.NoScmPipeline": {
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "description": "description of pipeline",
          "type": "string"
        },
        "disable_concurrent": {
          "description": "Whether to prohibit the pipeline from running in parallel",
          "type": "boolean"
        },
        "discarder": {
          "description": "Discarder of pipeline, managing when to drop a pipeline",
          "$ref": "#/definitions/v1alpha3.DiscarderProperty"
        },
        "jenkinsfile": {
          "description": "Jenkinsfile's content'",
          "type": "string"
        },
        "name": {
          "description": "name of pipeline",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters define of pipeline,user could pass param when run pipeline",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha3.Parameter"
          }
        },
        "remote_trigger": {
          "description": "Remote api define to trigger pipeline run",
          "$ref": "#/definitions/v1alpha3.RemoteTrigger"
        },
        "timer_trigger": {
          "description": "Timer to trigger pipeline run",
          "$ref": "#/definitions/v1alpha3.TimerTrigger"
        }
      }
    },
    "v1alpha3.Parameter": {
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "default_value": {
          "description": "default value of param",
          "type": "string"
        },
        "description": {
          "description": "description of pipeline",
          "type": "string"
        },
        "name": {
          "description": "name of param",
          "type": "string"
        },
        "type": {
          "description": "type of param",
          "type": "string"
        }
      }
    },
    "v1alpha3.Pipeline": {
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha3.PipelineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha3.PipelineStatus"
        }
      }
    },
    "v1alpha3.PipelineSpec": {
      "required": [
        "type"
      ],
      "properties": {
        "multi_branch_pipeline": {
          "description": "in scm pipeline structs",
          "$ref": "#/definitions/v1alpha3.MultiBranchPipeline"
        },
        "pipeline": {
          "description": "no scm pipeline structs",
          "$ref": "#/definitions/v1alpha3.NoScmPipeline"
        },
        "type": {
          "description": "type of devops pipeline, in scm or no scm",
          "type": "string"
        }
      }
    },
    "v1alpha3.PipelineStatus": {},
    "v1alpha3.RemoteTrigger": {
      "properties": {
        "token": {
          "description": "remote trigger token",
          "type": "string"
        }
      }
    },
    "v1alpha3.SingleSvnSource": {
      "properties": {
        "credential_id": {
          "description": "credential id to access svn source",
          "type": "string"
        },
        "remote": {
          "description": "remote address url",
          "type": "string"
        },
        "scm_id": {
          "description": "uid of scm",
          "type": "string"
        }
      }
    },
    "v1alpha3.SvnSource": {
      "properties": {
        "credential_id": {
          "description": "credential id to access svn source",
          "type": "string"
        },
        "excludes": {
          "description": "branches do not run pipeline",
          "type": "string"
        },
        "includes": {
          "description": "branches to run pipeline",
          "type": "string"
        },
        "remote": {
          "description": "remote address url",
          "type": "string"
        },
        "scm_id": {
          "description": "uid of scm",
          "type": "string"
        }
      }
    },
    "v1alpha3.TimerTrigger": {
      "properties": {
        "cron": {
          "description": "jenkins cron script",
          "type": "string"
        },
        "interval": {
          "description": "interval ms",
          "type": "string"
        }
      }
    },
    "v1beta1.ClusterOverride": {
      "required": [
        "path"
      ],
      "properties": {
        "op": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1beta1.FederatedWorkspaceSpec": {
      "required": [
        "template",
        "placement"
      ],
      "properties": {
        "overrides": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1beta1.GenericOverrideItem"
          }
        },
        "placement": {
          "$ref": "#/definitions/v1beta1.GenericPlacementFields"
        },
        "template": {
          "$ref": "#/definitions/v1beta1.WorkspaceTemplate"
        }
      }
    },
    "v1beta1.GenericClusterReference": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1beta1.GenericOverrideItem": {
      "required": [
        "clusterName"
      ],
      "properties": {
        "clusterName": {
          "type": "string"
        },
        "clusterOverrides": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1beta1.ClusterOverride"
          }
        }
      }
    },
    "v1beta1.GenericPlacementFields": {
      "properties": {
        "clusterSelector": {
          "$ref": "#/definitions/v1.LabelSelector"
        },
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1beta1.GenericClusterReference"
          }
        }
      }
    },
    "v1beta1.WorkspaceTemplate": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.WorkspaceSpec"
        }
      }
    }
  },
  "securityDefinitions": {
    "jwt": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "jwt": []
    }
  ]
}