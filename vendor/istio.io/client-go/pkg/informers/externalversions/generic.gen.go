// Code generated by informer-gen. DO NOT EDIT.

package externalversions

import (
	"fmt"

	v1alpha1 "istio.io/client-go/pkg/apis/authentication/v1alpha1"
	v1alpha2 "istio.io/client-go/pkg/apis/config/v1alpha2"
	v1alpha3 "istio.io/client-go/pkg/apis/networking/v1alpha3"
	rbacv1alpha1 "istio.io/client-go/pkg/apis/rbac/v1alpha1"
	v1beta1 "istio.io/client-go/pkg/apis/security/v1beta1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	cache "k8s.io/client-go/tools/cache"
)

// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
// sharedInformers based on type
type GenericInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() cache.GenericLister
}

type genericInformer struct {
	informer cache.SharedIndexInformer
	resource schema.GroupResource
}

// Informer returns the SharedIndexInformer.
func (f *genericInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

// Lister returns the GenericLister.
func (f *genericInformer) Lister() cache.GenericLister {
	return cache.NewGenericLister(f.Informer().GetIndexer(), f.resource)
}

// ForResource gives generic access to a shared informer of the matching type
// TODO extend this to unknown resources with a client pool
func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
	switch resource {
	// Group=authentication, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithResource("meshpolicies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Authentication().V1alpha1().MeshPolicies().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("policies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Authentication().V1alpha1().Policies().Informer()}, nil

		// Group=config, Version=v1alpha2
	case v1alpha2.SchemeGroupVersion.WithResource("attributemanifests"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Config().V1alpha2().AttributeManifests().Informer()}, nil
	case v1alpha2.SchemeGroupVersion.WithResource("httpapispecs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Config().V1alpha2().HTTPAPISpecs().Informer()}, nil
	case v1alpha2.SchemeGroupVersion.WithResource("httpapispecbindings"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Config().V1alpha2().HTTPAPISpecBindings().Informer()}, nil
	case v1alpha2.SchemeGroupVersion.WithResource("handlers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Config().V1alpha2().Handlers().Informer()}, nil
	case v1alpha2.SchemeGroupVersion.WithResource("instances"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Config().V1alpha2().Instances().Informer()}, nil
	case v1alpha2.SchemeGroupVersion.WithResource("quotaspecs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Config().V1alpha2().QuotaSpecs().Informer()}, nil
	case v1alpha2.SchemeGroupVersion.WithResource("quotaspecbindings"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Config().V1alpha2().QuotaSpecBindings().Informer()}, nil
	case v1alpha2.SchemeGroupVersion.WithResource("rules"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Config().V1alpha2().Rules().Informer()}, nil

		// Group=networking, Version=v1alpha3
	case v1alpha3.SchemeGroupVersion.WithResource("destinationrules"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Networking().V1alpha3().DestinationRules().Informer()}, nil
	case v1alpha3.SchemeGroupVersion.WithResource("envoyfilters"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Networking().V1alpha3().EnvoyFilters().Informer()}, nil
	case v1alpha3.SchemeGroupVersion.WithResource("gateways"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Networking().V1alpha3().Gateways().Informer()}, nil
	case v1alpha3.SchemeGroupVersion.WithResource("serviceentries"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Networking().V1alpha3().ServiceEntries().Informer()}, nil
	case v1alpha3.SchemeGroupVersion.WithResource("sidecars"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Networking().V1alpha3().Sidecars().Informer()}, nil
	case v1alpha3.SchemeGroupVersion.WithResource("virtualservices"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Networking().V1alpha3().VirtualServices().Informer()}, nil

		// Group=rbac, Version=v1alpha1
	case rbacv1alpha1.SchemeGroupVersion.WithResource("clusterrbacconfigs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Rbac().V1alpha1().ClusterRbacConfigs().Informer()}, nil
	case rbacv1alpha1.SchemeGroupVersion.WithResource("rbacconfigs"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Rbac().V1alpha1().RbacConfigs().Informer()}, nil
	case rbacv1alpha1.SchemeGroupVersion.WithResource("serviceroles"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Rbac().V1alpha1().ServiceRoles().Informer()}, nil
	case rbacv1alpha1.SchemeGroupVersion.WithResource("servicerolebindings"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Rbac().V1alpha1().ServiceRoleBindings().Informer()}, nil

		// Group=security, Version=v1beta1
	case v1beta1.SchemeGroupVersion.WithResource("authorizationpolicies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Security().V1beta1().AuthorizationPolicies().Informer()}, nil

	}

	return nil, fmt.Errorf("no informer found for %v", resource)
}
