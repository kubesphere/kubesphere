// Code generated by protoc-gen-go. DO NOT EDIT.
// source: task.proto

package pb

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateTaskRequest struct {
	// id of job(jod will split to one more task) to split
	JobId *wrappers.StringValue `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// node(task run in node) id
	NodeId *wrappers.StringValue `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// describe where the task running eg.[runtime|pilot]
	Target *wrappers.StringValue `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// directive, a kv string, describe the info of running the action
	TaskAction *wrappers.StringValue `protobuf:"bytes,4,opt,name=task_action,json=taskAction,proto3" json:"task_action,omitempty"`
	// describe the action of the task eg.[WaitFrontgateAvailable|PingFrontgate|AttachVolumes|StartInstances|...]
	Directive *wrappers.StringValue `protobuf:"bytes,5,opt,name=directive,proto3" json:"directive,omitempty"`
	// allow failure or not
	FailureAllowed *wrappers.BoolValue `protobuf:"bytes,6,opt,name=failure_allowed,json=failureAllowed,proto3" json:"failure_allowed,omitempty"`
	// task status eg.[running|success|failed|pending]
	Status               *wrappers.StringValue `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CreateTaskRequest) Reset()         { *m = CreateTaskRequest{} }
func (m *CreateTaskRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTaskRequest) ProtoMessage()    {}
func (*CreateTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{0}
}

func (m *CreateTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTaskRequest.Unmarshal(m, b)
}
func (m *CreateTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTaskRequest.Marshal(b, m, deterministic)
}
func (m *CreateTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTaskRequest.Merge(m, src)
}
func (m *CreateTaskRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTaskRequest.Size(m)
}
func (m *CreateTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTaskRequest proto.InternalMessageInfo

func (m *CreateTaskRequest) GetJobId() *wrappers.StringValue {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *CreateTaskRequest) GetNodeId() *wrappers.StringValue {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *CreateTaskRequest) GetTarget() *wrappers.StringValue {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *CreateTaskRequest) GetTaskAction() *wrappers.StringValue {
	if m != nil {
		return m.TaskAction
	}
	return nil
}

func (m *CreateTaskRequest) GetDirective() *wrappers.StringValue {
	if m != nil {
		return m.Directive
	}
	return nil
}

func (m *CreateTaskRequest) GetFailureAllowed() *wrappers.BoolValue {
	if m != nil {
		return m.FailureAllowed
	}
	return nil
}

func (m *CreateTaskRequest) GetStatus() *wrappers.StringValue {
	if m != nil {
		return m.Status
	}
	return nil
}

type CreateTaskResponse struct {
	// id of task created
	TaskId *wrappers.StringValue `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// id of job created
	JobId                *wrappers.StringValue `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CreateTaskResponse) Reset()         { *m = CreateTaskResponse{} }
func (m *CreateTaskResponse) String() string { return proto.CompactTextString(m) }
func (*CreateTaskResponse) ProtoMessage()    {}
func (*CreateTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{1}
}

func (m *CreateTaskResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTaskResponse.Unmarshal(m, b)
}
func (m *CreateTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTaskResponse.Marshal(b, m, deterministic)
}
func (m *CreateTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTaskResponse.Merge(m, src)
}
func (m *CreateTaskResponse) XXX_Size() int {
	return xxx_messageInfo_CreateTaskResponse.Size(m)
}
func (m *CreateTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTaskResponse proto.InternalMessageInfo

func (m *CreateTaskResponse) GetTaskId() *wrappers.StringValue {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *CreateTaskResponse) GetJobId() *wrappers.StringValue {
	if m != nil {
		return m.JobId
	}
	return nil
}

type RetryTasksRequest struct {
	// ids of task to retry
	TaskId               []string `protobuf:"bytes,1,rep,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RetryTasksRequest) Reset()         { *m = RetryTasksRequest{} }
func (m *RetryTasksRequest) String() string { return proto.CompactTextString(m) }
func (*RetryTasksRequest) ProtoMessage()    {}
func (*RetryTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{2}
}

func (m *RetryTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RetryTasksRequest.Unmarshal(m, b)
}
func (m *RetryTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RetryTasksRequest.Marshal(b, m, deterministic)
}
func (m *RetryTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetryTasksRequest.Merge(m, src)
}
func (m *RetryTasksRequest) XXX_Size() int {
	return xxx_messageInfo_RetryTasksRequest.Size(m)
}
func (m *RetryTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetryTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetryTasksRequest proto.InternalMessageInfo

func (m *RetryTasksRequest) GetTaskId() []string {
	if m != nil {
		return m.TaskId
	}
	return nil
}

type RetryTasksResponse struct {
	// list of task retried
	TaskSet              []*Task  `protobuf:"bytes,1,rep,name=task_set,json=taskSet,proto3" json:"task_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RetryTasksResponse) Reset()         { *m = RetryTasksResponse{} }
func (m *RetryTasksResponse) String() string { return proto.CompactTextString(m) }
func (*RetryTasksResponse) ProtoMessage()    {}
func (*RetryTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{3}
}

func (m *RetryTasksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RetryTasksResponse.Unmarshal(m, b)
}
func (m *RetryTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RetryTasksResponse.Marshal(b, m, deterministic)
}
func (m *RetryTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetryTasksResponse.Merge(m, src)
}
func (m *RetryTasksResponse) XXX_Size() int {
	return xxx_messageInfo_RetryTasksResponse.Size(m)
}
func (m *RetryTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetryTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetryTasksResponse proto.InternalMessageInfo

func (m *RetryTasksResponse) GetTaskSet() []*Task {
	if m != nil {
		return m.TaskSet
	}
	return nil
}

type TaskLayer struct {
	// task in task layer, a task layer contain one more task
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	// a task layer point to another task layer
	Child                *TaskLayer `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TaskLayer) Reset()         { *m = TaskLayer{} }
func (m *TaskLayer) String() string { return proto.CompactTextString(m) }
func (*TaskLayer) ProtoMessage()    {}
func (*TaskLayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{4}
}

func (m *TaskLayer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskLayer.Unmarshal(m, b)
}
func (m *TaskLayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskLayer.Marshal(b, m, deterministic)
}
func (m *TaskLayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskLayer.Merge(m, src)
}
func (m *TaskLayer) XXX_Size() int {
	return xxx_messageInfo_TaskLayer.Size(m)
}
func (m *TaskLayer) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskLayer.DiscardUnknown(m)
}

var xxx_messageInfo_TaskLayer proto.InternalMessageInfo

func (m *TaskLayer) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *TaskLayer) GetChild() *TaskLayer {
	if m != nil {
		return m.Child
	}
	return nil
}

type Task struct {
	// task id
	TaskId *wrappers.StringValue `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// job id,job will be split to one more task
	JobId *wrappers.StringValue `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// describe the action of the task eg.[WaitFrontgateAvailable|PingFrontgate|AttachVolumes|StartInstances|...]
	TaskAction *wrappers.StringValue `protobuf:"bytes,3,opt,name=task_action,json=taskAction,proto3" json:"task_action,omitempty"`
	// task status eg.[running|successful|failed|pending]
	Status *wrappers.StringValue `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// error code
	ErrorCode *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// directive,a json string, describe the info of running the task action
	Directive *wrappers.StringValue `protobuf:"bytes,6,opt,name=directive,proto3" json:"directive,omitempty"`
	// host name of server
	Executor *wrappers.StringValue `protobuf:"bytes,7,opt,name=executor,proto3" json:"executor,omitempty"`
	// owner path, concat string group_path:user_id
	OwnerPath *wrappers.StringValue `protobuf:"bytes,8,opt,name=owner_path,json=ownerPath,proto3" json:"owner_path,omitempty"`
	// describe where the task running eg.[runtime|pilot]
	Target *wrappers.StringValue `protobuf:"bytes,9,opt,name=target,proto3" json:"target,omitempty"`
	// the cluster contain one more node
	NodeId *wrappers.StringValue `protobuf:"bytes,10,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// the time when task create
	CreateTime *timestamp.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// record the status changed time
	StatusTime *timestamp.Timestamp `protobuf:"bytes,12,opt,name=status_time,json=statusTime,proto3" json:"status_time,omitempty"`
	// allow task run failed or not
	FailureAllowed *wrappers.BoolValue `protobuf:"bytes,13,opt,name=failure_allowed,json=failureAllowed,proto3" json:"failure_allowed,omitempty"`
	// owner
	Owner                *wrappers.StringValue `protobuf:"bytes,14,opt,name=owner,proto3" json:"owner,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{5}
}

func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetTaskId() *wrappers.StringValue {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *Task) GetJobId() *wrappers.StringValue {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *Task) GetTaskAction() *wrappers.StringValue {
	if m != nil {
		return m.TaskAction
	}
	return nil
}

func (m *Task) GetStatus() *wrappers.StringValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Task) GetErrorCode() *wrappers.UInt32Value {
	if m != nil {
		return m.ErrorCode
	}
	return nil
}

func (m *Task) GetDirective() *wrappers.StringValue {
	if m != nil {
		return m.Directive
	}
	return nil
}

func (m *Task) GetExecutor() *wrappers.StringValue {
	if m != nil {
		return m.Executor
	}
	return nil
}

func (m *Task) GetOwnerPath() *wrappers.StringValue {
	if m != nil {
		return m.OwnerPath
	}
	return nil
}

func (m *Task) GetTarget() *wrappers.StringValue {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Task) GetNodeId() *wrappers.StringValue {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *Task) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Task) GetStatusTime() *timestamp.Timestamp {
	if m != nil {
		return m.StatusTime
	}
	return nil
}

func (m *Task) GetFailureAllowed() *wrappers.BoolValue {
	if m != nil {
		return m.FailureAllowed
	}
	return nil
}

func (m *Task) GetOwner() *wrappers.StringValue {
	if m != nil {
		return m.Owner
	}
	return nil
}

type DescribeTasksRequest struct {
	// query key, support these fields(job_id, task_id, executor, status, owner)
	SearchWord *wrappers.StringValue `protobuf:"bytes,1,opt,name=search_word,json=searchWord,proto3" json:"search_word,omitempty"`
	// sort key, order by sort_key, default create_time
	SortKey *wrappers.StringValue `protobuf:"bytes,2,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
	// value = 0 sort ASC, value = 1 sort DESC
	Reverse *wrappers.BoolValue `protobuf:"bytes,3,opt,name=reverse,proto3" json:"reverse,omitempty"`
	// data limit per page, default value 20, max value 200
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// data offset, default 0
	Offset uint32 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// select columns to display
	DisplayColumns []string `protobuf:"bytes,6,rep,name=display_columns,json=displayColumns,proto3" json:"display_columns,omitempty"`
	// task ids
	TaskId []string `protobuf:"bytes,11,rep,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// job ids
	JobId []string `protobuf:"bytes,12,rep,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// host name of server
	Executor *wrappers.StringValue `protobuf:"bytes,13,opt,name=executor,proto3" json:"executor,omitempty"`
	// target eg.[runtime|pilot]
	Target *wrappers.StringValue `protobuf:"bytes,14,opt,name=target,proto3" json:"target,omitempty"`
	// task status eg.[running|successful|failed|pending]
	Status []string `protobuf:"bytes,15,rep,name=status,proto3" json:"status,omitempty"`
	// owner
	Owner                []string `protobuf:"bytes,16,rep,name=owner,proto3" json:"owner,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DescribeTasksRequest) Reset()         { *m = DescribeTasksRequest{} }
func (m *DescribeTasksRequest) String() string { return proto.CompactTextString(m) }
func (*DescribeTasksRequest) ProtoMessage()    {}
func (*DescribeTasksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{6}
}

func (m *DescribeTasksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeTasksRequest.Unmarshal(m, b)
}
func (m *DescribeTasksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeTasksRequest.Marshal(b, m, deterministic)
}
func (m *DescribeTasksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeTasksRequest.Merge(m, src)
}
func (m *DescribeTasksRequest) XXX_Size() int {
	return xxx_messageInfo_DescribeTasksRequest.Size(m)
}
func (m *DescribeTasksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeTasksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeTasksRequest proto.InternalMessageInfo

func (m *DescribeTasksRequest) GetSearchWord() *wrappers.StringValue {
	if m != nil {
		return m.SearchWord
	}
	return nil
}

func (m *DescribeTasksRequest) GetSortKey() *wrappers.StringValue {
	if m != nil {
		return m.SortKey
	}
	return nil
}

func (m *DescribeTasksRequest) GetReverse() *wrappers.BoolValue {
	if m != nil {
		return m.Reverse
	}
	return nil
}

func (m *DescribeTasksRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DescribeTasksRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DescribeTasksRequest) GetDisplayColumns() []string {
	if m != nil {
		return m.DisplayColumns
	}
	return nil
}

func (m *DescribeTasksRequest) GetTaskId() []string {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *DescribeTasksRequest) GetJobId() []string {
	if m != nil {
		return m.JobId
	}
	return nil
}

func (m *DescribeTasksRequest) GetExecutor() *wrappers.StringValue {
	if m != nil {
		return m.Executor
	}
	return nil
}

func (m *DescribeTasksRequest) GetTarget() *wrappers.StringValue {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *DescribeTasksRequest) GetStatus() []string {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DescribeTasksRequest) GetOwner() []string {
	if m != nil {
		return m.Owner
	}
	return nil
}

type DescribeTasksResponse struct {
	// total count of task
	TotalCount uint32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// list of task
	TaskSet              []*Task  `protobuf:"bytes,2,rep,name=task_set,json=taskSet,proto3" json:"task_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DescribeTasksResponse) Reset()         { *m = DescribeTasksResponse{} }
func (m *DescribeTasksResponse) String() string { return proto.CompactTextString(m) }
func (*DescribeTasksResponse) ProtoMessage()    {}
func (*DescribeTasksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{7}
}

func (m *DescribeTasksResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeTasksResponse.Unmarshal(m, b)
}
func (m *DescribeTasksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeTasksResponse.Marshal(b, m, deterministic)
}
func (m *DescribeTasksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeTasksResponse.Merge(m, src)
}
func (m *DescribeTasksResponse) XXX_Size() int {
	return xxx_messageInfo_DescribeTasksResponse.Size(m)
}
func (m *DescribeTasksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeTasksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeTasksResponse proto.InternalMessageInfo

func (m *DescribeTasksResponse) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *DescribeTasksResponse) GetTaskSet() []*Task {
	if m != nil {
		return m.TaskSet
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateTaskRequest)(nil), "openpitrix.CreateTaskRequest")
	proto.RegisterType((*CreateTaskResponse)(nil), "openpitrix.CreateTaskResponse")
	proto.RegisterType((*RetryTasksRequest)(nil), "openpitrix.RetryTasksRequest")
	proto.RegisterType((*RetryTasksResponse)(nil), "openpitrix.RetryTasksResponse")
	proto.RegisterType((*TaskLayer)(nil), "openpitrix.TaskLayer")
	proto.RegisterType((*Task)(nil), "openpitrix.Task")
	proto.RegisterType((*DescribeTasksRequest)(nil), "openpitrix.DescribeTasksRequest")
	proto.RegisterType((*DescribeTasksResponse)(nil), "openpitrix.DescribeTasksResponse")
}

func init() { proto.RegisterFile("task.proto", fileDescriptor_ce5d8dd45b4a91ff) }

var fileDescriptor_ce5d8dd45b4a91ff = []byte{
	// 950 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x41, 0x8f, 0xdb, 0x44,
	0x14, 0x56, 0x92, 0x8d, 0x77, 0xf3, 0xdc, 0xec, 0xb6, 0xa3, 0xdd, 0x62, 0x45, 0xa5, 0x35, 0x3e,
	0xc0, 0xd2, 0xa6, 0x89, 0xc8, 0x16, 0x81, 0x5a, 0xf5, 0x90, 0x06, 0x09, 0xad, 0x0a, 0x12, 0x4a,
	0x0b, 0x48, 0x5c, 0xcc, 0xc4, 0x7e, 0x49, 0xdc, 0x75, 0x3c, 0x66, 0x66, 0xbc, 0x69, 0x6e, 0xc0,
	0x4f, 0x28, 0x3f, 0x03, 0x89, 0x2b, 0x3f, 0x84, 0x0b, 0x3f, 0x80, 0x0b, 0xff, 0x02, 0xcd, 0x8c,
	0xb3, 0x71, 0x36, 0xdd, 0xae, 0x73, 0xe1, 0x14, 0xf9, 0xcd, 0xf7, 0xcd, 0xbc, 0x79, 0xef, 0x7b,
	0xdf, 0x04, 0x40, 0x52, 0x71, 0xd6, 0x49, 0x39, 0x93, 0x8c, 0x00, 0x4b, 0x31, 0x49, 0x23, 0xc9,
	0xa3, 0xd7, 0xad, 0xbb, 0x13, 0xc6, 0x26, 0x31, 0x76, 0xf5, 0xca, 0x28, 0x1b, 0x77, 0xe7, 0x9c,
	0xa6, 0x29, 0x72, 0x61, 0xb0, 0xad, 0x7b, 0x97, 0xd7, 0x65, 0x34, 0x43, 0x21, 0xe9, 0x2c, 0xcd,
	0x01, 0x77, 0x72, 0x00, 0x4d, 0xa3, 0x2e, 0x4d, 0x12, 0x26, 0xa9, 0x8c, 0x58, 0xb2, 0xa4, 0xb7,
	0xf5, 0x4f, 0xf0, 0x70, 0x82, 0xc9, 0x43, 0x31, 0xa7, 0x93, 0x09, 0xf2, 0x2e, 0x4b, 0x35, 0x62,
	0x13, 0xed, 0xfd, 0x5e, 0x83, 0x5b, 0x03, 0x8e, 0x54, 0xe2, 0x4b, 0x2a, 0xce, 0x86, 0xf8, 0x53,
	0x86, 0x42, 0x92, 0x13, 0xb0, 0x5e, 0xb1, 0x91, 0x1f, 0x85, 0x4e, 0xc5, 0xad, 0x1c, 0xdb, 0xbd,
	0x3b, 0x1d, 0x73, 0x64, 0x67, 0x99, 0x53, 0xe7, 0x85, 0xe4, 0x51, 0x32, 0xf9, 0x8e, 0xc6, 0x19,
	0x0e, 0xeb, 0xaf, 0xd8, 0xe8, 0x34, 0x24, 0x9f, 0xc2, 0x6e, 0xc2, 0x42, 0x54, 0xac, 0x6a, 0x09,
	0x96, 0xa5, 0xc0, 0xa7, 0x21, 0x79, 0x04, 0x96, 0xa4, 0x7c, 0x82, 0xd2, 0xa9, 0x95, 0x61, 0x19,
	0x2c, 0x79, 0x0a, 0xb6, 0x2a, 0xaf, 0x4f, 0x03, 0x75, 0x1b, 0x67, 0xa7, 0x04, 0x55, 0xf7, 0xa3,
	0xaf, 0xf1, 0xe4, 0x31, 0x34, 0xc2, 0x88, 0x63, 0x20, 0xa3, 0x73, 0x74, 0xea, 0x25, 0xc8, 0x2b,
	0x38, 0x19, 0xc0, 0xc1, 0x98, 0x46, 0x71, 0xc6, 0xd1, 0xa7, 0x71, 0xcc, 0xe6, 0x18, 0x3a, 0x96,
	0xde, 0xa1, 0xb5, 0xb1, 0xc3, 0x33, 0xc6, 0x62, 0xc3, 0xdf, 0xcf, 0x29, 0x7d, 0xc3, 0x50, 0xb7,
	0x16, 0x92, 0xca, 0x4c, 0x38, 0xbb, 0x65, 0x6e, 0x6d, 0xb0, 0xde, 0xcf, 0x15, 0x20, 0xc5, 0x6e,
	0x89, 0x94, 0x25, 0x02, 0x55, 0xe5, 0x75, 0x31, 0x4a, 0xf6, 0xcb, 0x52, 0xe0, 0xd3, 0xb0, 0xd0,
	0xe5, 0x6a, 0xe9, 0x2e, 0x7b, 0x6d, 0xb8, 0x35, 0x44, 0xc9, 0x17, 0x2a, 0x01, 0xb1, 0xd4, 0xcb,
	0x7b, 0xc5, 0x04, 0x6a, 0xc7, 0x8d, 0xe5, 0x11, 0x5e, 0x1f, 0x48, 0x11, 0x9d, 0xe7, 0xfb, 0x00,
	0xf6, 0x34, 0x5c, 0xa0, 0xd4, 0x78, 0xbb, 0x77, 0xb3, 0xb3, 0x1a, 0x90, 0x8e, 0xbe, 0x9b, 0xde,
	0xf0, 0x05, 0x4a, 0xef, 0x47, 0x68, 0xa8, 0xc0, 0x57, 0x74, 0x81, 0x9c, 0x7c, 0x08, 0x75, 0x15,
	0x17, 0x57, 0xd2, 0xcc, 0x32, 0x79, 0x00, 0xf5, 0x60, 0x1a, 0xc5, 0xcb, 0x9b, 0x1d, 0x5d, 0xc6,
	0xe9, 0xdd, 0x86, 0x06, 0xe3, 0xfd, 0x69, 0xc1, 0x8e, 0x0a, 0xfe, 0x9f, 0x75, 0xbc, 0x2c, 0xe0,
	0xda, 0x96, 0x02, 0x5e, 0xe9, 0x67, 0xa7, 0xbc, 0x7e, 0xc8, 0x13, 0x00, 0xe4, 0x9c, 0x71, 0x3f,
	0x60, 0xe1, 0xd5, 0xba, 0xff, 0xf6, 0x34, 0x91, 0x27, 0xbd, 0x5c, 0xf7, 0x1a, 0x3f, 0x60, 0x21,
	0xae, 0xcf, 0x8c, 0xb5, 0xdd, 0xcc, 0x7c, 0x0e, 0x7b, 0xf8, 0x1a, 0x83, 0x4c, 0x32, 0x5e, 0x4a,
	0xf0, 0x17, 0x68, 0x95, 0x32, 0x9b, 0x27, 0xc8, 0xfd, 0x94, 0xca, 0xa9, 0xb3, 0x57, 0xe6, 0x58,
	0x8d, 0xff, 0x86, 0xca, 0x69, 0xc1, 0x5b, 0x1a, 0x5b, 0x78, 0x4b, 0xc1, 0xc8, 0x60, 0x0b, 0x23,
	0x7b, 0x02, 0x76, 0xa0, 0x67, 0xd3, 0x57, 0x86, 0xed, 0xd8, 0x57, 0x78, 0xc2, 0xcb, 0xa5, 0x9b,
	0x0f, 0xc1, 0xc0, 0x55, 0x40, 0x91, 0x4d, 0x8f, 0x0c, 0xf9, 0xc6, 0xf5, 0x64, 0x03, 0xd7, 0xe4,
	0xb7, 0x38, 0x52, 0x73, 0x6b, 0x47, 0xea, 0x41, 0x5d, 0x17, 0xce, 0xd9, 0x2f, 0x23, 0x62, 0x0d,
	0xf5, 0xfe, 0xad, 0xc1, 0xe1, 0x17, 0x28, 0x02, 0x1e, 0x8d, 0x70, 0xcd, 0x10, 0x9e, 0x82, 0x2d,
	0x90, 0xf2, 0x60, 0xea, 0xcf, 0x19, 0x2f, 0x37, 0x4d, 0x60, 0x08, 0xdf, 0x33, 0x1e, 0x92, 0xcf,
	0x60, 0x4f, 0x30, 0x2e, 0xfd, 0x33, 0x5c, 0x94, 0x9a, 0xa9, 0x5d, 0x85, 0x7e, 0x8e, 0x0b, 0xf2,
	0x08, 0x76, 0x39, 0x9e, 0x23, 0x17, 0x98, 0x4f, 0xd4, 0xbb, 0x2a, 0xb0, 0x84, 0x92, 0x43, 0xa8,
	0xc7, 0xd1, 0x2c, 0x92, 0x7a, 0x96, 0x9a, 0x43, 0xf3, 0x41, 0x6e, 0x83, 0xc5, 0xc6, 0x63, 0xe5,
	0x51, 0x75, 0x1d, 0xce, 0xbf, 0xc8, 0x47, 0x70, 0x10, 0x46, 0x22, 0x8d, 0xe9, 0xc2, 0x0f, 0x58,
	0x9c, 0xcd, 0x12, 0xe1, 0x58, 0xda, 0xf4, 0xf6, 0xf3, 0xf0, 0xc0, 0x44, 0x8b, 0xae, 0x68, 0x17,
	0x5d, 0x91, 0x1c, 0x5d, 0x18, 0xc6, 0x0d, 0x1d, 0xcf, 0x2d, 0xa1, 0x38, 0x24, 0xcd, 0xad, 0x86,
	0x64, 0xa5, 0xf3, 0xfd, 0x2d, 0x74, 0x7e, 0xfb, 0xc2, 0x43, 0x0e, 0x4c, 0x7a, 0xb9, 0x4b, 0x1c,
	0x2e, 0x95, 0x70, 0xd3, 0x64, 0x67, 0x7a, 0x8d, 0x70, 0x74, 0xa9, 0xd5, 0xb9, 0x9b, 0xdf, 0x03,
	0x5b, 0x32, 0x49, 0x63, 0x3f, 0x60, 0x59, 0x22, 0x75, 0xaf, 0x9b, 0x43, 0xd0, 0xa1, 0x81, 0x8a,
	0xac, 0xd9, 0x7d, 0xf5, 0x1a, 0xbb, 0xef, 0xfd, 0x51, 0x03, 0x5b, 0x45, 0xbe, 0xa6, 0x09, 0x9d,
	0x20, 0x27, 0xcf, 0x01, 0x56, 0x2f, 0x1e, 0x79, 0xbf, 0x48, 0xdc, 0xf8, 0xdf, 0xd2, 0xba, 0x7b,
	0xd5, 0x72, 0x9e, 0xea, 0xdf, 0x15, 0x68, 0xae, 0x5d, 0x82, 0xb8, 0x45, 0xc6, 0xdb, 0xa4, 0xdc,
	0xfa, 0xe0, 0x1d, 0x08, 0xb3, 0xad, 0xf7, 0x4b, 0xe5, 0x4d, 0x7f, 0x46, 0xce, 0xbe, 0x44, 0xe9,
	0xea, 0xe7, 0xa7, 0xed, 0x06, 0x34, 0x71, 0xc7, 0x51, 0x2c, 0x91, 0xbb, 0xf3, 0x48, 0x4e, 0x5d,
	0x39, 0x45, 0x81, 0xee, 0x38, 0xc2, 0x38, 0x14, 0xc7, 0xa6, 0xf7, 0x6d, 0x37, 0x17, 0x47, 0xdb,
	0x5d, 0xf6, 0xb1, 0xed, 0x9a, 0x0e, 0xb4, 0x5d, 0x5d, 0xf2, 0x8f, 0xdb, 0x6e, 0x88, 0x63, 0x9a,
	0xc5, 0xd2, 0xe5, 0x28, 0x33, 0x9e, 0xb8, 0x34, 0x8e, 0xcd, 0x09, 0xbf, 0xfe, 0xf5, 0xcf, 0x6f,
	0x55, 0x9b, 0x34, 0xba, 0xe7, 0x9f, 0x74, 0xcd, 0x8b, 0x37, 0x07, 0x58, 0xbd, 0xb4, 0xeb, 0x75,
	0xda, 0x78, 0xaf, 0xd7, 0xeb, 0xb4, 0xf9, 0x40, 0x7b, 0xf7, 0xdf, 0xf4, 0x9b, 0xc4, 0xd6, 0x0b,
	0x85, 0xf3, 0x0e, 0xbd, 0x83, 0x8b, 0xf3, 0xba, 0x5c, 0x2d, 0x3e, 0xae, 0xdc, 0x7f, 0xb6, 0xf3,
	0x43, 0x35, 0x1d, 0x8d, 0x2c, 0xad, 0xb4, 0x93, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x80,
	0x63, 0x5e, 0xf5, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskManagerClient is the client API for TaskManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskManagerClient interface {
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	// Get tasks, can filter with these fields(job_id, task_id, executor, status, owner), default return all tasks
	DescribeTasks(ctx context.Context, in *DescribeTasksRequest, opts ...grpc.CallOption) (*DescribeTasksResponse, error)
	// Retry tasks
	RetryTasks(ctx context.Context, in *RetryTasksRequest, opts ...grpc.CallOption) (*RetryTasksResponse, error)
}

type taskManagerClient struct {
	cc *grpc.ClientConn
}

func NewTaskManagerClient(cc *grpc.ClientConn) TaskManagerClient {
	return &taskManagerClient{cc}
}

func (c *taskManagerClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.TaskManager/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) DescribeTasks(ctx context.Context, in *DescribeTasksRequest, opts ...grpc.CallOption) (*DescribeTasksResponse, error) {
	out := new(DescribeTasksResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.TaskManager/DescribeTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) RetryTasks(ctx context.Context, in *RetryTasksRequest, opts ...grpc.CallOption) (*RetryTasksResponse, error) {
	out := new(RetryTasksResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.TaskManager/RetryTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskManagerServer is the server API for TaskManager service.
type TaskManagerServer interface {
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	// Get tasks, can filter with these fields(job_id, task_id, executor, status, owner), default return all tasks
	DescribeTasks(context.Context, *DescribeTasksRequest) (*DescribeTasksResponse, error)
	// Retry tasks
	RetryTasks(context.Context, *RetryTasksRequest) (*RetryTasksResponse, error)
}

// UnimplementedTaskManagerServer can be embedded to have forward compatible implementations.
type UnimplementedTaskManagerServer struct {
}

func (*UnimplementedTaskManagerServer) CreateTask(ctx context.Context, req *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (*UnimplementedTaskManagerServer) DescribeTasks(ctx context.Context, req *DescribeTasksRequest) (*DescribeTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTasks not implemented")
}
func (*UnimplementedTaskManagerServer) RetryTasks(ctx context.Context, req *RetryTasksRequest) (*RetryTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryTasks not implemented")
}

func RegisterTaskManagerServer(s *grpc.Server, srv TaskManagerServer) {
	s.RegisterService(&_TaskManager_serviceDesc, srv)
}

func _TaskManager_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.TaskManager/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_DescribeTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).DescribeTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.TaskManager/DescribeTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).DescribeTasks(ctx, req.(*DescribeTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_RetryTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).RetryTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.TaskManager/RetryTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).RetryTasks(ctx, req.(*RetryTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openpitrix.TaskManager",
	HandlerType: (*TaskManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskManager_CreateTask_Handler,
		},
		{
			MethodName: "DescribeTasks",
			Handler:    _TaskManager_DescribeTasks_Handler,
		},
		{
			MethodName: "RetryTasks",
			Handler:    _TaskManager_RetryTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
