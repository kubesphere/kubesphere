// Code generated by protoc-gen-go. DO NOT EDIT.
// source: app.proto

package pb

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UploadAppAttachmentRequest_Type int32

const (
	UploadAppAttachmentRequest_icon       UploadAppAttachmentRequest_Type = 0
	UploadAppAttachmentRequest_screenshot UploadAppAttachmentRequest_Type = 1
)

var UploadAppAttachmentRequest_Type_name = map[int32]string{
	0: "icon",
	1: "screenshot",
}

var UploadAppAttachmentRequest_Type_value = map[string]int32{
	"icon":       0,
	"screenshot": 1,
}

func (x UploadAppAttachmentRequest_Type) String() string {
	return proto.EnumName(UploadAppAttachmentRequest_Type_name, int32(x))
}

func (UploadAppAttachmentRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{6, 0}
}

type CreateAppRequest struct {
	// required, app name
	Name *wrappers.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// optional, vmbased/helm
	VersionType *wrappers.StringValue `protobuf:"bytes,2,opt,name=version_type,json=versionType,proto3" json:"version_type,omitempty"`
	// required, version with specific app package
	VersionPackage *wrappers.BytesValue `protobuf:"bytes,3,opt,name=version_package,json=versionPackage,proto3" json:"version_package,omitempty"`
	// required, version name of the app
	VersionName *wrappers.StringValue `protobuf:"bytes,5,opt,name=version_name,json=versionName,proto3" json:"version_name,omitempty"`
	// app icon
	Icon *wrappers.BytesValue `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	// isv
	Isv *wrappers.StringValue `protobuf:"bytes,7,opt,name=isv,proto3" json:"isv,omitempty"`
	// categories
	Categories           []string `protobuf:"bytes,8,rep,name=categories,proto3" json:"categories,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateAppRequest) Reset()         { *m = CreateAppRequest{} }
func (m *CreateAppRequest) String() string { return proto.CompactTextString(m) }
func (*CreateAppRequest) ProtoMessage()    {}
func (*CreateAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{0}
}

func (m *CreateAppRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateAppRequest.Unmarshal(m, b)
}
func (m *CreateAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateAppRequest.Marshal(b, m, deterministic)
}
func (m *CreateAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAppRequest.Merge(m, src)
}
func (m *CreateAppRequest) XXX_Size() int {
	return xxx_messageInfo_CreateAppRequest.Size(m)
}
func (m *CreateAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAppRequest proto.InternalMessageInfo

func (m *CreateAppRequest) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *CreateAppRequest) GetVersionType() *wrappers.StringValue {
	if m != nil {
		return m.VersionType
	}
	return nil
}

func (m *CreateAppRequest) GetVersionPackage() *wrappers.BytesValue {
	if m != nil {
		return m.VersionPackage
	}
	return nil
}

func (m *CreateAppRequest) GetVersionName() *wrappers.StringValue {
	if m != nil {
		return m.VersionName
	}
	return nil
}

func (m *CreateAppRequest) GetIcon() *wrappers.BytesValue {
	if m != nil {
		return m.Icon
	}
	return nil
}

func (m *CreateAppRequest) GetIsv() *wrappers.StringValue {
	if m != nil {
		return m.Isv
	}
	return nil
}

func (m *CreateAppRequest) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

type CreateAppResponse struct {
	// app id
	AppId *wrappers.StringValue `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// version id of the app
	VersionId            *wrappers.StringValue `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CreateAppResponse) Reset()         { *m = CreateAppResponse{} }
func (m *CreateAppResponse) String() string { return proto.CompactTextString(m) }
func (*CreateAppResponse) ProtoMessage()    {}
func (*CreateAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{1}
}

func (m *CreateAppResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateAppResponse.Unmarshal(m, b)
}
func (m *CreateAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateAppResponse.Marshal(b, m, deterministic)
}
func (m *CreateAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAppResponse.Merge(m, src)
}
func (m *CreateAppResponse) XXX_Size() int {
	return xxx_messageInfo_CreateAppResponse.Size(m)
}
func (m *CreateAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAppResponse proto.InternalMessageInfo

func (m *CreateAppResponse) GetAppId() *wrappers.StringValue {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *CreateAppResponse) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type ValidatePackageRequest struct {
	// optional, vmbased/helm
	VersionType string `protobuf:"bytes,2,opt,name=version_type,json=versionType,proto3" json:"version_type,omitempty"`
	// required, version package eg.[the wordpress-0.0.1.tgz will be encoded to bytes]
	VersionPackage       []byte   `protobuf:"bytes,3,opt,name=version_package,json=versionPackage,proto3" json:"version_package,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidatePackageRequest) Reset()         { *m = ValidatePackageRequest{} }
func (m *ValidatePackageRequest) String() string { return proto.CompactTextString(m) }
func (*ValidatePackageRequest) ProtoMessage()    {}
func (*ValidatePackageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{2}
}

func (m *ValidatePackageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidatePackageRequest.Unmarshal(m, b)
}
func (m *ValidatePackageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidatePackageRequest.Marshal(b, m, deterministic)
}
func (m *ValidatePackageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatePackageRequest.Merge(m, src)
}
func (m *ValidatePackageRequest) XXX_Size() int {
	return xxx_messageInfo_ValidatePackageRequest.Size(m)
}
func (m *ValidatePackageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatePackageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatePackageRequest proto.InternalMessageInfo

func (m *ValidatePackageRequest) GetVersionType() string {
	if m != nil {
		return m.VersionType
	}
	return ""
}

func (m *ValidatePackageRequest) GetVersionPackage() []byte {
	if m != nil {
		return m.VersionPackage
	}
	return nil
}

type ValidatePackageResponse struct {
	// filename map to detail
	ErrorDetails map[string]string `protobuf:"bytes,1,rep,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// error eg.[json error]
	Error *wrappers.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// app name eg.[wordpress|mysql|...]
	Name *wrappers.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// app version name.eg.[0.1.0]
	VersionName *wrappers.StringValue `protobuf:"bytes,4,opt,name=version_name,json=versionName,proto3" json:"version_name,omitempty"`
	// app url
	Url *wrappers.StringValue `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	// app description
	Description          *wrappers.StringValue `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ValidatePackageResponse) Reset()         { *m = ValidatePackageResponse{} }
func (m *ValidatePackageResponse) String() string { return proto.CompactTextString(m) }
func (*ValidatePackageResponse) ProtoMessage()    {}
func (*ValidatePackageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{3}
}

func (m *ValidatePackageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidatePackageResponse.Unmarshal(m, b)
}
func (m *ValidatePackageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidatePackageResponse.Marshal(b, m, deterministic)
}
func (m *ValidatePackageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatePackageResponse.Merge(m, src)
}
func (m *ValidatePackageResponse) XXX_Size() int {
	return xxx_messageInfo_ValidatePackageResponse.Size(m)
}
func (m *ValidatePackageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatePackageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatePackageResponse proto.InternalMessageInfo

func (m *ValidatePackageResponse) GetErrorDetails() map[string]string {
	if m != nil {
		return m.ErrorDetails
	}
	return nil
}

func (m *ValidatePackageResponse) GetError() *wrappers.StringValue {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ValidatePackageResponse) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ValidatePackageResponse) GetVersionName() *wrappers.StringValue {
	if m != nil {
		return m.VersionName
	}
	return nil
}

func (m *ValidatePackageResponse) GetUrl() *wrappers.StringValue {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *ValidatePackageResponse) GetDescription() *wrappers.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

type ModifyAppRequest struct {
	// required, id of app to modify
	AppId *wrappers.StringValue `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// name of the app
	Name *wrappers.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description of the app
	Description *wrappers.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// home page of the app
	Home *wrappers.StringValue `protobuf:"bytes,4,opt,name=home,proto3" json:"home,omitempty"`
	// maintainers who maintainer the app
	Maintainers *wrappers.StringValue `protobuf:"bytes,7,opt,name=maintainers,proto3" json:"maintainers,omitempty"`
	// sources of app
	Sources *wrappers.StringValue `protobuf:"bytes,8,opt,name=sources,proto3" json:"sources,omitempty"`
	// instructions of the app
	Readme *wrappers.StringValue `protobuf:"bytes,9,opt,name=readme,proto3" json:"readme,omitempty"`
	// abstraction of app
	Abstraction *wrappers.StringValue `protobuf:"bytes,10,opt,name=abstraction,proto3" json:"abstraction,omitempty"`
	// tos of app
	Tos *wrappers.StringValue `protobuf:"bytes,11,opt,name=tos,proto3" json:"tos,omitempty"`
	// category id of the app
	CategoryId *wrappers.StringValue `protobuf:"bytes,12,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	// key words of the app
	Keywords             *wrappers.StringValue `protobuf:"bytes,13,opt,name=keywords,proto3" json:"keywords,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ModifyAppRequest) Reset()         { *m = ModifyAppRequest{} }
func (m *ModifyAppRequest) String() string { return proto.CompactTextString(m) }
func (*ModifyAppRequest) ProtoMessage()    {}
func (*ModifyAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{4}
}

func (m *ModifyAppRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModifyAppRequest.Unmarshal(m, b)
}
func (m *ModifyAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModifyAppRequest.Marshal(b, m, deterministic)
}
func (m *ModifyAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyAppRequest.Merge(m, src)
}
func (m *ModifyAppRequest) XXX_Size() int {
	return xxx_messageInfo_ModifyAppRequest.Size(m)
}
func (m *ModifyAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyAppRequest proto.InternalMessageInfo

func (m *ModifyAppRequest) GetAppId() *wrappers.StringValue {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *ModifyAppRequest) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ModifyAppRequest) GetDescription() *wrappers.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *ModifyAppRequest) GetHome() *wrappers.StringValue {
	if m != nil {
		return m.Home
	}
	return nil
}

func (m *ModifyAppRequest) GetMaintainers() *wrappers.StringValue {
	if m != nil {
		return m.Maintainers
	}
	return nil
}

func (m *ModifyAppRequest) GetSources() *wrappers.StringValue {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *ModifyAppRequest) GetReadme() *wrappers.StringValue {
	if m != nil {
		return m.Readme
	}
	return nil
}

func (m *ModifyAppRequest) GetAbstraction() *wrappers.StringValue {
	if m != nil {
		return m.Abstraction
	}
	return nil
}

func (m *ModifyAppRequest) GetTos() *wrappers.StringValue {
	if m != nil {
		return m.Tos
	}
	return nil
}

func (m *ModifyAppRequest) GetCategoryId() *wrappers.StringValue {
	if m != nil {
		return m.CategoryId
	}
	return nil
}

func (m *ModifyAppRequest) GetKeywords() *wrappers.StringValue {
	if m != nil {
		return m.Keywords
	}
	return nil
}

type ModifyAppResponse struct {
	// id of app modified
	AppId                *wrappers.StringValue `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ModifyAppResponse) Reset()         { *m = ModifyAppResponse{} }
func (m *ModifyAppResponse) String() string { return proto.CompactTextString(m) }
func (*ModifyAppResponse) ProtoMessage()    {}
func (*ModifyAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{5}
}

func (m *ModifyAppResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModifyAppResponse.Unmarshal(m, b)
}
func (m *ModifyAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModifyAppResponse.Marshal(b, m, deterministic)
}
func (m *ModifyAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyAppResponse.Merge(m, src)
}
func (m *ModifyAppResponse) XXX_Size() int {
	return xxx_messageInfo_ModifyAppResponse.Size(m)
}
func (m *ModifyAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyAppResponse proto.InternalMessageInfo

func (m *ModifyAppResponse) GetAppId() *wrappers.StringValue {
	if m != nil {
		return m.AppId
	}
	return nil
}

type UploadAppAttachmentRequest struct {
	// required, id of app to upload attachment
	AppId *wrappers.StringValue `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// optional: icon/screenshot
	Type UploadAppAttachmentRequest_Type `protobuf:"varint,2,opt,name=type,proto3,enum=openpitrix.UploadAppAttachmentRequest_Type" json:"type,omitempty"`
	// required, content of attachment
	AttachmentContent *wrappers.BytesValue `protobuf:"bytes,3,opt,name=attachment_content,json=attachmentContent,proto3" json:"attachment_content,omitempty"`
	// only for screenshot, range: [0, 5]
	Sequence             *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UploadAppAttachmentRequest) Reset()         { *m = UploadAppAttachmentRequest{} }
func (m *UploadAppAttachmentRequest) String() string { return proto.CompactTextString(m) }
func (*UploadAppAttachmentRequest) ProtoMessage()    {}
func (*UploadAppAttachmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{6}
}

func (m *UploadAppAttachmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadAppAttachmentRequest.Unmarshal(m, b)
}
func (m *UploadAppAttachmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadAppAttachmentRequest.Marshal(b, m, deterministic)
}
func (m *UploadAppAttachmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadAppAttachmentRequest.Merge(m, src)
}
func (m *UploadAppAttachmentRequest) XXX_Size() int {
	return xxx_messageInfo_UploadAppAttachmentRequest.Size(m)
}
func (m *UploadAppAttachmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadAppAttachmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadAppAttachmentRequest proto.InternalMessageInfo

func (m *UploadAppAttachmentRequest) GetAppId() *wrappers.StringValue {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *UploadAppAttachmentRequest) GetType() UploadAppAttachmentRequest_Type {
	if m != nil {
		return m.Type
	}
	return UploadAppAttachmentRequest_icon
}

func (m *UploadAppAttachmentRequest) GetAttachmentContent() *wrappers.BytesValue {
	if m != nil {
		return m.AttachmentContent
	}
	return nil
}

func (m *UploadAppAttachmentRequest) GetSequence() *wrappers.UInt32Value {
	if m != nil {
		return m.Sequence
	}
	return nil
}

type UploadAppAttachmentResponse struct {
	// id of app to upload attachment
	AppId                *wrappers.StringValue `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UploadAppAttachmentResponse) Reset()         { *m = UploadAppAttachmentResponse{} }
func (m *UploadAppAttachmentResponse) String() string { return proto.CompactTextString(m) }
func (*UploadAppAttachmentResponse) ProtoMessage()    {}
func (*UploadAppAttachmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{7}
}

func (m *UploadAppAttachmentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadAppAttachmentResponse.Unmarshal(m, b)
}
func (m *UploadAppAttachmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadAppAttachmentResponse.Marshal(b, m, deterministic)
}
func (m *UploadAppAttachmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadAppAttachmentResponse.Merge(m, src)
}
func (m *UploadAppAttachmentResponse) XXX_Size() int {
	return xxx_messageInfo_UploadAppAttachmentResponse.Size(m)
}
func (m *UploadAppAttachmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadAppAttachmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadAppAttachmentResponse proto.InternalMessageInfo

func (m *UploadAppAttachmentResponse) GetAppId() *wrappers.StringValue {
	if m != nil {
		return m.AppId
	}
	return nil
}

type DeleteAppsRequest struct {
	// required, ids of app to delete
	AppId                []string `protobuf:"bytes,1,rep,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAppsRequest) Reset()         { *m = DeleteAppsRequest{} }
func (m *DeleteAppsRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAppsRequest) ProtoMessage()    {}
func (*DeleteAppsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{8}
}

func (m *DeleteAppsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteAppsRequest.Unmarshal(m, b)
}
func (m *DeleteAppsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteAppsRequest.Marshal(b, m, deterministic)
}
func (m *DeleteAppsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAppsRequest.Merge(m, src)
}
func (m *DeleteAppsRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteAppsRequest.Size(m)
}
func (m *DeleteAppsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAppsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAppsRequest proto.InternalMessageInfo

func (m *DeleteAppsRequest) GetAppId() []string {
	if m != nil {
		return m.AppId
	}
	return nil
}

type DeleteAppsResponse struct {
	// ids of app deleted
	AppId                []string `protobuf:"bytes,1,rep,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAppsResponse) Reset()         { *m = DeleteAppsResponse{} }
func (m *DeleteAppsResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteAppsResponse) ProtoMessage()    {}
func (*DeleteAppsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{9}
}

func (m *DeleteAppsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteAppsResponse.Unmarshal(m, b)
}
func (m *DeleteAppsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteAppsResponse.Marshal(b, m, deterministic)
}
func (m *DeleteAppsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAppsResponse.Merge(m, src)
}
func (m *DeleteAppsResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteAppsResponse.Size(m)
}
func (m *DeleteAppsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAppsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAppsResponse proto.InternalMessageInfo

func (m *DeleteAppsResponse) GetAppId() []string {
	if m != nil {
		return m.AppId
	}
	return nil
}

type App struct {
	// app id
	AppId *wrappers.StringValue `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// whether there is a released version in the app
	Active *wrappers.BoolValue `protobuf:"bytes,2,opt,name=active,proto3" json:"active,omitempty"`
	// app name
	Name *wrappers.StringValue `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// repository(store app package) id
	RepoId *wrappers.StringValue `protobuf:"bytes,4,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	// app description
	Description *wrappers.StringValue `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// status eg.[modify|submit|review|cancel|release|delete|pass|reject|suspend|recover]
	Status *wrappers.StringValue `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	// app home page
	Home *wrappers.StringValue `protobuf:"bytes,7,opt,name=home,proto3" json:"home,omitempty"`
	// app icon
	Icon *wrappers.StringValue `protobuf:"bytes,8,opt,name=icon,proto3" json:"icon,omitempty"`
	// app screenshots
	Screenshots *wrappers.StringValue `protobuf:"bytes,9,opt,name=screenshots,proto3" json:"screenshots,omitempty"`
	// app maintainers
	Maintainers *wrappers.StringValue `protobuf:"bytes,10,opt,name=maintainers,proto3" json:"maintainers,omitempty"`
	// app key words
	Keywords *wrappers.StringValue `protobuf:"bytes,11,opt,name=keywords,proto3" json:"keywords,omitempty"`
	// sources of app
	Sources *wrappers.StringValue `protobuf:"bytes,12,opt,name=sources,proto3" json:"sources,omitempty"`
	// app instructions
	Readme *wrappers.StringValue `protobuf:"bytes,13,opt,name=readme,proto3" json:"readme,omitempty"`
	// chart name of app
	ChartName *wrappers.StringValue `protobuf:"bytes,14,opt,name=chart_name,json=chartName,proto3" json:"chart_name,omitempty"`
	// abstraction of app
	Abstraction *wrappers.StringValue `protobuf:"bytes,15,opt,name=abstraction,proto3" json:"abstraction,omitempty"`
	// tos of app
	Tos *wrappers.StringValue `protobuf:"bytes,16,opt,name=tos,proto3" json:"tos,omitempty"`
	// owner of app
	Owner *wrappers.StringValue `protobuf:"bytes,17,opt,name=owner,proto3" json:"owner,omitempty"`
	// the time when app create
	CreateTime *timestamp.Timestamp `protobuf:"bytes,18,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// record status changed time
	StatusTime *timestamp.Timestamp `protobuf:"bytes,19,opt,name=status_time,json=statusTime,proto3" json:"status_time,omitempty"`
	// the time when app update
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,20,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// list of category, the app may belong to one more category
	CategorySet []*ResourceCategory `protobuf:"bytes,21,rep,name=category_set,json=categorySet,proto3" json:"category_set,omitempty"`
	// latest version of app
	LatestAppVersion *AppVersion `protobuf:"bytes,22,opt,name=latest_app_version,json=latestAppVersion,proto3" json:"latest_app_version,omitempty"`
	// app version types eg.[vmbased|helm]
	AppVersionTypes *wrappers.StringValue `protobuf:"bytes,23,opt,name=app_version_types,json=appVersionTypes,proto3" json:"app_version_types,omitempty"`
	// company name
	CompanyName *wrappers.StringValue `protobuf:"bytes,24,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	// company website
	CompanyWebsite *wrappers.StringValue `protobuf:"bytes,25,opt,name=company_website,json=companyWebsite,proto3" json:"company_website,omitempty"`
	// company profile
	CompanyProfile *wrappers.StringValue `protobuf:"bytes,26,opt,name=company_profile,json=companyProfile,proto3" json:"company_profile,omitempty"`
	// company join time
	CompanyJoinTime *timestamp.Timestamp `protobuf:"bytes,27,opt,name=company_join_time,json=companyJoinTime,proto3" json:"company_join_time,omitempty"`
	// owner path of the app, concat string group_path:user_id
	OwnerPath *wrappers.StringValue `protobuf:"bytes,28,opt,name=owner_path,json=ownerPath,proto3" json:"owner_path,omitempty"`
	// the isv user who create the app
	Isv                  *wrappers.StringValue `protobuf:"bytes,29,opt,name=isv,proto3" json:"isv,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *App) Reset()         { *m = App{} }
func (m *App) String() string { return proto.CompactTextString(m) }
func (*App) ProtoMessage()    {}
func (*App) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{10}
}

func (m *App) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_App.Unmarshal(m, b)
}
func (m *App) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_App.Marshal(b, m, deterministic)
}
func (m *App) XXX_Merge(src proto.Message) {
	xxx_messageInfo_App.Merge(m, src)
}
func (m *App) XXX_Size() int {
	return xxx_messageInfo_App.Size(m)
}
func (m *App) XXX_DiscardUnknown() {
	xxx_messageInfo_App.DiscardUnknown(m)
}

var xxx_messageInfo_App proto.InternalMessageInfo

func (m *App) GetAppId() *wrappers.StringValue {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *App) GetActive() *wrappers.BoolValue {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *App) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *App) GetRepoId() *wrappers.StringValue {
	if m != nil {
		return m.RepoId
	}
	return nil
}

func (m *App) GetDescription() *wrappers.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *App) GetStatus() *wrappers.StringValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *App) GetHome() *wrappers.StringValue {
	if m != nil {
		return m.Home
	}
	return nil
}

func (m *App) GetIcon() *wrappers.StringValue {
	if m != nil {
		return m.Icon
	}
	return nil
}

func (m *App) GetScreenshots() *wrappers.StringValue {
	if m != nil {
		return m.Screenshots
	}
	return nil
}

func (m *App) GetMaintainers() *wrappers.StringValue {
	if m != nil {
		return m.Maintainers
	}
	return nil
}

func (m *App) GetKeywords() *wrappers.StringValue {
	if m != nil {
		return m.Keywords
	}
	return nil
}

func (m *App) GetSources() *wrappers.StringValue {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *App) GetReadme() *wrappers.StringValue {
	if m != nil {
		return m.Readme
	}
	return nil
}

func (m *App) GetChartName() *wrappers.StringValue {
	if m != nil {
		return m.ChartName
	}
	return nil
}

func (m *App) GetAbstraction() *wrappers.StringValue {
	if m != nil {
		return m.Abstraction
	}
	return nil
}

func (m *App) GetTos() *wrappers.StringValue {
	if m != nil {
		return m.Tos
	}
	return nil
}

func (m *App) GetOwner() *wrappers.StringValue {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *App) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *App) GetStatusTime() *timestamp.Timestamp {
	if m != nil {
		return m.StatusTime
	}
	return nil
}

func (m *App) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *App) GetCategorySet() []*ResourceCategory {
	if m != nil {
		return m.CategorySet
	}
	return nil
}

func (m *App) GetLatestAppVersion() *AppVersion {
	if m != nil {
		return m.LatestAppVersion
	}
	return nil
}

func (m *App) GetAppVersionTypes() *wrappers.StringValue {
	if m != nil {
		return m.AppVersionTypes
	}
	return nil
}

func (m *App) GetCompanyName() *wrappers.StringValue {
	if m != nil {
		return m.CompanyName
	}
	return nil
}

func (m *App) GetCompanyWebsite() *wrappers.StringValue {
	if m != nil {
		return m.CompanyWebsite
	}
	return nil
}

func (m *App) GetCompanyProfile() *wrappers.StringValue {
	if m != nil {
		return m.CompanyProfile
	}
	return nil
}

func (m *App) GetCompanyJoinTime() *timestamp.Timestamp {
	if m != nil {
		return m.CompanyJoinTime
	}
	return nil
}

func (m *App) GetOwnerPath() *wrappers.StringValue {
	if m != nil {
		return m.OwnerPath
	}
	return nil
}

func (m *App) GetIsv() *wrappers.StringValue {
	if m != nil {
		return m.Isv
	}
	return nil
}

type DescribeAppsRequest struct {
	// query key, support these fields(app_id, name, repo_id, description, status, home, icon, screenshots, maintainers, sources, readme, owner, chart_name)
	SearchWord *wrappers.StringValue `protobuf:"bytes,1,opt,name=search_word,json=searchWord,proto3" json:"search_word,omitempty"`
	// sort key, order by sort_key, default create_time
	SortKey *wrappers.StringValue `protobuf:"bytes,2,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
	// value = 0 sort ASC, value = 1 sort DESC
	Reverse *wrappers.BoolValue `protobuf:"bytes,3,opt,name=reverse,proto3" json:"reverse,omitempty"`
	// data limit per page, default is 20, max value is 200
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// data offset, default is 0
	Offset uint32 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// app ids
	AppId []string `protobuf:"bytes,11,rep,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// app name
	Name []string `protobuf:"bytes,12,rep,name=name,proto3" json:"name,omitempty"`
	// app repository ids
	RepoId []string `protobuf:"bytes,13,rep,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	// app status eg.[modify|submit|review|cancel|release|delete|pass|reject|suspend|recover]
	Status []string `protobuf:"bytes,14,rep,name=status,proto3" json:"status,omitempty"`
	// app owner
	Owner []string `protobuf:"bytes,15,rep,name=owner,proto3" json:"owner,omitempty"`
	// app chart name
	ChartName []string `protobuf:"bytes,16,rep,name=chart_name,json=chartName,proto3" json:"chart_name,omitempty"`
	// app category ids
	CategoryId []string `protobuf:"bytes,17,rep,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	// select column to display
	DisplayColumns []string `protobuf:"bytes,18,rep,name=display_columns,json=displayColumns,proto3" json:"display_columns,omitempty"`
	// isv
	Isv                  []string `protobuf:"bytes,19,rep,name=isv,proto3" json:"isv,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DescribeAppsRequest) Reset()         { *m = DescribeAppsRequest{} }
func (m *DescribeAppsRequest) String() string { return proto.CompactTextString(m) }
func (*DescribeAppsRequest) ProtoMessage()    {}
func (*DescribeAppsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{11}
}

func (m *DescribeAppsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeAppsRequest.Unmarshal(m, b)
}
func (m *DescribeAppsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeAppsRequest.Marshal(b, m, deterministic)
}
func (m *DescribeAppsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeAppsRequest.Merge(m, src)
}
func (m *DescribeAppsRequest) XXX_Size() int {
	return xxx_messageInfo_DescribeAppsRequest.Size(m)
}
func (m *DescribeAppsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeAppsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeAppsRequest proto.InternalMessageInfo

func (m *DescribeAppsRequest) GetSearchWord() *wrappers.StringValue {
	if m != nil {
		return m.SearchWord
	}
	return nil
}

func (m *DescribeAppsRequest) GetSortKey() *wrappers.StringValue {
	if m != nil {
		return m.SortKey
	}
	return nil
}

func (m *DescribeAppsRequest) GetReverse() *wrappers.BoolValue {
	if m != nil {
		return m.Reverse
	}
	return nil
}

func (m *DescribeAppsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DescribeAppsRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DescribeAppsRequest) GetAppId() []string {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *DescribeAppsRequest) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DescribeAppsRequest) GetRepoId() []string {
	if m != nil {
		return m.RepoId
	}
	return nil
}

func (m *DescribeAppsRequest) GetStatus() []string {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DescribeAppsRequest) GetOwner() []string {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *DescribeAppsRequest) GetChartName() []string {
	if m != nil {
		return m.ChartName
	}
	return nil
}

func (m *DescribeAppsRequest) GetCategoryId() []string {
	if m != nil {
		return m.CategoryId
	}
	return nil
}

func (m *DescribeAppsRequest) GetDisplayColumns() []string {
	if m != nil {
		return m.DisplayColumns
	}
	return nil
}

func (m *DescribeAppsRequest) GetIsv() []string {
	if m != nil {
		return m.Isv
	}
	return nil
}

type DescribeAppsResponse struct {
	// total count of qualified app
	TotalCount uint32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// list of app
	AppSet               []*App   `protobuf:"bytes,2,rep,name=app_set,json=appSet,proto3" json:"app_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DescribeAppsResponse) Reset()         { *m = DescribeAppsResponse{} }
func (m *DescribeAppsResponse) String() string { return proto.CompactTextString(m) }
func (*DescribeAppsResponse) ProtoMessage()    {}
func (*DescribeAppsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{12}
}

func (m *DescribeAppsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeAppsResponse.Unmarshal(m, b)
}
func (m *DescribeAppsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeAppsResponse.Marshal(b, m, deterministic)
}
func (m *DescribeAppsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeAppsResponse.Merge(m, src)
}
func (m *DescribeAppsResponse) XXX_Size() int {
	return xxx_messageInfo_DescribeAppsResponse.Size(m)
}
func (m *DescribeAppsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeAppsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeAppsResponse proto.InternalMessageInfo

func (m *DescribeAppsResponse) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *DescribeAppsResponse) GetAppSet() []*App {
	if m != nil {
		return m.AppSet
	}
	return nil
}

type CreateAppVersionRequest struct {
	// required, id of app to create new version
	AppId *wrappers.StringValue `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// required, version name eg.[0.1.0|0.1.3|...]
	Name *wrappers.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description of app of specific version
	Description *wrappers.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// optional: vmbased/helm
	Type *wrappers.StringValue `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// package of app of specific version
	Package              *wrappers.BytesValue `protobuf:"bytes,5,opt,name=package,proto3" json:"package,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CreateAppVersionRequest) Reset()         { *m = CreateAppVersionRequest{} }
func (m *CreateAppVersionRequest) String() string { return proto.CompactTextString(m) }
func (*CreateAppVersionRequest) ProtoMessage()    {}
func (*CreateAppVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{13}
}

func (m *CreateAppVersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateAppVersionRequest.Unmarshal(m, b)
}
func (m *CreateAppVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateAppVersionRequest.Marshal(b, m, deterministic)
}
func (m *CreateAppVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAppVersionRequest.Merge(m, src)
}
func (m *CreateAppVersionRequest) XXX_Size() int {
	return xxx_messageInfo_CreateAppVersionRequest.Size(m)
}
func (m *CreateAppVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAppVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAppVersionRequest proto.InternalMessageInfo

func (m *CreateAppVersionRequest) GetAppId() *wrappers.StringValue {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *CreateAppVersionRequest) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *CreateAppVersionRequest) GetDescription() *wrappers.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *CreateAppVersionRequest) GetType() *wrappers.StringValue {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CreateAppVersionRequest) GetPackage() *wrappers.BytesValue {
	if m != nil {
		return m.Package
	}
	return nil
}

type CreateAppVersionResponse struct {
	// version id
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CreateAppVersionResponse) Reset()         { *m = CreateAppVersionResponse{} }
func (m *CreateAppVersionResponse) String() string { return proto.CompactTextString(m) }
func (*CreateAppVersionResponse) ProtoMessage()    {}
func (*CreateAppVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{14}
}

func (m *CreateAppVersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateAppVersionResponse.Unmarshal(m, b)
}
func (m *CreateAppVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateAppVersionResponse.Marshal(b, m, deterministic)
}
func (m *CreateAppVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAppVersionResponse.Merge(m, src)
}
func (m *CreateAppVersionResponse) XXX_Size() int {
	return xxx_messageInfo_CreateAppVersionResponse.Size(m)
}
func (m *CreateAppVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAppVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAppVersionResponse proto.InternalMessageInfo

func (m *CreateAppVersionResponse) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type ModifyAppVersionRequest struct {
	// required, version id of app to modify
	VersionId *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// app name
	Name *wrappers.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// app description
	Description *wrappers.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// package of app to replace other
	Package *wrappers.BytesValue `protobuf:"bytes,4,opt,name=package,proto3" json:"package,omitempty"`
	// filename map to file_content
	PackageFiles         map[string][]byte `protobuf:"bytes,5,rep,name=package_files,json=packageFiles,proto3" json:"package_files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ModifyAppVersionRequest) Reset()         { *m = ModifyAppVersionRequest{} }
func (m *ModifyAppVersionRequest) String() string { return proto.CompactTextString(m) }
func (*ModifyAppVersionRequest) ProtoMessage()    {}
func (*ModifyAppVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{15}
}

func (m *ModifyAppVersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModifyAppVersionRequest.Unmarshal(m, b)
}
func (m *ModifyAppVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModifyAppVersionRequest.Marshal(b, m, deterministic)
}
func (m *ModifyAppVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyAppVersionRequest.Merge(m, src)
}
func (m *ModifyAppVersionRequest) XXX_Size() int {
	return xxx_messageInfo_ModifyAppVersionRequest.Size(m)
}
func (m *ModifyAppVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyAppVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyAppVersionRequest proto.InternalMessageInfo

func (m *ModifyAppVersionRequest) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

func (m *ModifyAppVersionRequest) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ModifyAppVersionRequest) GetDescription() *wrappers.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *ModifyAppVersionRequest) GetPackage() *wrappers.BytesValue {
	if m != nil {
		return m.Package
	}
	return nil
}

func (m *ModifyAppVersionRequest) GetPackageFiles() map[string][]byte {
	if m != nil {
		return m.PackageFiles
	}
	return nil
}

type ModifyAppVersionResponse struct {
	// required, version id
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ModifyAppVersionResponse) Reset()         { *m = ModifyAppVersionResponse{} }
func (m *ModifyAppVersionResponse) String() string { return proto.CompactTextString(m) }
func (*ModifyAppVersionResponse) ProtoMessage()    {}
func (*ModifyAppVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{16}
}

func (m *ModifyAppVersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModifyAppVersionResponse.Unmarshal(m, b)
}
func (m *ModifyAppVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModifyAppVersionResponse.Marshal(b, m, deterministic)
}
func (m *ModifyAppVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyAppVersionResponse.Merge(m, src)
}
func (m *ModifyAppVersionResponse) XXX_Size() int {
	return xxx_messageInfo_ModifyAppVersionResponse.Size(m)
}
func (m *ModifyAppVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyAppVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyAppVersionResponse proto.InternalMessageInfo

func (m *ModifyAppVersionResponse) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type AppVersion struct {
	// version id of app
	VersionId *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// active or not
	Active *wrappers.BoolValue `protobuf:"bytes,2,opt,name=active,proto3" json:"active,omitempty"`
	// app id
	AppId *wrappers.StringValue `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// owner
	Owner *wrappers.StringValue `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	// version name
	Name *wrappers.StringValue `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// description of app of specific version
	Description *wrappers.StringValue `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// home of app of specific version
	Home *wrappers.StringValue `protobuf:"bytes,7,opt,name=home,proto3" json:"home,omitempty"`
	// icon of app of specific version
	Icon *wrappers.StringValue `protobuf:"bytes,8,opt,name=icon,proto3" json:"icon,omitempty"`
	// screenshots of app of specific version
	Screenshots *wrappers.StringValue `protobuf:"bytes,9,opt,name=screenshots,proto3" json:"screenshots,omitempty"`
	// maintainers of app of specific version
	Maintainers *wrappers.StringValue `protobuf:"bytes,10,opt,name=maintainers,proto3" json:"maintainers,omitempty"`
	// keywords of app of specific version
	Keywords *wrappers.StringValue `protobuf:"bytes,11,opt,name=keywords,proto3" json:"keywords,omitempty"`
	// sources of app of specific version
	Sources *wrappers.StringValue `protobuf:"bytes,12,opt,name=sources,proto3" json:"sources,omitempty"`
	// readme of app of specific version
	Readme *wrappers.StringValue `protobuf:"bytes,13,opt,name=readme,proto3" json:"readme,omitempty"`
	// package name of app of specific version
	PackageName *wrappers.StringValue `protobuf:"bytes,14,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	// status of app of specific version eg.[draft|submitted|passed|rejected|active|in-review|deleted|suspended]
	Status *wrappers.StringValue `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	// review id of app of specific version
	ReviewId *wrappers.StringValue `protobuf:"bytes,16,opt,name=review_id,json=reviewId,proto3" json:"review_id,omitempty"`
	// the time when app version create
	CreateTime *timestamp.Timestamp `protobuf:"bytes,17,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// record status changed time
	StatusTime *timestamp.Timestamp `protobuf:"bytes,18,opt,name=status_time,json=statusTime,proto3" json:"status_time,omitempty"`
	// the time when app version update
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,19,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// sequence of app of specific version
	Sequence *wrappers.UInt32Value `protobuf:"bytes,20,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// message path of app of specific version
	Message *wrappers.StringValue `protobuf:"bytes,21,opt,name=message,proto3" json:"message,omitempty"`
	// type of app of specific version
	Type *wrappers.StringValue `protobuf:"bytes,22,opt,name=type,proto3" json:"type,omitempty"`
	// owner path of app of specific version, concat string group_path:user_id
	OwnerPath            *wrappers.StringValue `protobuf:"bytes,23,opt,name=owner_path,json=ownerPath,proto3" json:"owner_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AppVersion) Reset()         { *m = AppVersion{} }
func (m *AppVersion) String() string { return proto.CompactTextString(m) }
func (*AppVersion) ProtoMessage()    {}
func (*AppVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{17}
}

func (m *AppVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppVersion.Unmarshal(m, b)
}
func (m *AppVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppVersion.Marshal(b, m, deterministic)
}
func (m *AppVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppVersion.Merge(m, src)
}
func (m *AppVersion) XXX_Size() int {
	return xxx_messageInfo_AppVersion.Size(m)
}
func (m *AppVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_AppVersion.DiscardUnknown(m)
}

var xxx_messageInfo_AppVersion proto.InternalMessageInfo

func (m *AppVersion) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

func (m *AppVersion) GetActive() *wrappers.BoolValue {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *AppVersion) GetAppId() *wrappers.StringValue {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *AppVersion) GetOwner() *wrappers.StringValue {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *AppVersion) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *AppVersion) GetDescription() *wrappers.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *AppVersion) GetHome() *wrappers.StringValue {
	if m != nil {
		return m.Home
	}
	return nil
}

func (m *AppVersion) GetIcon() *wrappers.StringValue {
	if m != nil {
		return m.Icon
	}
	return nil
}

func (m *AppVersion) GetScreenshots() *wrappers.StringValue {
	if m != nil {
		return m.Screenshots
	}
	return nil
}

func (m *AppVersion) GetMaintainers() *wrappers.StringValue {
	if m != nil {
		return m.Maintainers
	}
	return nil
}

func (m *AppVersion) GetKeywords() *wrappers.StringValue {
	if m != nil {
		return m.Keywords
	}
	return nil
}

func (m *AppVersion) GetSources() *wrappers.StringValue {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *AppVersion) GetReadme() *wrappers.StringValue {
	if m != nil {
		return m.Readme
	}
	return nil
}

func (m *AppVersion) GetPackageName() *wrappers.StringValue {
	if m != nil {
		return m.PackageName
	}
	return nil
}

func (m *AppVersion) GetStatus() *wrappers.StringValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AppVersion) GetReviewId() *wrappers.StringValue {
	if m != nil {
		return m.ReviewId
	}
	return nil
}

func (m *AppVersion) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *AppVersion) GetStatusTime() *timestamp.Timestamp {
	if m != nil {
		return m.StatusTime
	}
	return nil
}

func (m *AppVersion) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *AppVersion) GetSequence() *wrappers.UInt32Value {
	if m != nil {
		return m.Sequence
	}
	return nil
}

func (m *AppVersion) GetMessage() *wrappers.StringValue {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *AppVersion) GetType() *wrappers.StringValue {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *AppVersion) GetOwnerPath() *wrappers.StringValue {
	if m != nil {
		return m.OwnerPath
	}
	return nil
}

type AppVersionAudit struct {
	// id of version to audit
	VersionId *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// id of specific version app
	AppId *wrappers.StringValue `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// audit status, eg.[draft|submitted|passed|rejected|active|in-review|deleted|suspended]
	Status *wrappers.StringValue `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// version name
	VersionName *wrappers.StringValue `protobuf:"bytes,4,opt,name=version_name,json=versionName,proto3" json:"version_name,omitempty"`
	// name of specific version app
	AppName *wrappers.StringValue `protobuf:"bytes,5,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// user of auditer
	Operator *wrappers.StringValue `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
	// operator of auditer eg.[global_admin|developer|business|technical|isv]
	OperatorType *wrappers.StringValue `protobuf:"bytes,7,opt,name=operator_type,json=operatorType,proto3" json:"operator_type,omitempty"`
	// audit message
	Message *wrappers.StringValue `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	// review id
	ReviewId *wrappers.StringValue `protobuf:"bytes,9,opt,name=review_id,json=reviewId,proto3" json:"review_id,omitempty"`
	// record status changed time
	StatusTime *timestamp.Timestamp `protobuf:"bytes,10,opt,name=status_time,json=statusTime,proto3" json:"status_time,omitempty"`
	// version type
	VersionType          *wrappers.StringValue `protobuf:"bytes,11,opt,name=version_type,json=versionType,proto3" json:"version_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AppVersionAudit) Reset()         { *m = AppVersionAudit{} }
func (m *AppVersionAudit) String() string { return proto.CompactTextString(m) }
func (*AppVersionAudit) ProtoMessage()    {}
func (*AppVersionAudit) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{18}
}

func (m *AppVersionAudit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppVersionAudit.Unmarshal(m, b)
}
func (m *AppVersionAudit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppVersionAudit.Marshal(b, m, deterministic)
}
func (m *AppVersionAudit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppVersionAudit.Merge(m, src)
}
func (m *AppVersionAudit) XXX_Size() int {
	return xxx_messageInfo_AppVersionAudit.Size(m)
}
func (m *AppVersionAudit) XXX_DiscardUnknown() {
	xxx_messageInfo_AppVersionAudit.DiscardUnknown(m)
}

var xxx_messageInfo_AppVersionAudit proto.InternalMessageInfo

func (m *AppVersionAudit) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

func (m *AppVersionAudit) GetAppId() *wrappers.StringValue {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *AppVersionAudit) GetStatus() *wrappers.StringValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AppVersionAudit) GetVersionName() *wrappers.StringValue {
	if m != nil {
		return m.VersionName
	}
	return nil
}

func (m *AppVersionAudit) GetAppName() *wrappers.StringValue {
	if m != nil {
		return m.AppName
	}
	return nil
}

func (m *AppVersionAudit) GetOperator() *wrappers.StringValue {
	if m != nil {
		return m.Operator
	}
	return nil
}

func (m *AppVersionAudit) GetOperatorType() *wrappers.StringValue {
	if m != nil {
		return m.OperatorType
	}
	return nil
}

func (m *AppVersionAudit) GetMessage() *wrappers.StringValue {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *AppVersionAudit) GetReviewId() *wrappers.StringValue {
	if m != nil {
		return m.ReviewId
	}
	return nil
}

func (m *AppVersionAudit) GetStatusTime() *timestamp.Timestamp {
	if m != nil {
		return m.StatusTime
	}
	return nil
}

func (m *AppVersionAudit) GetVersionType() *wrappers.StringValue {
	if m != nil {
		return m.VersionType
	}
	return nil
}

type AppVersionReviewPhase struct {
	// review status of app version eg.[isv-in-review|isv-passed|isv-rejected|isv-draft|business-in-review|business-passed|business-rejected|develop-draft|develop-in-review|develop-passed|develop-rejected|develop-draft]
	Status *wrappers.StringValue `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// user of reviewer
	Operator *wrappers.StringValue `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	// operator type of reviewer eg.[global_admin|developer|business|technical|isv]
	OperatorType *wrappers.StringValue `protobuf:"bytes,3,opt,name=operator_type,json=operatorType,proto3" json:"operator_type,omitempty"`
	// review message
	Message *wrappers.StringValue `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// record status changed time
	StatusTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=status_time,json=statusTime,proto3" json:"status_time,omitempty"`
	// app version review time
	ReviewTime           *timestamp.Timestamp `protobuf:"bytes,6,opt,name=review_time,json=reviewTime,proto3" json:"review_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AppVersionReviewPhase) Reset()         { *m = AppVersionReviewPhase{} }
func (m *AppVersionReviewPhase) String() string { return proto.CompactTextString(m) }
func (*AppVersionReviewPhase) ProtoMessage()    {}
func (*AppVersionReviewPhase) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{19}
}

func (m *AppVersionReviewPhase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppVersionReviewPhase.Unmarshal(m, b)
}
func (m *AppVersionReviewPhase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppVersionReviewPhase.Marshal(b, m, deterministic)
}
func (m *AppVersionReviewPhase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppVersionReviewPhase.Merge(m, src)
}
func (m *AppVersionReviewPhase) XXX_Size() int {
	return xxx_messageInfo_AppVersionReviewPhase.Size(m)
}
func (m *AppVersionReviewPhase) XXX_DiscardUnknown() {
	xxx_messageInfo_AppVersionReviewPhase.DiscardUnknown(m)
}

var xxx_messageInfo_AppVersionReviewPhase proto.InternalMessageInfo

func (m *AppVersionReviewPhase) GetStatus() *wrappers.StringValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AppVersionReviewPhase) GetOperator() *wrappers.StringValue {
	if m != nil {
		return m.Operator
	}
	return nil
}

func (m *AppVersionReviewPhase) GetOperatorType() *wrappers.StringValue {
	if m != nil {
		return m.OperatorType
	}
	return nil
}

func (m *AppVersionReviewPhase) GetMessage() *wrappers.StringValue {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *AppVersionReviewPhase) GetStatusTime() *timestamp.Timestamp {
	if m != nil {
		return m.StatusTime
	}
	return nil
}

func (m *AppVersionReviewPhase) GetReviewTime() *timestamp.Timestamp {
	if m != nil {
		return m.ReviewTime
	}
	return nil
}

type AppVersionReview struct {
	// review id
	ReviewId *wrappers.StringValue `protobuf:"bytes,1,opt,name=review_id,json=reviewId,proto3" json:"review_id,omitempty"`
	// id of app version
	VersionId *wrappers.StringValue `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// app id
	AppId *wrappers.StringValue `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// version name of specific app version
	VersionName *wrappers.StringValue `protobuf:"bytes,4,opt,name=version_name,json=versionName,proto3" json:"version_name,omitempty"`
	// app name
	AppName *wrappers.StringValue `protobuf:"bytes,5,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// review status eg.[isv-in-review|isv-passed|isv-rejected|isv-draft|business-in-review|business-passed|business-rejected|develop-draft|develop-in-review|develop-passed|develop-rejected|develop-draft]
	Status *wrappers.StringValue `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	// review phase, app need one more reviewer to review, when reviewer reviewed, status changed
	Phase map[string]*AppVersionReviewPhase `protobuf:"bytes,7,rep,name=phase,proto3" json:"phase,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// record status changed time
	StatusTime *timestamp.Timestamp `protobuf:"bytes,8,opt,name=status_time,json=statusTime,proto3" json:"status_time,omitempty"`
	// user who review the app version
	Reviewer *wrappers.StringValue `protobuf:"bytes,9,opt,name=reviewer,proto3" json:"reviewer,omitempty"`
	// version type
	VersionType          *wrappers.StringValue `protobuf:"bytes,10,opt,name=version_type,json=versionType,proto3" json:"version_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AppVersionReview) Reset()         { *m = AppVersionReview{} }
func (m *AppVersionReview) String() string { return proto.CompactTextString(m) }
func (*AppVersionReview) ProtoMessage()    {}
func (*AppVersionReview) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{20}
}

func (m *AppVersionReview) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppVersionReview.Unmarshal(m, b)
}
func (m *AppVersionReview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppVersionReview.Marshal(b, m, deterministic)
}
func (m *AppVersionReview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppVersionReview.Merge(m, src)
}
func (m *AppVersionReview) XXX_Size() int {
	return xxx_messageInfo_AppVersionReview.Size(m)
}
func (m *AppVersionReview) XXX_DiscardUnknown() {
	xxx_messageInfo_AppVersionReview.DiscardUnknown(m)
}

var xxx_messageInfo_AppVersionReview proto.InternalMessageInfo

func (m *AppVersionReview) GetReviewId() *wrappers.StringValue {
	if m != nil {
		return m.ReviewId
	}
	return nil
}

func (m *AppVersionReview) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

func (m *AppVersionReview) GetAppId() *wrappers.StringValue {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *AppVersionReview) GetVersionName() *wrappers.StringValue {
	if m != nil {
		return m.VersionName
	}
	return nil
}

func (m *AppVersionReview) GetAppName() *wrappers.StringValue {
	if m != nil {
		return m.AppName
	}
	return nil
}

func (m *AppVersionReview) GetStatus() *wrappers.StringValue {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *AppVersionReview) GetPhase() map[string]*AppVersionReviewPhase {
	if m != nil {
		return m.Phase
	}
	return nil
}

func (m *AppVersionReview) GetStatusTime() *timestamp.Timestamp {
	if m != nil {
		return m.StatusTime
	}
	return nil
}

func (m *AppVersionReview) GetReviewer() *wrappers.StringValue {
	if m != nil {
		return m.Reviewer
	}
	return nil
}

func (m *AppVersionReview) GetVersionType() *wrappers.StringValue {
	if m != nil {
		return m.VersionType
	}
	return nil
}

type DescribeAppVersionReviewsRequest struct {
	// query key, support these fields(review_id, version_id, app_id, status, reviewer, app_name, owner)
	SearchWord *wrappers.StringValue `protobuf:"bytes,1,opt,name=search_word,json=searchWord,proto3" json:"search_word,omitempty"`
	// sort key, order by sort_key, default create_time
	SortKey *wrappers.StringValue `protobuf:"bytes,2,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
	// value = 0 sort ASC, value = 1 sort DESC
	Reverse *wrappers.BoolValue `protobuf:"bytes,3,opt,name=reverse,proto3" json:"reverse,omitempty"`
	// data limit per page, default is 20, max value is 200
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// data offset, default is 0
	Offset uint32 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// app ids
	AppId []string `protobuf:"bytes,10,rep,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// app version ids
	VersionId []string `protobuf:"bytes,11,rep,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// app version review ids
	ReviewId []string `protobuf:"bytes,12,rep,name=review_id,json=reviewId,proto3" json:"review_id,omitempty"`
	// app version status eg.[isv-in-review|isv-passed|isv-rejected|isv-draft|business-in-review|business-passed|business-rejected|develop-draft|develop-in-review|develop-passed|develop-rejected|develop-draft]
	Status []string `protobuf:"bytes,13,rep,name=status,proto3" json:"status,omitempty"`
	// select columns to display
	DisplayColumns []string `protobuf:"bytes,14,rep,name=display_columns,json=displayColumns,proto3" json:"display_columns,omitempty"`
	// reviewer of app version eg.[global_admin|developer|business|technical|isv]
	Reviewer             []string `protobuf:"bytes,15,rep,name=reviewer,proto3" json:"reviewer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DescribeAppVersionReviewsRequest) Reset()         { *m = DescribeAppVersionReviewsRequest{} }
func (m *DescribeAppVersionReviewsRequest) String() string { return proto.CompactTextString(m) }
func (*DescribeAppVersionReviewsRequest) ProtoMessage()    {}
func (*DescribeAppVersionReviewsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{21}
}

func (m *DescribeAppVersionReviewsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeAppVersionReviewsRequest.Unmarshal(m, b)
}
func (m *DescribeAppVersionReviewsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeAppVersionReviewsRequest.Marshal(b, m, deterministic)
}
func (m *DescribeAppVersionReviewsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeAppVersionReviewsRequest.Merge(m, src)
}
func (m *DescribeAppVersionReviewsRequest) XXX_Size() int {
	return xxx_messageInfo_DescribeAppVersionReviewsRequest.Size(m)
}
func (m *DescribeAppVersionReviewsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeAppVersionReviewsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeAppVersionReviewsRequest proto.InternalMessageInfo

func (m *DescribeAppVersionReviewsRequest) GetSearchWord() *wrappers.StringValue {
	if m != nil {
		return m.SearchWord
	}
	return nil
}

func (m *DescribeAppVersionReviewsRequest) GetSortKey() *wrappers.StringValue {
	if m != nil {
		return m.SortKey
	}
	return nil
}

func (m *DescribeAppVersionReviewsRequest) GetReverse() *wrappers.BoolValue {
	if m != nil {
		return m.Reverse
	}
	return nil
}

func (m *DescribeAppVersionReviewsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DescribeAppVersionReviewsRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DescribeAppVersionReviewsRequest) GetAppId() []string {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *DescribeAppVersionReviewsRequest) GetVersionId() []string {
	if m != nil {
		return m.VersionId
	}
	return nil
}

func (m *DescribeAppVersionReviewsRequest) GetReviewId() []string {
	if m != nil {
		return m.ReviewId
	}
	return nil
}

func (m *DescribeAppVersionReviewsRequest) GetStatus() []string {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DescribeAppVersionReviewsRequest) GetDisplayColumns() []string {
	if m != nil {
		return m.DisplayColumns
	}
	return nil
}

func (m *DescribeAppVersionReviewsRequest) GetReviewer() []string {
	if m != nil {
		return m.Reviewer
	}
	return nil
}

type DescribeAppVersionReviewsResponse struct {
	// total count of reviews of app with specific version
	TotalCount uint32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// list of reviews of app with specific version
	AppVersionReviewSet  []*AppVersionReview `protobuf:"bytes,2,rep,name=app_version_review_set,json=appVersionReviewSet,proto3" json:"app_version_review_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DescribeAppVersionReviewsResponse) Reset()         { *m = DescribeAppVersionReviewsResponse{} }
func (m *DescribeAppVersionReviewsResponse) String() string { return proto.CompactTextString(m) }
func (*DescribeAppVersionReviewsResponse) ProtoMessage()    {}
func (*DescribeAppVersionReviewsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{22}
}

func (m *DescribeAppVersionReviewsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeAppVersionReviewsResponse.Unmarshal(m, b)
}
func (m *DescribeAppVersionReviewsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeAppVersionReviewsResponse.Marshal(b, m, deterministic)
}
func (m *DescribeAppVersionReviewsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeAppVersionReviewsResponse.Merge(m, src)
}
func (m *DescribeAppVersionReviewsResponse) XXX_Size() int {
	return xxx_messageInfo_DescribeAppVersionReviewsResponse.Size(m)
}
func (m *DescribeAppVersionReviewsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeAppVersionReviewsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeAppVersionReviewsResponse proto.InternalMessageInfo

func (m *DescribeAppVersionReviewsResponse) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *DescribeAppVersionReviewsResponse) GetAppVersionReviewSet() []*AppVersionReview {
	if m != nil {
		return m.AppVersionReviewSet
	}
	return nil
}

type DescribeAppVersionAuditsRequest struct {
	// query key, support these fields(version_id, app_id, status, operator, role)
	SearchWord *wrappers.StringValue `protobuf:"bytes,1,opt,name=search_word,json=searchWord,proto3" json:"search_word,omitempty"`
	// sort key, order by sort_key, default create_time
	SortKey *wrappers.StringValue `protobuf:"bytes,2,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
	// value = 0 sort ASC, value = 1 sort DESC
	Reverse *wrappers.BoolValue `protobuf:"bytes,3,opt,name=reverse,proto3" json:"reverse,omitempty"`
	// data limit per page, default is 20, max value is 200
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// data offset, default is 0
	Offset uint32 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// app ids
	AppId []string `protobuf:"bytes,10,rep,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// app version ids
	VersionId []string `protobuf:"bytes,11,rep,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// app version audit status eg.[draft|submitted|passed|rejected|active|in-review|deleted|suspended]
	Status []string `protobuf:"bytes,12,rep,name=status,proto3" json:"status,omitempty"`
	// auditer of app version
	Operator []string `protobuf:"bytes,13,rep,name=operator,proto3" json:"operator,omitempty"`
	// operator type eg.[global_admin|developer|business|technical|isv]
	OperatorType []string `protobuf:"bytes,14,rep,name=operator_type,json=operatorType,proto3" json:"operator_type,omitempty"`
	// select columns to display
	DisplayColumns       []string `protobuf:"bytes,15,rep,name=display_columns,json=displayColumns,proto3" json:"display_columns,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DescribeAppVersionAuditsRequest) Reset()         { *m = DescribeAppVersionAuditsRequest{} }
func (m *DescribeAppVersionAuditsRequest) String() string { return proto.CompactTextString(m) }
func (*DescribeAppVersionAuditsRequest) ProtoMessage()    {}
func (*DescribeAppVersionAuditsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{23}
}

func (m *DescribeAppVersionAuditsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeAppVersionAuditsRequest.Unmarshal(m, b)
}
func (m *DescribeAppVersionAuditsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeAppVersionAuditsRequest.Marshal(b, m, deterministic)
}
func (m *DescribeAppVersionAuditsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeAppVersionAuditsRequest.Merge(m, src)
}
func (m *DescribeAppVersionAuditsRequest) XXX_Size() int {
	return xxx_messageInfo_DescribeAppVersionAuditsRequest.Size(m)
}
func (m *DescribeAppVersionAuditsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeAppVersionAuditsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeAppVersionAuditsRequest proto.InternalMessageInfo

func (m *DescribeAppVersionAuditsRequest) GetSearchWord() *wrappers.StringValue {
	if m != nil {
		return m.SearchWord
	}
	return nil
}

func (m *DescribeAppVersionAuditsRequest) GetSortKey() *wrappers.StringValue {
	if m != nil {
		return m.SortKey
	}
	return nil
}

func (m *DescribeAppVersionAuditsRequest) GetReverse() *wrappers.BoolValue {
	if m != nil {
		return m.Reverse
	}
	return nil
}

func (m *DescribeAppVersionAuditsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DescribeAppVersionAuditsRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DescribeAppVersionAuditsRequest) GetAppId() []string {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *DescribeAppVersionAuditsRequest) GetVersionId() []string {
	if m != nil {
		return m.VersionId
	}
	return nil
}

func (m *DescribeAppVersionAuditsRequest) GetStatus() []string {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DescribeAppVersionAuditsRequest) GetOperator() []string {
	if m != nil {
		return m.Operator
	}
	return nil
}

func (m *DescribeAppVersionAuditsRequest) GetOperatorType() []string {
	if m != nil {
		return m.OperatorType
	}
	return nil
}

func (m *DescribeAppVersionAuditsRequest) GetDisplayColumns() []string {
	if m != nil {
		return m.DisplayColumns
	}
	return nil
}

type DescribeAppVersionAuditsResponse struct {
	// total count of audits of app with specific version
	TotalCount uint32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// list of audit
	AppVersionAuditSet   []*AppVersionAudit `protobuf:"bytes,2,rep,name=app_version_audit_set,json=appVersionAuditSet,proto3" json:"app_version_audit_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DescribeAppVersionAuditsResponse) Reset()         { *m = DescribeAppVersionAuditsResponse{} }
func (m *DescribeAppVersionAuditsResponse) String() string { return proto.CompactTextString(m) }
func (*DescribeAppVersionAuditsResponse) ProtoMessage()    {}
func (*DescribeAppVersionAuditsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{24}
}

func (m *DescribeAppVersionAuditsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeAppVersionAuditsResponse.Unmarshal(m, b)
}
func (m *DescribeAppVersionAuditsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeAppVersionAuditsResponse.Marshal(b, m, deterministic)
}
func (m *DescribeAppVersionAuditsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeAppVersionAuditsResponse.Merge(m, src)
}
func (m *DescribeAppVersionAuditsResponse) XXX_Size() int {
	return xxx_messageInfo_DescribeAppVersionAuditsResponse.Size(m)
}
func (m *DescribeAppVersionAuditsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeAppVersionAuditsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeAppVersionAuditsResponse proto.InternalMessageInfo

func (m *DescribeAppVersionAuditsResponse) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *DescribeAppVersionAuditsResponse) GetAppVersionAuditSet() []*AppVersionAudit {
	if m != nil {
		return m.AppVersionAuditSet
	}
	return nil
}

type DescribeAppVersionsRequest struct {
	// query key, support these fields(version_id, app_id, name, owner, description, package_name, status, type)
	SearchWord *wrappers.StringValue `protobuf:"bytes,1,opt,name=search_word,json=searchWord,proto3" json:"search_word,omitempty"`
	// sort key, order by sort_key, default create_time
	SortKey *wrappers.StringValue `protobuf:"bytes,2,opt,name=sort_key,json=sortKey,proto3" json:"sort_key,omitempty"`
	// value = 0 sort ASC, value = 1 sort DESC
	Reverse *wrappers.BoolValue `protobuf:"bytes,3,opt,name=reverse,proto3" json:"reverse,omitempty"`
	// data limit per page, default value 20, max value 200
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// data offset, default 0
	Offset uint32 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// app version ids
	VersionId []string `protobuf:"bytes,10,rep,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// app ids
	AppId []string `protobuf:"bytes,11,rep,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// app version name
	Name []string `protobuf:"bytes,12,rep,name=name,proto3" json:"name,omitempty"`
	// owner
	Owner []string `protobuf:"bytes,13,rep,name=owner,proto3" json:"owner,omitempty"`
	// description
	Description []string `protobuf:"bytes,14,rep,name=description,proto3" json:"description,omitempty"`
	// app version package name
	PackageName []string `protobuf:"bytes,15,rep,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	// app version status eg.[draft|submitted|passed|rejected|active|in-review|deleted|suspended]
	Status []string `protobuf:"bytes,16,rep,name=status,proto3" json:"status,omitempty"`
	// app version type
	Type []string `protobuf:"bytes,17,rep,name=type,proto3" json:"type,omitempty"`
	// select columns to display
	DisplayColumns       []string `protobuf:"bytes,18,rep,name=display_columns,json=displayColumns,proto3" json:"display_columns,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DescribeAppVersionsRequest) Reset()         { *m = DescribeAppVersionsRequest{} }
func (m *DescribeAppVersionsRequest) String() string { return proto.CompactTextString(m) }
func (*DescribeAppVersionsRequest) ProtoMessage()    {}
func (*DescribeAppVersionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{25}
}

func (m *DescribeAppVersionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeAppVersionsRequest.Unmarshal(m, b)
}
func (m *DescribeAppVersionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeAppVersionsRequest.Marshal(b, m, deterministic)
}
func (m *DescribeAppVersionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeAppVersionsRequest.Merge(m, src)
}
func (m *DescribeAppVersionsRequest) XXX_Size() int {
	return xxx_messageInfo_DescribeAppVersionsRequest.Size(m)
}
func (m *DescribeAppVersionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeAppVersionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeAppVersionsRequest proto.InternalMessageInfo

func (m *DescribeAppVersionsRequest) GetSearchWord() *wrappers.StringValue {
	if m != nil {
		return m.SearchWord
	}
	return nil
}

func (m *DescribeAppVersionsRequest) GetSortKey() *wrappers.StringValue {
	if m != nil {
		return m.SortKey
	}
	return nil
}

func (m *DescribeAppVersionsRequest) GetReverse() *wrappers.BoolValue {
	if m != nil {
		return m.Reverse
	}
	return nil
}

func (m *DescribeAppVersionsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DescribeAppVersionsRequest) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DescribeAppVersionsRequest) GetVersionId() []string {
	if m != nil {
		return m.VersionId
	}
	return nil
}

func (m *DescribeAppVersionsRequest) GetAppId() []string {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *DescribeAppVersionsRequest) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DescribeAppVersionsRequest) GetOwner() []string {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *DescribeAppVersionsRequest) GetDescription() []string {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *DescribeAppVersionsRequest) GetPackageName() []string {
	if m != nil {
		return m.PackageName
	}
	return nil
}

func (m *DescribeAppVersionsRequest) GetStatus() []string {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DescribeAppVersionsRequest) GetType() []string {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *DescribeAppVersionsRequest) GetDisplayColumns() []string {
	if m != nil {
		return m.DisplayColumns
	}
	return nil
}

type DescribeAppVersionsResponse struct {
	// total count of qualified app version
	TotalCount uint32 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// list of app vaesion
	AppVersionSet        []*AppVersion `protobuf:"bytes,2,rep,name=app_version_set,json=appVersionSet,proto3" json:"app_version_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DescribeAppVersionsResponse) Reset()         { *m = DescribeAppVersionsResponse{} }
func (m *DescribeAppVersionsResponse) String() string { return proto.CompactTextString(m) }
func (*DescribeAppVersionsResponse) ProtoMessage()    {}
func (*DescribeAppVersionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{26}
}

func (m *DescribeAppVersionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeAppVersionsResponse.Unmarshal(m, b)
}
func (m *DescribeAppVersionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeAppVersionsResponse.Marshal(b, m, deterministic)
}
func (m *DescribeAppVersionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeAppVersionsResponse.Merge(m, src)
}
func (m *DescribeAppVersionsResponse) XXX_Size() int {
	return xxx_messageInfo_DescribeAppVersionsResponse.Size(m)
}
func (m *DescribeAppVersionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeAppVersionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeAppVersionsResponse proto.InternalMessageInfo

func (m *DescribeAppVersionsResponse) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *DescribeAppVersionsResponse) GetAppVersionSet() []*AppVersion {
	if m != nil {
		return m.AppVersionSet
	}
	return nil
}

type GetAppVersionPackageRequest struct {
	// required, use version id to get package
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetAppVersionPackageRequest) Reset()         { *m = GetAppVersionPackageRequest{} }
func (m *GetAppVersionPackageRequest) String() string { return proto.CompactTextString(m) }
func (*GetAppVersionPackageRequest) ProtoMessage()    {}
func (*GetAppVersionPackageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{27}
}

func (m *GetAppVersionPackageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAppVersionPackageRequest.Unmarshal(m, b)
}
func (m *GetAppVersionPackageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAppVersionPackageRequest.Marshal(b, m, deterministic)
}
func (m *GetAppVersionPackageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppVersionPackageRequest.Merge(m, src)
}
func (m *GetAppVersionPackageRequest) XXX_Size() int {
	return xxx_messageInfo_GetAppVersionPackageRequest.Size(m)
}
func (m *GetAppVersionPackageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppVersionPackageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppVersionPackageRequest proto.InternalMessageInfo

func (m *GetAppVersionPackageRequest) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type GetAppVersionPackageResponse struct {
	// package of specific app version
	Package []byte `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
	// app id of package
	AppId *wrappers.StringValue `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// version id of package
	VersionId            *wrappers.StringValue `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetAppVersionPackageResponse) Reset()         { *m = GetAppVersionPackageResponse{} }
func (m *GetAppVersionPackageResponse) String() string { return proto.CompactTextString(m) }
func (*GetAppVersionPackageResponse) ProtoMessage()    {}
func (*GetAppVersionPackageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{28}
}

func (m *GetAppVersionPackageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAppVersionPackageResponse.Unmarshal(m, b)
}
func (m *GetAppVersionPackageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAppVersionPackageResponse.Marshal(b, m, deterministic)
}
func (m *GetAppVersionPackageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppVersionPackageResponse.Merge(m, src)
}
func (m *GetAppVersionPackageResponse) XXX_Size() int {
	return xxx_messageInfo_GetAppVersionPackageResponse.Size(m)
}
func (m *GetAppVersionPackageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppVersionPackageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppVersionPackageResponse proto.InternalMessageInfo

func (m *GetAppVersionPackageResponse) GetPackage() []byte {
	if m != nil {
		return m.Package
	}
	return nil
}

func (m *GetAppVersionPackageResponse) GetAppId() *wrappers.StringValue {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *GetAppVersionPackageResponse) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type GetAppVersionPackageFilesRequest struct {
	// use version id to get file of package
	VersionId *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// files
	Files                []string `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAppVersionPackageFilesRequest) Reset()         { *m = GetAppVersionPackageFilesRequest{} }
func (m *GetAppVersionPackageFilesRequest) String() string { return proto.CompactTextString(m) }
func (*GetAppVersionPackageFilesRequest) ProtoMessage()    {}
func (*GetAppVersionPackageFilesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{29}
}

func (m *GetAppVersionPackageFilesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAppVersionPackageFilesRequest.Unmarshal(m, b)
}
func (m *GetAppVersionPackageFilesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAppVersionPackageFilesRequest.Marshal(b, m, deterministic)
}
func (m *GetAppVersionPackageFilesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppVersionPackageFilesRequest.Merge(m, src)
}
func (m *GetAppVersionPackageFilesRequest) XXX_Size() int {
	return xxx_messageInfo_GetAppVersionPackageFilesRequest.Size(m)
}
func (m *GetAppVersionPackageFilesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppVersionPackageFilesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppVersionPackageFilesRequest proto.InternalMessageInfo

func (m *GetAppVersionPackageFilesRequest) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

func (m *GetAppVersionPackageFilesRequest) GetFiles() []string {
	if m != nil {
		return m.Files
	}
	return nil
}

type GetAppVersionPackageFilesResponse struct {
	// filename map to content
	Files map[string][]byte `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// version id
	VersionId            *wrappers.StringValue `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetAppVersionPackageFilesResponse) Reset()         { *m = GetAppVersionPackageFilesResponse{} }
func (m *GetAppVersionPackageFilesResponse) String() string { return proto.CompactTextString(m) }
func (*GetAppVersionPackageFilesResponse) ProtoMessage()    {}
func (*GetAppVersionPackageFilesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{30}
}

func (m *GetAppVersionPackageFilesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAppVersionPackageFilesResponse.Unmarshal(m, b)
}
func (m *GetAppVersionPackageFilesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAppVersionPackageFilesResponse.Marshal(b, m, deterministic)
}
func (m *GetAppVersionPackageFilesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppVersionPackageFilesResponse.Merge(m, src)
}
func (m *GetAppVersionPackageFilesResponse) XXX_Size() int {
	return xxx_messageInfo_GetAppVersionPackageFilesResponse.Size(m)
}
func (m *GetAppVersionPackageFilesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppVersionPackageFilesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppVersionPackageFilesResponse proto.InternalMessageInfo

func (m *GetAppVersionPackageFilesResponse) GetFiles() map[string][]byte {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *GetAppVersionPackageFilesResponse) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type GetAppStatisticsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAppStatisticsRequest) Reset()         { *m = GetAppStatisticsRequest{} }
func (m *GetAppStatisticsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAppStatisticsRequest) ProtoMessage()    {}
func (*GetAppStatisticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{31}
}

func (m *GetAppStatisticsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAppStatisticsRequest.Unmarshal(m, b)
}
func (m *GetAppStatisticsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAppStatisticsRequest.Marshal(b, m, deterministic)
}
func (m *GetAppStatisticsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppStatisticsRequest.Merge(m, src)
}
func (m *GetAppStatisticsRequest) XXX_Size() int {
	return xxx_messageInfo_GetAppStatisticsRequest.Size(m)
}
func (m *GetAppStatisticsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppStatisticsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppStatisticsRequest proto.InternalMessageInfo

type GetAppStatisticsResponse struct {
	// range of app created time map to app count, max length is 14
	LastTwoWeekCreated map[string]uint32 `protobuf:"bytes,1,rep,name=last_two_week_created,json=lastTwoWeekCreated,proto3" json:"last_two_week_created,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// repo id map to app count, max length is 10
	TopTenRepos map[string]uint32 `protobuf:"bytes,2,rep,name=top_ten_repos,json=topTenRepos,proto3" json:"top_ten_repos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// total app count
	AppCount uint32 `protobuf:"varint,3,opt,name=app_count,json=appCount,proto3" json:"app_count,omitempty"`
	// total repository count
	RepoCount            uint32   `protobuf:"varint,4,opt,name=repo_count,json=repoCount,proto3" json:"repo_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAppStatisticsResponse) Reset()         { *m = GetAppStatisticsResponse{} }
func (m *GetAppStatisticsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAppStatisticsResponse) ProtoMessage()    {}
func (*GetAppStatisticsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{32}
}

func (m *GetAppStatisticsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAppStatisticsResponse.Unmarshal(m, b)
}
func (m *GetAppStatisticsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAppStatisticsResponse.Marshal(b, m, deterministic)
}
func (m *GetAppStatisticsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppStatisticsResponse.Merge(m, src)
}
func (m *GetAppStatisticsResponse) XXX_Size() int {
	return xxx_messageInfo_GetAppStatisticsResponse.Size(m)
}
func (m *GetAppStatisticsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppStatisticsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppStatisticsResponse proto.InternalMessageInfo

func (m *GetAppStatisticsResponse) GetLastTwoWeekCreated() map[string]uint32 {
	if m != nil {
		return m.LastTwoWeekCreated
	}
	return nil
}

func (m *GetAppStatisticsResponse) GetTopTenRepos() map[string]uint32 {
	if m != nil {
		return m.TopTenRepos
	}
	return nil
}

func (m *GetAppStatisticsResponse) GetAppCount() uint32 {
	if m != nil {
		return m.AppCount
	}
	return 0
}

func (m *GetAppStatisticsResponse) GetRepoCount() uint32 {
	if m != nil {
		return m.RepoCount
	}
	return 0
}

type SubmitAppVersionRequest struct {
	// required, id of version to submit
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SubmitAppVersionRequest) Reset()         { *m = SubmitAppVersionRequest{} }
func (m *SubmitAppVersionRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitAppVersionRequest) ProtoMessage()    {}
func (*SubmitAppVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{33}
}

func (m *SubmitAppVersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitAppVersionRequest.Unmarshal(m, b)
}
func (m *SubmitAppVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitAppVersionRequest.Marshal(b, m, deterministic)
}
func (m *SubmitAppVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitAppVersionRequest.Merge(m, src)
}
func (m *SubmitAppVersionRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitAppVersionRequest.Size(m)
}
func (m *SubmitAppVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitAppVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitAppVersionRequest proto.InternalMessageInfo

func (m *SubmitAppVersionRequest) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type SubmitAppVersionResponse struct {
	// required, id of version submitted
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SubmitAppVersionResponse) Reset()         { *m = SubmitAppVersionResponse{} }
func (m *SubmitAppVersionResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitAppVersionResponse) ProtoMessage()    {}
func (*SubmitAppVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{34}
}

func (m *SubmitAppVersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitAppVersionResponse.Unmarshal(m, b)
}
func (m *SubmitAppVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitAppVersionResponse.Marshal(b, m, deterministic)
}
func (m *SubmitAppVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitAppVersionResponse.Merge(m, src)
}
func (m *SubmitAppVersionResponse) XXX_Size() int {
	return xxx_messageInfo_SubmitAppVersionResponse.Size(m)
}
func (m *SubmitAppVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitAppVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitAppVersionResponse proto.InternalMessageInfo

func (m *SubmitAppVersionResponse) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type CancelAppVersionRequest struct {
	// required, id of version to cancel
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CancelAppVersionRequest) Reset()         { *m = CancelAppVersionRequest{} }
func (m *CancelAppVersionRequest) String() string { return proto.CompactTextString(m) }
func (*CancelAppVersionRequest) ProtoMessage()    {}
func (*CancelAppVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{35}
}

func (m *CancelAppVersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelAppVersionRequest.Unmarshal(m, b)
}
func (m *CancelAppVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelAppVersionRequest.Marshal(b, m, deterministic)
}
func (m *CancelAppVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelAppVersionRequest.Merge(m, src)
}
func (m *CancelAppVersionRequest) XXX_Size() int {
	return xxx_messageInfo_CancelAppVersionRequest.Size(m)
}
func (m *CancelAppVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelAppVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelAppVersionRequest proto.InternalMessageInfo

func (m *CancelAppVersionRequest) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type CancelAppVersionResponse struct {
	// required, id of version canceled
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CancelAppVersionResponse) Reset()         { *m = CancelAppVersionResponse{} }
func (m *CancelAppVersionResponse) String() string { return proto.CompactTextString(m) }
func (*CancelAppVersionResponse) ProtoMessage()    {}
func (*CancelAppVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{36}
}

func (m *CancelAppVersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelAppVersionResponse.Unmarshal(m, b)
}
func (m *CancelAppVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelAppVersionResponse.Marshal(b, m, deterministic)
}
func (m *CancelAppVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelAppVersionResponse.Merge(m, src)
}
func (m *CancelAppVersionResponse) XXX_Size() int {
	return xxx_messageInfo_CancelAppVersionResponse.Size(m)
}
func (m *CancelAppVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelAppVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CancelAppVersionResponse proto.InternalMessageInfo

func (m *CancelAppVersionResponse) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type ReleaseAppVersionRequest struct {
	// required, id of version to release
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ReleaseAppVersionRequest) Reset()         { *m = ReleaseAppVersionRequest{} }
func (m *ReleaseAppVersionRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseAppVersionRequest) ProtoMessage()    {}
func (*ReleaseAppVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{37}
}

func (m *ReleaseAppVersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseAppVersionRequest.Unmarshal(m, b)
}
func (m *ReleaseAppVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseAppVersionRequest.Marshal(b, m, deterministic)
}
func (m *ReleaseAppVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseAppVersionRequest.Merge(m, src)
}
func (m *ReleaseAppVersionRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseAppVersionRequest.Size(m)
}
func (m *ReleaseAppVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseAppVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseAppVersionRequest proto.InternalMessageInfo

func (m *ReleaseAppVersionRequest) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type ReleaseAppVersionResponse struct {
	// required, id of version released
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ReleaseAppVersionResponse) Reset()         { *m = ReleaseAppVersionResponse{} }
func (m *ReleaseAppVersionResponse) String() string { return proto.CompactTextString(m) }
func (*ReleaseAppVersionResponse) ProtoMessage()    {}
func (*ReleaseAppVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{38}
}

func (m *ReleaseAppVersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseAppVersionResponse.Unmarshal(m, b)
}
func (m *ReleaseAppVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseAppVersionResponse.Marshal(b, m, deterministic)
}
func (m *ReleaseAppVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseAppVersionResponse.Merge(m, src)
}
func (m *ReleaseAppVersionResponse) XXX_Size() int {
	return xxx_messageInfo_ReleaseAppVersionResponse.Size(m)
}
func (m *ReleaseAppVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseAppVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseAppVersionResponse proto.InternalMessageInfo

func (m *ReleaseAppVersionResponse) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type DeleteAppVersionRequest struct {
	// required, id of version to delete
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DeleteAppVersionRequest) Reset()         { *m = DeleteAppVersionRequest{} }
func (m *DeleteAppVersionRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAppVersionRequest) ProtoMessage()    {}
func (*DeleteAppVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{39}
}

func (m *DeleteAppVersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteAppVersionRequest.Unmarshal(m, b)
}
func (m *DeleteAppVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteAppVersionRequest.Marshal(b, m, deterministic)
}
func (m *DeleteAppVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAppVersionRequest.Merge(m, src)
}
func (m *DeleteAppVersionRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteAppVersionRequest.Size(m)
}
func (m *DeleteAppVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAppVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAppVersionRequest proto.InternalMessageInfo

func (m *DeleteAppVersionRequest) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type DeleteAppVersionResponse struct {
	// required, id of version deleted
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DeleteAppVersionResponse) Reset()         { *m = DeleteAppVersionResponse{} }
func (m *DeleteAppVersionResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteAppVersionResponse) ProtoMessage()    {}
func (*DeleteAppVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{40}
}

func (m *DeleteAppVersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteAppVersionResponse.Unmarshal(m, b)
}
func (m *DeleteAppVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteAppVersionResponse.Marshal(b, m, deterministic)
}
func (m *DeleteAppVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAppVersionResponse.Merge(m, src)
}
func (m *DeleteAppVersionResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteAppVersionResponse.Size(m)
}
func (m *DeleteAppVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAppVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAppVersionResponse proto.InternalMessageInfo

func (m *DeleteAppVersionResponse) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type ReviewAppVersionRequest struct {
	// required, id of version to review
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ReviewAppVersionRequest) Reset()         { *m = ReviewAppVersionRequest{} }
func (m *ReviewAppVersionRequest) String() string { return proto.CompactTextString(m) }
func (*ReviewAppVersionRequest) ProtoMessage()    {}
func (*ReviewAppVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{41}
}

func (m *ReviewAppVersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReviewAppVersionRequest.Unmarshal(m, b)
}
func (m *ReviewAppVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReviewAppVersionRequest.Marshal(b, m, deterministic)
}
func (m *ReviewAppVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReviewAppVersionRequest.Merge(m, src)
}
func (m *ReviewAppVersionRequest) XXX_Size() int {
	return xxx_messageInfo_ReviewAppVersionRequest.Size(m)
}
func (m *ReviewAppVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReviewAppVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReviewAppVersionRequest proto.InternalMessageInfo

func (m *ReviewAppVersionRequest) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type ReviewAppVersionResponse struct {
	// id of version reviewed
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ReviewAppVersionResponse) Reset()         { *m = ReviewAppVersionResponse{} }
func (m *ReviewAppVersionResponse) String() string { return proto.CompactTextString(m) }
func (*ReviewAppVersionResponse) ProtoMessage()    {}
func (*ReviewAppVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{42}
}

func (m *ReviewAppVersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReviewAppVersionResponse.Unmarshal(m, b)
}
func (m *ReviewAppVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReviewAppVersionResponse.Marshal(b, m, deterministic)
}
func (m *ReviewAppVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReviewAppVersionResponse.Merge(m, src)
}
func (m *ReviewAppVersionResponse) XXX_Size() int {
	return xxx_messageInfo_ReviewAppVersionResponse.Size(m)
}
func (m *ReviewAppVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReviewAppVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReviewAppVersionResponse proto.InternalMessageInfo

func (m *ReviewAppVersionResponse) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type PassAppVersionRequest struct {
	// required, id of version to pass
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PassAppVersionRequest) Reset()         { *m = PassAppVersionRequest{} }
func (m *PassAppVersionRequest) String() string { return proto.CompactTextString(m) }
func (*PassAppVersionRequest) ProtoMessage()    {}
func (*PassAppVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{43}
}

func (m *PassAppVersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PassAppVersionRequest.Unmarshal(m, b)
}
func (m *PassAppVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PassAppVersionRequest.Marshal(b, m, deterministic)
}
func (m *PassAppVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PassAppVersionRequest.Merge(m, src)
}
func (m *PassAppVersionRequest) XXX_Size() int {
	return xxx_messageInfo_PassAppVersionRequest.Size(m)
}
func (m *PassAppVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PassAppVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PassAppVersionRequest proto.InternalMessageInfo

func (m *PassAppVersionRequest) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type PassAppVersionResponse struct {
	// id of version passed
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PassAppVersionResponse) Reset()         { *m = PassAppVersionResponse{} }
func (m *PassAppVersionResponse) String() string { return proto.CompactTextString(m) }
func (*PassAppVersionResponse) ProtoMessage()    {}
func (*PassAppVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{44}
}

func (m *PassAppVersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PassAppVersionResponse.Unmarshal(m, b)
}
func (m *PassAppVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PassAppVersionResponse.Marshal(b, m, deterministic)
}
func (m *PassAppVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PassAppVersionResponse.Merge(m, src)
}
func (m *PassAppVersionResponse) XXX_Size() int {
	return xxx_messageInfo_PassAppVersionResponse.Size(m)
}
func (m *PassAppVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PassAppVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PassAppVersionResponse proto.InternalMessageInfo

func (m *PassAppVersionResponse) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type RejectAppVersionRequest struct {
	// required, id of version to reject
	VersionId *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// reject message
	Message              *wrappers.StringValue `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RejectAppVersionRequest) Reset()         { *m = RejectAppVersionRequest{} }
func (m *RejectAppVersionRequest) String() string { return proto.CompactTextString(m) }
func (*RejectAppVersionRequest) ProtoMessage()    {}
func (*RejectAppVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{45}
}

func (m *RejectAppVersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RejectAppVersionRequest.Unmarshal(m, b)
}
func (m *RejectAppVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RejectAppVersionRequest.Marshal(b, m, deterministic)
}
func (m *RejectAppVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RejectAppVersionRequest.Merge(m, src)
}
func (m *RejectAppVersionRequest) XXX_Size() int {
	return xxx_messageInfo_RejectAppVersionRequest.Size(m)
}
func (m *RejectAppVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RejectAppVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RejectAppVersionRequest proto.InternalMessageInfo

func (m *RejectAppVersionRequest) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

func (m *RejectAppVersionRequest) GetMessage() *wrappers.StringValue {
	if m != nil {
		return m.Message
	}
	return nil
}

type RejectAppVersionResponse struct {
	// id of version rejected
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RejectAppVersionResponse) Reset()         { *m = RejectAppVersionResponse{} }
func (m *RejectAppVersionResponse) String() string { return proto.CompactTextString(m) }
func (*RejectAppVersionResponse) ProtoMessage()    {}
func (*RejectAppVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{46}
}

func (m *RejectAppVersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RejectAppVersionResponse.Unmarshal(m, b)
}
func (m *RejectAppVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RejectAppVersionResponse.Marshal(b, m, deterministic)
}
func (m *RejectAppVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RejectAppVersionResponse.Merge(m, src)
}
func (m *RejectAppVersionResponse) XXX_Size() int {
	return xxx_messageInfo_RejectAppVersionResponse.Size(m)
}
func (m *RejectAppVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RejectAppVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RejectAppVersionResponse proto.InternalMessageInfo

func (m *RejectAppVersionResponse) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type SuspendAppVersionRequest struct {
	// required, id of version to suspend
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SuspendAppVersionRequest) Reset()         { *m = SuspendAppVersionRequest{} }
func (m *SuspendAppVersionRequest) String() string { return proto.CompactTextString(m) }
func (*SuspendAppVersionRequest) ProtoMessage()    {}
func (*SuspendAppVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{47}
}

func (m *SuspendAppVersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SuspendAppVersionRequest.Unmarshal(m, b)
}
func (m *SuspendAppVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SuspendAppVersionRequest.Marshal(b, m, deterministic)
}
func (m *SuspendAppVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuspendAppVersionRequest.Merge(m, src)
}
func (m *SuspendAppVersionRequest) XXX_Size() int {
	return xxx_messageInfo_SuspendAppVersionRequest.Size(m)
}
func (m *SuspendAppVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SuspendAppVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SuspendAppVersionRequest proto.InternalMessageInfo

func (m *SuspendAppVersionRequest) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type SuspendAppVersionResponse struct {
	// id of version suspended
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SuspendAppVersionResponse) Reset()         { *m = SuspendAppVersionResponse{} }
func (m *SuspendAppVersionResponse) String() string { return proto.CompactTextString(m) }
func (*SuspendAppVersionResponse) ProtoMessage()    {}
func (*SuspendAppVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{48}
}

func (m *SuspendAppVersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SuspendAppVersionResponse.Unmarshal(m, b)
}
func (m *SuspendAppVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SuspendAppVersionResponse.Marshal(b, m, deterministic)
}
func (m *SuspendAppVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuspendAppVersionResponse.Merge(m, src)
}
func (m *SuspendAppVersionResponse) XXX_Size() int {
	return xxx_messageInfo_SuspendAppVersionResponse.Size(m)
}
func (m *SuspendAppVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SuspendAppVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SuspendAppVersionResponse proto.InternalMessageInfo

func (m *SuspendAppVersionResponse) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type RecoverAppVersionRequest struct {
	// required, id of version to recover
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RecoverAppVersionRequest) Reset()         { *m = RecoverAppVersionRequest{} }
func (m *RecoverAppVersionRequest) String() string { return proto.CompactTextString(m) }
func (*RecoverAppVersionRequest) ProtoMessage()    {}
func (*RecoverAppVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{49}
}

func (m *RecoverAppVersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecoverAppVersionRequest.Unmarshal(m, b)
}
func (m *RecoverAppVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecoverAppVersionRequest.Marshal(b, m, deterministic)
}
func (m *RecoverAppVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoverAppVersionRequest.Merge(m, src)
}
func (m *RecoverAppVersionRequest) XXX_Size() int {
	return xxx_messageInfo_RecoverAppVersionRequest.Size(m)
}
func (m *RecoverAppVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoverAppVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecoverAppVersionRequest proto.InternalMessageInfo

func (m *RecoverAppVersionRequest) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type RecoverAppVersionResponse struct {
	// id of version recovered
	VersionId            *wrappers.StringValue `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RecoverAppVersionResponse) Reset()         { *m = RecoverAppVersionResponse{} }
func (m *RecoverAppVersionResponse) String() string { return proto.CompactTextString(m) }
func (*RecoverAppVersionResponse) ProtoMessage()    {}
func (*RecoverAppVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{50}
}

func (m *RecoverAppVersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecoverAppVersionResponse.Unmarshal(m, b)
}
func (m *RecoverAppVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecoverAppVersionResponse.Marshal(b, m, deterministic)
}
func (m *RecoverAppVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoverAppVersionResponse.Merge(m, src)
}
func (m *RecoverAppVersionResponse) XXX_Size() int {
	return xxx_messageInfo_RecoverAppVersionResponse.Size(m)
}
func (m *RecoverAppVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoverAppVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecoverAppVersionResponse proto.InternalMessageInfo

func (m *RecoverAppVersionResponse) GetVersionId() *wrappers.StringValue {
	if m != nil {
		return m.VersionId
	}
	return nil
}

type SyncRepoRequest struct {
	// required, id of repository to synchronize
	RepoId               string   `protobuf:"bytes,1,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncRepoRequest) Reset()         { *m = SyncRepoRequest{} }
func (m *SyncRepoRequest) String() string { return proto.CompactTextString(m) }
func (*SyncRepoRequest) ProtoMessage()    {}
func (*SyncRepoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{51}
}

func (m *SyncRepoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncRepoRequest.Unmarshal(m, b)
}
func (m *SyncRepoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncRepoRequest.Marshal(b, m, deterministic)
}
func (m *SyncRepoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRepoRequest.Merge(m, src)
}
func (m *SyncRepoRequest) XXX_Size() int {
	return xxx_messageInfo_SyncRepoRequest.Size(m)
}
func (m *SyncRepoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRepoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRepoRequest proto.InternalMessageInfo

func (m *SyncRepoRequest) GetRepoId() string {
	if m != nil {
		return m.RepoId
	}
	return ""
}

type SyncRepoResponse struct {
	// synchronized ok or not
	Failed bool `protobuf:"varint,1,opt,name=failed,proto3" json:"failed,omitempty"`
	// result
	Result               string   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncRepoResponse) Reset()         { *m = SyncRepoResponse{} }
func (m *SyncRepoResponse) String() string { return proto.CompactTextString(m) }
func (*SyncRepoResponse) ProtoMessage()    {}
func (*SyncRepoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{52}
}

func (m *SyncRepoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncRepoResponse.Unmarshal(m, b)
}
func (m *SyncRepoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncRepoResponse.Marshal(b, m, deterministic)
}
func (m *SyncRepoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRepoResponse.Merge(m, src)
}
func (m *SyncRepoResponse) XXX_Size() int {
	return xxx_messageInfo_SyncRepoResponse.Size(m)
}
func (m *SyncRepoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRepoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRepoResponse proto.InternalMessageInfo

func (m *SyncRepoResponse) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *SyncRepoResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterEnum("openpitrix.UploadAppAttachmentRequest_Type", UploadAppAttachmentRequest_Type_name, UploadAppAttachmentRequest_Type_value)
	proto.RegisterType((*CreateAppRequest)(nil), "openpitrix.CreateAppRequest")
	proto.RegisterType((*CreateAppResponse)(nil), "openpitrix.CreateAppResponse")
	proto.RegisterType((*ValidatePackageRequest)(nil), "openpitrix.ValidatePackageRequest")
	proto.RegisterType((*ValidatePackageResponse)(nil), "openpitrix.ValidatePackageResponse")
	proto.RegisterMapType((map[string]string)(nil), "openpitrix.ValidatePackageResponse.ErrorDetailsEntry")
	proto.RegisterType((*ModifyAppRequest)(nil), "openpitrix.ModifyAppRequest")
	proto.RegisterType((*ModifyAppResponse)(nil), "openpitrix.ModifyAppResponse")
	proto.RegisterType((*UploadAppAttachmentRequest)(nil), "openpitrix.UploadAppAttachmentRequest")
	proto.RegisterType((*UploadAppAttachmentResponse)(nil), "openpitrix.UploadAppAttachmentResponse")
	proto.RegisterType((*DeleteAppsRequest)(nil), "openpitrix.DeleteAppsRequest")
	proto.RegisterType((*DeleteAppsResponse)(nil), "openpitrix.DeleteAppsResponse")
	proto.RegisterType((*App)(nil), "openpitrix.App")
	proto.RegisterType((*DescribeAppsRequest)(nil), "openpitrix.DescribeAppsRequest")
	proto.RegisterType((*DescribeAppsResponse)(nil), "openpitrix.DescribeAppsResponse")
	proto.RegisterType((*CreateAppVersionRequest)(nil), "openpitrix.CreateAppVersionRequest")
	proto.RegisterType((*CreateAppVersionResponse)(nil), "openpitrix.CreateAppVersionResponse")
	proto.RegisterType((*ModifyAppVersionRequest)(nil), "openpitrix.ModifyAppVersionRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "openpitrix.ModifyAppVersionRequest.PackageFilesEntry")
	proto.RegisterType((*ModifyAppVersionResponse)(nil), "openpitrix.ModifyAppVersionResponse")
	proto.RegisterType((*AppVersion)(nil), "openpitrix.AppVersion")
	proto.RegisterType((*AppVersionAudit)(nil), "openpitrix.AppVersionAudit")
	proto.RegisterType((*AppVersionReviewPhase)(nil), "openpitrix.AppVersionReviewPhase")
	proto.RegisterType((*AppVersionReview)(nil), "openpitrix.AppVersionReview")
	proto.RegisterMapType((map[string]*AppVersionReviewPhase)(nil), "openpitrix.AppVersionReview.PhaseEntry")
	proto.RegisterType((*DescribeAppVersionReviewsRequest)(nil), "openpitrix.DescribeAppVersionReviewsRequest")
	proto.RegisterType((*DescribeAppVersionReviewsResponse)(nil), "openpitrix.DescribeAppVersionReviewsResponse")
	proto.RegisterType((*DescribeAppVersionAuditsRequest)(nil), "openpitrix.DescribeAppVersionAuditsRequest")
	proto.RegisterType((*DescribeAppVersionAuditsResponse)(nil), "openpitrix.DescribeAppVersionAuditsResponse")
	proto.RegisterType((*DescribeAppVersionsRequest)(nil), "openpitrix.DescribeAppVersionsRequest")
	proto.RegisterType((*DescribeAppVersionsResponse)(nil), "openpitrix.DescribeAppVersionsResponse")
	proto.RegisterType((*GetAppVersionPackageRequest)(nil), "openpitrix.GetAppVersionPackageRequest")
	proto.RegisterType((*GetAppVersionPackageResponse)(nil), "openpitrix.GetAppVersionPackageResponse")
	proto.RegisterType((*GetAppVersionPackageFilesRequest)(nil), "openpitrix.GetAppVersionPackageFilesRequest")
	proto.RegisterType((*GetAppVersionPackageFilesResponse)(nil), "openpitrix.GetAppVersionPackageFilesResponse")
	proto.RegisterMapType((map[string][]byte)(nil), "openpitrix.GetAppVersionPackageFilesResponse.FilesEntry")
	proto.RegisterType((*GetAppStatisticsRequest)(nil), "openpitrix.GetAppStatisticsRequest")
	proto.RegisterType((*GetAppStatisticsResponse)(nil), "openpitrix.GetAppStatisticsResponse")
	proto.RegisterMapType((map[string]uint32)(nil), "openpitrix.GetAppStatisticsResponse.LastTwoWeekCreatedEntry")
	proto.RegisterMapType((map[string]uint32)(nil), "openpitrix.GetAppStatisticsResponse.TopTenReposEntry")
	proto.RegisterType((*SubmitAppVersionRequest)(nil), "openpitrix.SubmitAppVersionRequest")
	proto.RegisterType((*SubmitAppVersionResponse)(nil), "openpitrix.SubmitAppVersionResponse")
	proto.RegisterType((*CancelAppVersionRequest)(nil), "openpitrix.CancelAppVersionRequest")
	proto.RegisterType((*CancelAppVersionResponse)(nil), "openpitrix.CancelAppVersionResponse")
	proto.RegisterType((*ReleaseAppVersionRequest)(nil), "openpitrix.ReleaseAppVersionRequest")
	proto.RegisterType((*ReleaseAppVersionResponse)(nil), "openpitrix.ReleaseAppVersionResponse")
	proto.RegisterType((*DeleteAppVersionRequest)(nil), "openpitrix.DeleteAppVersionRequest")
	proto.RegisterType((*DeleteAppVersionResponse)(nil), "openpitrix.DeleteAppVersionResponse")
	proto.RegisterType((*ReviewAppVersionRequest)(nil), "openpitrix.ReviewAppVersionRequest")
	proto.RegisterType((*ReviewAppVersionResponse)(nil), "openpitrix.ReviewAppVersionResponse")
	proto.RegisterType((*PassAppVersionRequest)(nil), "openpitrix.PassAppVersionRequest")
	proto.RegisterType((*PassAppVersionResponse)(nil), "openpitrix.PassAppVersionResponse")
	proto.RegisterType((*RejectAppVersionRequest)(nil), "openpitrix.RejectAppVersionRequest")
	proto.RegisterType((*RejectAppVersionResponse)(nil), "openpitrix.RejectAppVersionResponse")
	proto.RegisterType((*SuspendAppVersionRequest)(nil), "openpitrix.SuspendAppVersionRequest")
	proto.RegisterType((*SuspendAppVersionResponse)(nil), "openpitrix.SuspendAppVersionResponse")
	proto.RegisterType((*RecoverAppVersionRequest)(nil), "openpitrix.RecoverAppVersionRequest")
	proto.RegisterType((*RecoverAppVersionResponse)(nil), "openpitrix.RecoverAppVersionResponse")
	proto.RegisterType((*SyncRepoRequest)(nil), "openpitrix.SyncRepoRequest")
	proto.RegisterType((*SyncRepoResponse)(nil), "openpitrix.SyncRepoResponse")
}

func init() { proto.RegisterFile("app.proto", fileDescriptor_e0f9056a14b86d47) }

var fileDescriptor_e0f9056a14b86d47 = []byte{
	// 3987 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0x4d, 0x6c, 0x24, 0x49,
	0x56, 0xde, 0xac, 0xb2, 0xdd, 0xf6, 0x2b, 0xbb, 0xed, 0x0a, 0xb7, 0xed, 0x72, 0xf5, 0x5f, 0x76,
	0x76, 0xef, 0xf4, 0x5f, 0xb5, 0x3d, 0xeb, 0x99, 0xd9, 0x69, 0x66, 0x98, 0x6e, 0x55, 0x77, 0xcf,
	0xec, 0xf4, 0xc2, 0x36, 0x4d, 0xb5, 0xa7, 0x1b, 0x1a, 0x89, 0x22, 0x5c, 0x15, 0xb6, 0x73, 0xbb,
	0x9c, 0x99, 0x9b, 0x11, 0x65, 0xe3, 0x0b, 0x87, 0x95, 0xf6, 0x08, 0x12, 0xb5, 0x12, 0x20, 0xb4,
	0x68, 0xf8, 0x97, 0x76, 0x24, 0x56, 0x08, 0x58, 0x69, 0x81, 0x91, 0x56, 0xc0, 0x8a, 0x0b, 0x3f,
	0x42, 0xe2, 0xc6, 0x81, 0x13, 0x27, 0x8e, 0x9c, 0x39, 0xa0, 0xf8, 0xc9, 0xcc, 0xc8, 0xac, 0xca,
	0xaa, 0xcc, 0x72, 0x59, 0xc3, 0x6a, 0xe7, 0x64, 0x57, 0xc6, 0x7b, 0x11, 0x2f, 0xde, 0xfb, 0xe2,
	0xfd, 0x45, 0x26, 0xcc, 0x61, 0xcf, 0xdb, 0xf0, 0x7c, 0x97, 0xb9, 0x08, 0x5c, 0x8f, 0x38, 0x9e,
	0xcd, 0x7c, 0xfb, 0x57, 0xab, 0x97, 0xf6, 0x5c, 0x77, 0xaf, 0x43, 0x36, 0xc5, 0xc8, 0x4e, 0x77,
	0x77, 0xf3, 0xc8, 0xc7, 0x9e, 0x47, 0x7c, 0x2a, 0x69, 0xab, 0x97, 0x93, 0xe3, 0xcc, 0x3e, 0x20,
	0x94, 0xe1, 0x03, 0x35, 0x59, 0xf5, 0x82, 0x22, 0xc0, 0x9e, 0xbd, 0x89, 0x1d, 0xc7, 0x65, 0x98,
	0xd9, 0xae, 0x13, 0xb0, 0xd7, 0xc4, 0x9f, 0xd6, 0x9d, 0x3d, 0xe2, 0xdc, 0xa1, 0x47, 0x78, 0x6f,
	0x8f, 0xf8, 0x9b, 0xae, 0x27, 0x28, 0x06, 0x50, 0x97, 0xd8, 0xb1, 0x47, 0xd4, 0x0f, 0xeb, 0xd7,
	0x8b, 0xb0, 0xf4, 0xd0, 0x27, 0x98, 0x91, 0xba, 0xe7, 0x35, 0xc8, 0x37, 0xba, 0x84, 0x32, 0xf4,
	0x3a, 0x4c, 0x39, 0xf8, 0x80, 0x54, 0x0c, 0xd3, 0xb8, 0x51, 0xda, 0xba, 0xb0, 0x21, 0x17, 0xdf,
	0x08, 0xa4, 0xdb, 0x78, 0xc6, 0x7c, 0xdb, 0xd9, 0x7b, 0x8e, 0x3b, 0x5d, 0xd2, 0x10, 0x94, 0xe8,
	0x3e, 0xcc, 0x1f, 0x12, 0x9f, 0xda, 0xae, 0xd3, 0xe4, 0xb3, 0x57, 0x0a, 0x19, 0x38, 0x4b, 0x8a,
	0x63, 0xfb, 0xd8, 0x23, 0xe8, 0x11, 0x2c, 0x06, 0x13, 0x78, 0xb8, 0xf5, 0x0a, 0xef, 0x91, 0x4a,
	0x51, 0xcc, 0x71, 0xbe, 0x6f, 0x8e, 0x07, 0xc7, 0x8c, 0x50, 0x39, 0xc5, 0x59, 0xc5, 0xf3, 0x54,
	0xb2, 0xe8, 0x62, 0x88, 0x0d, 0x4c, 0xe7, 0x10, 0xe3, 0x09, 0xdf, 0xc7, 0x26, 0x4c, 0xd9, 0x2d,
	0xd7, 0xa9, 0xcc, 0x8c, 0x5e, 0x5b, 0x10, 0xa2, 0x0d, 0x28, 0xda, 0xf4, 0xb0, 0x72, 0x26, 0xc3,
	0x42, 0x9c, 0x10, 0x5d, 0x02, 0x68, 0x61, 0x46, 0xf6, 0x5c, 0xdf, 0x26, 0xb4, 0x32, 0x6b, 0x16,
	0x6f, 0xcc, 0x35, 0xb4, 0x27, 0xd6, 0xb7, 0x0c, 0x28, 0x6b, 0xf6, 0xa0, 0x9e, 0xeb, 0x50, 0x82,
	0xde, 0x80, 0x19, 0xec, 0x79, 0x4d, 0xbb, 0x9d, 0xc9, 0x24, 0xd3, 0xd8, 0xf3, 0x1e, 0xb7, 0xd1,
	0xbb, 0x00, 0x81, 0x32, 0xec, 0x76, 0x26, 0x8b, 0xcc, 0x29, 0xfa, 0xc7, 0x6d, 0xab, 0x0d, 0xab,
	0xcf, 0x71, 0xc7, 0x6e, 0x63, 0x46, 0x94, 0x72, 0x03, 0x70, 0x5c, 0x19, 0x60, 0xea, 0xb9, 0xb8,
	0x31, 0xaf, 0x0f, 0x36, 0xe6, 0x7c, 0xd2, 0x5e, 0xd6, 0xbf, 0x14, 0x61, 0xad, 0x6f, 0x19, 0xb5,
	0xe7, 0x97, 0xb0, 0x40, 0x7c, 0xdf, 0xf5, 0x9b, 0x6d, 0xc2, 0xb0, 0xdd, 0xa1, 0x15, 0xc3, 0x2c,
	0xde, 0x28, 0x6d, 0xbd, 0xb5, 0x11, 0x9d, 0xab, 0x8d, 0x14, 0xde, 0x8d, 0xf7, 0x39, 0xe3, 0x23,
	0xc9, 0xf7, 0xbe, 0xc3, 0xfc, 0xe3, 0xc6, 0x3c, 0xd1, 0x1e, 0xa1, 0x2d, 0x98, 0x16, 0xbf, 0x33,
	0x69, 0x45, 0x92, 0x86, 0x87, 0xa2, 0x38, 0xce, 0xa1, 0x10, 0x9c, 0x53, 0x79, 0xd1, 0xb8, 0x01,
	0xc5, 0xae, 0xdf, 0xc9, 0x84, 0x62, 0x4e, 0x88, 0xee, 0x41, 0xa9, 0x4d, 0x68, 0xcb, 0xb7, 0xc5,
	0xd9, 0x57, 0x20, 0x1e, 0xb1, 0x9e, 0xc6, 0x50, 0xbd, 0x0f, 0xe5, 0x3e, 0xcd, 0xa1, 0x25, 0x28,
	0xbe, 0x22, 0xc7, 0x02, 0x78, 0x73, 0x0d, 0xfe, 0x2f, 0x3a, 0x07, 0xd3, 0x87, 0x9c, 0x59, 0x99,
	0x5e, 0xfe, 0x78, 0xa7, 0x70, 0xd7, 0xb0, 0xbe, 0x39, 0x0d, 0x4b, 0x5f, 0x73, 0xdb, 0xf6, 0xee,
	0xb1, 0xe6, 0x4d, 0xc6, 0x02, 0x6f, 0xa0, 0xed, 0x42, 0x66, 0x6d, 0x27, 0x36, 0x5f, 0xcc, 0xb9,
	0x79, 0xbe, 0xe2, 0xbe, 0x9b, 0xd1, 0x4a, 0x82, 0x92, 0xaf, 0x78, 0x80, 0x6d, 0x87, 0x61, 0xdb,
	0x21, 0x3e, 0xcd, 0xe4, 0x03, 0x74, 0x06, 0xf4, 0x65, 0x38, 0x43, 0xdd, 0xae, 0xdf, 0x12, 0x8e,
	0x60, 0x34, 0x6f, 0x40, 0x8c, 0xde, 0x84, 0x19, 0x9f, 0xe0, 0xf6, 0x01, 0xa9, 0xcc, 0x65, 0x60,
	0x53, 0xb4, 0x5c, 0x5a, 0xbc, 0x43, 0x99, 0x8f, 0x5b, 0x42, 0x3f, 0x90, 0x45, 0x5a, 0x8d, 0x81,
	0x83, 0x91, 0xb9, 0xb4, 0x52, 0xca, 0x02, 0x46, 0xe6, 0x52, 0xf4, 0x1e, 0x94, 0x94, 0x5f, 0x3b,
	0xe6, 0xb6, 0x9f, 0xcf, 0xc0, 0x17, 0x38, 0xc2, 0xe3, 0xc7, 0x6d, 0x74, 0x17, 0x66, 0x5f, 0x91,
	0xe3, 0x23, 0xd7, 0x6f, 0xd3, 0xca, 0x42, 0x06, 0xde, 0x90, 0xda, 0xfa, 0x10, 0xca, 0x1a, 0x06,
	0x4f, 0xe0, 0x41, 0xad, 0xbf, 0x29, 0x40, 0xf5, 0x23, 0xaf, 0xe3, 0xe2, 0x76, 0xdd, 0xf3, 0xea,
	0x8c, 0xe1, 0xd6, 0xfe, 0x01, 0x71, 0xd8, 0x89, 0x80, 0x7d, 0x1f, 0xa6, 0x42, 0xb7, 0x79, 0x76,
	0xeb, 0xb6, 0xee, 0xcd, 0xd2, 0x97, 0xda, 0xe0, 0x6e, 0xb5, 0x21, 0x18, 0xd1, 0x57, 0x01, 0xe1,
	0x70, 0xbc, 0xd9, 0x72, 0x1d, 0x46, 0x1c, 0x96, 0x25, 0x58, 0x96, 0x23, 0xb6, 0x87, 0x92, 0x8b,
	0x2b, 0x99, 0xf2, 0x15, 0x9c, 0x56, 0x3a, 0xee, 0x3f, 0x7a, 0xec, 0xb0, 0x37, 0xb6, 0x94, 0x92,
	0x03, 0x6a, 0xcb, 0x84, 0x29, 0xe1, 0xea, 0x67, 0x65, 0xc0, 0x5c, 0xfa, 0x02, 0x3a, 0x0b, 0x40,
	0x5b, 0x3e, 0x21, 0x0e, 0xdd, 0x77, 0xd9, 0x92, 0x61, 0x35, 0xe0, 0xfc, 0xc0, 0x0d, 0x9d, 0xc4,
	0x20, 0xb7, 0xa0, 0xfc, 0x88, 0x74, 0x88, 0x08, 0x8e, 0x34, 0x30, 0xc3, 0x8a, 0x36, 0x13, 0x0f,
	0xa7, 0x8a, 0xf6, 0x36, 0x20, 0x9d, 0x56, 0x2d, 0x9b, 0x42, 0xfc, 0x8f, 0x0b, 0x50, 0xac, 0x7b,
	0xde, 0x78, 0x26, 0xdd, 0x82, 0x19, 0x7e, 0x46, 0x0e, 0x03, 0x6f, 0x55, 0xed, 0xb7, 0x82, 0xeb,
	0x76, 0xd4, 0x69, 0x94, 0x94, 0x63, 0x44, 0x93, 0xb7, 0xe0, 0x8c, 0x4f, 0x3c, 0x97, 0xcb, 0x36,
	0x95, 0xed, 0xd8, 0x7b, 0xee, 0xe3, 0x76, 0xd2, 0x2d, 0x4e, 0xe7, 0x75, 0x8b, 0x6f, 0xc2, 0x0c,
	0x65, 0x98, 0x75, 0x69, 0xa6, 0x70, 0xa2, 0x68, 0x43, 0x67, 0x7a, 0x26, 0xb3, 0x33, 0x7d, 0x5d,
	0x65, 0x5e, 0x59, 0x3c, 0xa1, 0x4c, 0xbd, 0xee, 0x41, 0x29, 0x02, 0x1c, 0xcd, 0xe4, 0x0b, 0x75,
	0x86, 0xa4, 0xfb, 0x86, 0xbc, 0xee, 0x5b, 0xf7, 0x50, 0xa5, 0x3c, 0x1e, 0x4a, 0x77, 0xfc, 0xf3,
	0xe3, 0x39, 0xfe, 0x85, 0x1c, 0x8e, 0xff, 0x5d, 0x80, 0xd6, 0x3e, 0xf6, 0x99, 0x4c, 0x42, 0xce,
	0x66, 0xc9, 0x03, 0x05, 0xfd, 0x13, 0xdc, 0x1f, 0x35, 0x16, 0xc7, 0x8c, 0x1a, 0x4b, 0x59, 0xa3,
	0xc6, 0x16, 0x4c, 0xbb, 0x47, 0x0e, 0xf1, 0x2b, 0xe5, 0x2c, 0xe7, 0x4f, 0x90, 0xa2, 0x77, 0xa1,
	0xd4, 0x12, 0x29, 0x73, 0x93, 0x97, 0x4d, 0x15, 0x94, 0x72, 0x08, 0xb7, 0x83, 0x9a, 0xaa, 0x01,
	0x92, 0x9c, 0x3f, 0xe0, 0xcc, 0x12, 0xb3, 0x92, 0x79, 0x79, 0x34, 0xb3, 0x24, 0x0f, 0x98, 0xbb,
	0x5e, 0x3b, 0x5c, 0xf9, 0xdc, 0x68, 0x66, 0x49, 0x2e, 0x98, 0xef, 0xc3, 0x7c, 0x18, 0x20, 0x29,
	0x61, 0x95, 0x15, 0x91, 0xdf, 0x5e, 0xd0, 0x23, 0x42, 0x83, 0x48, 0xd3, 0x3f, 0x54, 0x74, 0x8d,
	0x30, 0xa4, 0x3e, 0x23, 0x0c, 0x3d, 0x02, 0xd4, 0xc1, 0x8c, 0x50, 0xd6, 0xe4, 0x3e, 0x4b, 0x25,
	0x8e, 0x95, 0x55, 0x21, 0xc4, 0xaa, 0x3e, 0x4d, 0xdd, 0xf3, 0x9e, 0xcb, 0xd1, 0xc6, 0x92, 0xe4,
	0x88, 0x9e, 0xa0, 0x0f, 0xa1, 0xac, 0xb1, 0x8b, 0x9c, 0x9e, 0x56, 0xd6, 0x32, 0x68, 0x7f, 0x11,
	0x87, 0x93, 0xf0, 0x50, 0x40, 0xc5, 0x86, 0xdc, 0x03, 0x0f, 0x3b, 0xc7, 0x12, 0x6a, 0x95, 0x2c,
	0x60, 0x51, 0x1c, 0x02, 0x6c, 0xef, 0xc3, 0x62, 0x30, 0xc1, 0x11, 0xd9, 0xa1, 0x36, 0x23, 0x95,
	0xf5, 0x0c, 0x73, 0x9c, 0x55, 0x4c, 0x2f, 0x24, 0x8f, 0x3e, 0x8d, 0xe7, 0xbb, 0xbb, 0x76, 0x87,
	0x54, 0xaa, 0x39, 0xa6, 0x79, 0x2a, 0x79, 0xd0, 0x07, 0x50, 0x0e, 0xa6, 0xf9, 0xba, 0x6b, 0x3b,
	0xd2, 0xc4, 0xe7, 0x47, 0x9a, 0x38, 0x58, 0xfb, 0xab, 0xae, 0xed, 0x28, 0x90, 0x80, 0xc0, 0x69,
	0xd3, 0xc3, 0x6c, 0xbf, 0x72, 0x21, 0xcb, 0xf9, 0x13, 0xf4, 0x4f, 0x31, 0xdb, 0x0f, 0xea, 0xcb,
	0x8b, 0x19, 0xeb, 0x4b, 0xeb, 0x3f, 0x8b, 0xb0, 0xfc, 0x48, 0xb8, 0xef, 0x9d, 0x58, 0x90, 0x7c,
	0x0f, 0x4a, 0x94, 0x60, 0xbf, 0xb5, 0xdf, 0xe4, 0x2e, 0x28, 0x53, 0x74, 0x03, 0xc9, 0xf0, 0xc2,
	0xf5, 0xdb, 0xe8, 0x6d, 0x98, 0xa5, 0xae, 0xcf, 0x9a, 0xbc, 0x12, 0x28, 0x64, 0x73, 0x59, 0x3e,
	0xfb, 0x19, 0x72, 0x8c, 0xde, 0xe4, 0x51, 0x8b, 0x63, 0x2b, 0x08, 0x75, 0xc3, 0x82, 0x63, 0x40,
	0xca, 0x2b, 0x8c, 0x8e, 0x7d, 0x60, 0x33, 0x11, 0xe9, 0x16, 0x1a, 0xf2, 0x07, 0x5a, 0x85, 0x19,
	0x77, 0x77, 0x97, 0x1f, 0x95, 0x69, 0xf1, 0x58, 0xfd, 0xd2, 0x62, 0x7a, 0x49, 0x8b, 0xe9, 0x08,
	0xa9, 0x10, 0x3b, 0x2f, 0x1e, 0xca, 0x20, 0xba, 0x16, 0x05, 0xd1, 0x05, 0xf1, 0x38, 0x08, 0x93,
	0xab, 0x61, 0x98, 0x3b, 0x2b, 0x9f, 0xab, 0x40, 0x76, 0x2e, 0xf0, 0x47, 0x8b, 0x72, 0x6a, 0xe9,
	0x71, 0x2e, 0xc6, 0x5c, 0xea, 0x92, 0x18, 0xd2, 0x9c, 0xe6, 0xe5, 0x78, 0xea, 0x5b, 0x8e, 0x55,
	0xf9, 0x3c, 0xb9, 0xbd, 0x0e, 0x8b, 0x6d, 0x9b, 0x7a, 0x1d, 0x7c, 0xdc, 0x6c, 0xb9, 0x9d, 0xee,
	0x81, 0x43, 0x2b, 0x48, 0x10, 0x9d, 0x55, 0x8f, 0x1f, 0xca, 0xa7, 0xbc, 0xf8, 0xe2, 0xe6, 0x5f,
	0x16, 0x83, 0xc2, 0xc0, 0x18, 0xce, 0xc5, 0xed, 0xab, 0x12, 0x9b, 0xcb, 0x50, 0x62, 0x2e, 0xc3,
	0x9d, 0x66, 0xcb, 0xed, 0x3a, 0x4c, 0x18, 0x78, 0xa1, 0x01, 0xe2, 0xd1, 0x43, 0xfe, 0x04, 0xdd,
	0x80, 0x33, 0x5c, 0x4b, 0x5c, 0x7d, 0x05, 0xe1, 0x69, 0x16, 0x13, 0x2e, 0xa2, 0xc1, 0xb5, 0xf8,
	0x8c, 0x30, 0xeb, 0xbb, 0x05, 0x58, 0x0b, 0x7b, 0x10, 0x81, 0xe3, 0xf8, 0xb1, 0x2b, 0xe6, 0x44,
	0x96, 0x9d, 0xa9, 0x98, 0x13, 0x69, 0xf5, 0x5b, 0x70, 0x26, 0xe8, 0x55, 0x4c, 0x8f, 0xce, 0xa5,
	0x03, 0x5a, 0xeb, 0x05, 0x54, 0xfa, 0x55, 0xa5, 0x4c, 0x12, 0x6f, 0xc0, 0x18, 0xf9, 0x1a, 0x30,
	0xdf, 0x29, 0xc2, 0x5a, 0x58, 0xc6, 0x24, 0x8c, 0x70, 0x92, 0x89, 0x3f, 0x03, 0x63, 0x68, 0xaa,
	0x9d, 0xca, 0xae, 0x5a, 0xf4, 0x12, 0x16, 0xd4, 0xbf, 0x4d, 0xee, 0x8f, 0x69, 0x65, 0xba, 0xbf,
	0x01, 0x94, 0xa2, 0xa1, 0x0d, 0xd5, 0x10, 0xfa, 0x80, 0xf3, 0xa9, 0x06, 0x90, 0xa7, 0x3d, 0xaa,
	0xde, 0x87, 0x72, 0x1f, 0xc9, 0xa8, 0x4e, 0xc7, 0xbc, 0xde, 0xe9, 0x78, 0x01, 0x95, 0xfe, 0xb5,
	0x27, 0x61, 0xf7, 0xef, 0x01, 0x80, 0x16, 0x9d, 0x4f, 0x64, 0xea, 0x71, 0x0a, 0x93, 0xe8, 0x80,
	0x17, 0xf3, 0x54, 0x40, 0xca, 0x4b, 0x4e, 0x65, 0xcf, 0xda, 0x02, 0x1c, 0x4e, 0x8f, 0x8b, 0xc3,
	0x99, 0x71, 0x3b, 0x3c, 0x9f, 0x17, 0x25, 0x9f, 0x7d, 0x51, 0x72, 0x1f, 0x82, 0x03, 0x99, 0xbd,
	0x2c, 0x29, 0x29, 0x0e, 0x11, 0x63, 0xa3, 0xba, 0x74, 0x31, 0x47, 0x5d, 0xfa, 0x53, 0x30, 0xe7,
	0x93, 0x43, 0x9b, 0x1c, 0x71, 0x80, 0x67, 0x29, 0x4a, 0x66, 0x25, 0xb9, 0x68, 0xa7, 0xc7, 0xaa,
	0x8c, 0xf2, 0x49, 0xaa, 0x0c, 0x74, 0x92, 0x2a, 0x63, 0x39, 0x57, 0x95, 0xa1, 0xb7, 0x78, 0xce,
	0xe5, 0x69, 0xf1, 0x70, 0x40, 0x1c, 0x10, 0x4a, 0xb9, 0xdb, 0x5e, 0xc9, 0x02, 0x08, 0x45, 0x1c,
	0xc6, 0xde, 0xd5, 0xcc, 0xb1, 0x37, 0x9e, 0x21, 0xaf, 0xe5, 0xca, 0x90, 0xad, 0x3f, 0x98, 0x86,
	0xc5, 0xc8, 0x61, 0xd6, 0xbb, 0x6d, 0xfb, 0x84, 0x01, 0x32, 0xf2, 0x80, 0x85, 0xec, 0x1e, 0x30,
	0x82, 0x63, 0x31, 0x07, 0x1c, 0x4f, 0x7c, 0x43, 0xf0, 0x36, 0xcc, 0x72, 0x59, 0x33, 0x3b, 0x52,
	0x9e, 0x02, 0x0a, 0xc6, 0xbb, 0x30, 0xeb, 0x7a, 0xc4, 0xc7, 0xcc, 0xf5, 0x33, 0x39, 0xd2, 0x90,
	0x1a, 0xd5, 0x61, 0x21, 0xf8, 0x5f, 0x5e, 0x00, 0x65, 0x71, 0xa7, 0xf3, 0x01, 0x8b, 0x68, 0x1a,
	0x6a, 0xc8, 0x9a, 0xcd, 0x83, 0xac, 0xd8, 0xe9, 0x9d, 0xcb, 0x7b, 0x7a, 0xf5, 0x03, 0x08, 0xb9,
	0x0e, 0x60, 0xf2, 0x76, 0xb3, 0x94, 0xf3, 0x76, 0xd3, 0xfa, 0xdf, 0x02, 0xac, 0xe8, 0x89, 0x02,
	0x17, 0xea, 0xe9, 0x3e, 0xa6, 0xba, 0x1b, 0x33, 0x72, 0xe0, 0x46, 0xb7, 0x5e, 0xe1, 0x64, 0xd6,
	0x2b, 0x9e, 0xc4, 0x7a, 0x53, 0x79, 0xac, 0x97, 0x30, 0xc1, 0x74, 0x5e, 0x1f, 0xa8, 0x4c, 0x2f,
	0x98, 0x67, 0x46, 0x33, 0x4b, 0x72, 0xfe, 0xc0, 0xfa, 0x87, 0x69, 0x58, 0x4a, 0xaa, 0x3f, 0x0e,
	0x26, 0x23, 0x27, 0x98, 0xc6, 0xbf, 0x59, 0x1d, 0x2f, 0xc1, 0xfa, 0xec, 0x1c, 0xc5, 0x78, 0xfd,
	0xdf, 0xf7, 0x60, 0xda, 0xe3, 0xf8, 0xae, 0x9c, 0x11, 0x39, 0xfb, 0xf5, 0x94, 0x6e, 0x94, 0x50,
	0xe8, 0x86, 0x38, 0x09, 0x32, 0x4b, 0x97, 0x5c, 0x49, 0xa8, 0xcc, 0xe6, 0x82, 0xca, 0x5d, 0x50,
	0x96, 0x22, 0x7e, 0x1e, 0x27, 0x41, 0xfc, 0xbe, 0x73, 0x0e, 0x39, 0xcf, 0x79, 0xf5, 0x97, 0x00,
	0xa2, 0xcd, 0x0c, 0xa8, 0x27, 0xde, 0xd6, 0xeb, 0x89, 0xd2, 0xd6, 0x95, 0x61, 0x6a, 0x11, 0x13,
	0xe9, 0x25, 0xc7, 0xf7, 0x8a, 0x60, 0x6a, 0xa5, 0x7f, 0x8c, 0xf8, 0x27, 0xac, 0xcf, 0x03, 0x7a,
	0x9f, 0xe7, 0x62, 0xec, 0x34, 0xca, 0x16, 0x90, 0x76, 0xde, 0xce, 0xeb, 0xe7, 0x5c, 0xf6, 0x82,
	0xa2, 0x93, 0x1c, 0xb5, 0x7d, 0x16, 0x62, 0x6d, 0x9f, 0x01, 0x0d, 0x9a, 0xb3, 0x03, 0x1b, 0x34,
	0x55, 0x0d, 0x6c, 0x8b, 0xfa, 0xe4, 0xc4, 0xb7, 0x7e, 0xdb, 0x80, 0x2b, 0x43, 0x0c, 0x96, 0xb5,
	0x71, 0xf3, 0xf3, 0xb0, 0xaa, 0x37, 0x68, 0xd5, 0x66, 0xa2, 0x3e, 0xce, 0x85, 0x61, 0x28, 0x6a,
	0x2c, 0xe3, 0xc4, 0x93, 0x67, 0x84, 0x59, 0xdf, 0x2f, 0xc2, 0xe5, 0x7e, 0xc9, 0x44, 0xee, 0xf4,
	0x39, 0x92, 0x52, 0x91, 0x14, 0x81, 0x65, 0x3e, 0x06, 0x96, 0xaa, 0x16, 0x8d, 0x25, 0x8c, 0xa2,
	0x78, 0x7b, 0x35, 0x19, 0x6f, 0x25, 0x8c, 0xe2, 0x11, 0x75, 0x00, 0xda, 0x16, 0x07, 0xa1, 0xcd,
	0xfa, 0xb6, 0x31, 0xc8, 0x05, 0x04, 0x76, 0xcb, 0x0a, 0xa8, 0x27, 0xb0, 0xa2, 0x03, 0x0a, 0x73,
	0x76, 0x0d, 0x4f, 0xe7, 0x07, 0xe3, 0x49, 0xac, 0xd2, 0x40, 0x38, 0xfe, 0x80, 0xa3, 0xe9, 0x7f,
	0x8a, 0x50, 0xed, 0x97, 0xea, 0x27, 0x02, 0x48, 0x71, 0xc4, 0x40, 0x12, 0x31, 0x39, 0x3a, 0xd3,
	0x61, 0xa3, 0x79, 0x41, 0x6f, 0x34, 0x9b, 0xf1, 0x96, 0x87, 0x04, 0x4f, 0xac, 0xa9, 0x71, 0x25,
	0x51, 0x48, 0x4b, 0xe0, 0xc4, 0x4a, 0xe5, 0x08, 0xb7, 0x4b, 0x31, 0xdc, 0x22, 0x55, 0xa8, 0xc9,
	0xfe, 0xb4, 0x2c, 0xc5, 0xb2, 0x76, 0xa6, 0xad, 0x5f, 0x83, 0xf3, 0x03, 0x6d, 0x9e, 0x15, 0x84,
	0xf7, 0x60, 0x51, 0x07, 0x61, 0x04, 0xbf, 0xb4, 0x9b, 0xab, 0x85, 0x08, 0x79, 0x1c, 0x74, 0x2f,
	0xe1, 0xfc, 0x57, 0x88, 0x76, 0x8f, 0x95, 0x78, 0x4b, 0xed, 0x44, 0x3d, 0xb8, 0x4f, 0x0c, 0xb8,
	0x30, 0x78, 0x72, 0xb5, 0xbb, 0x4a, 0xd4, 0xd1, 0x34, 0x44, 0x67, 0x30, 0x6c, 0x5a, 0x8e, 0x55,
	0x3c, 0xc6, 0x85, 0x2d, 0xe6, 0x13, 0xb6, 0x0b, 0xe6, 0x20, 0x59, 0x45, 0x5f, 0x73, 0x22, 0x0d,
	0xe3, 0x73, 0x30, 0x2d, 0xfb, 0xaf, 0x05, 0x89, 0x4c, 0xf1, 0xc3, 0xfa, 0x6f, 0x03, 0xae, 0x0c,
	0x59, 0x57, 0x29, 0xea, 0x49, 0xc0, 0x2b, 0x5f, 0xde, 0xbb, 0xab, 0xdb, 0x76, 0x24, 0xf7, 0x86,
	0xd6, 0xbe, 0x95, 0xd3, 0x9c, 0x28, 0xf3, 0xae, 0xde, 0x05, 0x18, 0xb3, 0xdb, 0xbb, 0x0e, 0x6b,
	0x52, 0xda, 0x67, 0x0c, 0x33, 0x9b, 0x32, 0xbb, 0x15, 0xa8, 0xd6, 0xfa, 0x6e, 0x11, 0x2a, 0xfd,
	0x63, 0x6a, 0xfb, 0x2e, 0xac, 0x74, 0x30, 0x65, 0x4d, 0x76, 0xe4, 0x36, 0x8f, 0x08, 0x79, 0xd5,
	0x94, 0x2d, 0xa1, 0xb6, 0x52, 0xc7, 0x4f, 0xf7, 0xab, 0xa3, 0x7f, 0x92, 0x8d, 0x9f, 0xc5, 0x94,
	0x6d, 0x1f, 0xb9, 0x2f, 0x08, 0x79, 0x25, 0xaf, 0x1a, 0xda, 0x52, 0x25, 0xa8, 0xd3, 0x37, 0x80,
	0x7e, 0x11, 0x16, 0x98, 0xeb, 0x35, 0x19, 0xe1, 0x79, 0x82, 0xe7, 0x52, 0x75, 0xa6, 0xde, 0xca,
	0xb4, 0xd0, 0xb6, 0xeb, 0x6d, 0x13, 0xa7, 0xc1, 0xf9, 0xe4, 0x0a, 0x25, 0x16, 0x3d, 0xe1, 0x79,
	0x14, 0x47, 0xb6, 0x3c, 0xcf, 0x45, 0x71, 0x9e, 0x79, 0x49, 0x21, 0x4f, 0xf3, 0x45, 0x00, 0x71,
	0xaf, 0x26, 0x47, 0xa5, 0xeb, 0x9c, 0xe3, 0x4f, 0xc4, 0x70, 0xf5, 0x7d, 0x58, 0x4b, 0xd9, 0xc5,
	0x28, 0x33, 0x2c, 0x68, 0x66, 0xa8, 0xde, 0x83, 0xa5, 0xa4, 0x8c, 0x79, 0xf8, 0xad, 0xe7, 0xb0,
	0xf6, 0xac, 0xbb, 0x73, 0x60, 0xb3, 0xc9, 0x5e, 0xa9, 0x58, 0x2f, 0xa0, 0xd2, 0x3f, 0xef, 0x24,
	0x2e, 0x03, 0x9e, 0xc3, 0xda, 0x43, 0xec, 0xb4, 0x48, 0x67, 0xf2, 0x02, 0xf7, 0xcf, 0x3b, 0x09,
	0x81, 0x5f, 0x40, 0xa5, 0x41, 0x3a, 0x04, 0x53, 0x32, 0x61, 0x89, 0x7f, 0x01, 0xd6, 0x07, 0x4c,
	0x3c, 0x21, 0x1d, 0x87, 0xef, 0x89, 0x4d, 0x58, 0xc7, 0xfd, 0xf3, 0x4e, 0x48, 0x60, 0x99, 0xc9,
	0x4f, 0x5e, 0xe0, 0xfe, 0x79, 0x27, 0x21, 0xf0, 0x36, 0xac, 0x3c, 0xc5, 0x94, 0x4e, 0x58, 0xdc,
	0x8f, 0x60, 0x35, 0x39, 0xeb, 0x24, 0x84, 0xfd, 0x0d, 0x83, 0xab, 0xf7, 0xeb, 0xa4, 0x35, 0x61,
	0x27, 0xa1, 0xb7, 0xcd, 0x0a, 0x39, 0xda, 0x66, 0xd2, 0x2c, 0x49, 0x79, 0x26, 0x74, 0x56, 0x9f,
	0x75, 0xa9, 0x47, 0x9c, 0xf6, 0xe4, 0xcf, 0xea, 0x80, 0x89, 0x27, 0xe6, 0x5e, 0x5a, 0xee, 0x21,
	0xf1, 0x4f, 0xc3, 0xbd, 0xf4, 0x4d, 0x3c, 0x09, 0x91, 0x6f, 0xc1, 0xe2, 0xb3, 0x63, 0xa7, 0xc5,
	0x23, 0x56, 0x20, 0xa9, 0xf6, 0x12, 0x8a, 0x0c, 0x5b, 0xea, 0x25, 0x14, 0xeb, 0x01, 0x2c, 0x45,
	0xb4, 0x6a, 0xf1, 0x55, 0x98, 0xd9, 0xc5, 0x76, 0x87, 0x48, 0xda, 0xd9, 0x86, 0xfa, 0xc5, 0x9f,
	0xfb, 0x84, 0x76, 0x3b, 0x4c, 0xbd, 0x85, 0xaf, 0x7e, 0x6d, 0x7d, 0xeb, 0x4d, 0x71, 0x7f, 0xfc,
	0x35, 0xec, 0xe0, 0x3d, 0xe2, 0xa3, 0xaf, 0xc0, 0x6c, 0x30, 0x25, 0x8a, 0x15, 0x76, 0x09, 0xa1,
	0xaa, 0x17, 0x06, 0x0f, 0x4a, 0x29, 0xac, 0x2f, 0xa0, 0xdf, 0x31, 0x60, 0x2e, 0x7c, 0xd3, 0x01,
	0xc5, 0xa8, 0x93, 0xdf, 0x0f, 0x55, 0x2f, 0xa6, 0x8c, 0xaa, 0xc9, 0x9e, 0xf4, 0xea, 0x77, 0xd1,
	0x97, 0xe5, 0x73, 0x13, 0x7b, 0x5e, 0xcd, 0xec, 0x52, 0xe2, 0x9b, 0xee, 0xae, 0x69, 0xd3, 0x43,
	0xb3, 0x85, 0x1d, 0xb3, 0x15, 0x8e, 0x99, 0xae, 0x63, 0xb2, 0x7d, 0x62, 0x7a, 0x1d, 0xcc, 0x76,
	0x5d, 0xff, 0xe0, 0x9b, 0xff, 0xfe, 0x5f, 0xdf, 0x2e, 0x2c, 0x58, 0xb3, 0x9b, 0x87, 0x5f, 0xda,
	0xc4, 0x9e, 0x47, 0xdf, 0x31, 0x6e, 0xa1, 0x3f, 0x37, 0x60, 0x31, 0xf1, 0x25, 0x08, 0xb2, 0x86,
	0x7e, 0x26, 0x22, 0xc5, 0xbc, 0x9a, 0xe1, 0x53, 0x12, 0x6b, 0xbb, 0x57, 0xbf, 0x83, 0x6e, 0x07,
	0xa3, 0x26, 0x97, 0x01, 0x33, 0x2e, 0xab, 0xca, 0xf8, 0x6f, 0xf0, 0xbf, 0xe6, 0xce, 0xb1, 0xe9,
	0x7a, 0x26, 0x73, 0xdd, 0xce, 0x4d, 0x21, 0xe1, 0x25, 0x6b, 0x3d, 0x90, 0x70, 0xf3, 0x50, 0xf1,
	0x06, 0xdf, 0xc2, 0x70, 0x91, 0x7f, 0xd7, 0x80, 0xa5, 0x64, 0x1e, 0x86, 0xae, 0x0e, 0xcf, 0xd2,
	0xa4, 0xd0, 0xd7, 0xb2, 0xa4, 0x72, 0xd6, 0xbb, 0xbd, 0xfa, 0x45, 0xc4, 0x0b, 0x24, 0x93, 0x86,
	0x83, 0xa6, 0xed, 0xec, 0xba, 0x5c, 0x72, 0x2e, 0x95, 0x90, 0x72, 0x05, 0x2d, 0x87, 0x52, 0x46,
	0x74, 0xe8, 0xf7, 0x0b, 0x30, 0xaf, 0xbf, 0x63, 0x84, 0x2e, 0xeb, 0x6b, 0x0e, 0x78, 0xbb, 0xac,
	0x6a, 0xa6, 0x13, 0x28, 0x81, 0xfe, 0xd9, 0xe8, 0xd5, 0x7f, 0x60, 0xa0, 0xef, 0x1b, 0x5c, 0x26,
	0xbe, 0x60, 0x4d, 0x18, 0x7a, 0xd7, 0xee, 0x30, 0xe2, 0x9b, 0x47, 0x36, 0xdb, 0xe7, 0x66, 0xa6,
	0xc4, 0xdc, 0xb5, 0x49, 0xa7, 0x4d, 0x6f, 0xc8, 0x22, 0xaa, 0x66, 0xf2, 0x9a, 0xb6, 0x66, 0xaa,
	0xe3, 0x52, 0x33, 0xb5, 0xca, 0xb7, 0x66, 0xca, 0x32, 0xb6, 0x66, 0xee, 0xbb, 0x9c, 0xc6, 0x6e,
	0x89, 0x67, 0xd1, 0x5d, 0x7a, 0xcd, 0xd4, 0x2e, 0xc6, 0x6b, 0xa6, 0xba, 0xaf, 0xe6, 0x93, 0xe1,
	0x36, 0x67, 0x10, 0x15, 0x76, 0xcd, 0x8c, 0x5e, 0xe4, 0xba, 0xc9, 0xe7, 0xdf, 0xc5, 0xdd, 0x0e,
	0x33, 0x7d, 0xc2, 0xba, 0xbe, 0x63, 0xe2, 0x4e, 0x27, 0xd2, 0x16, 0xa0, 0x10, 0x75, 0xe8, 0xaf,
	0x0a, 0x80, 0xc2, 0x7d, 0x8a, 0x17, 0x27, 0x26, 0xa5, 0xa8, 0xff, 0x30, 0x7a, 0xf5, 0x1f, 0x1a,
	0xe8, 0x53, 0xa9, 0x28, 0x31, 0xf5, 0x8f, 0xa9, 0xbe, 0xca, 0x68, 0x51, 0xe8, 0x4b, 0xec, 0xa1,
	0x29, 0xd4, 0xf6, 0x0d, 0x98, 0x0b, 0xdf, 0x9a, 0x89, 0xfb, 0x90, 0xe4, 0x57, 0x43, 0x71, 0x1f,
	0xd2, 0xf7, 0x3d, 0x87, 0x75, 0xbd, 0x57, 0x2f, 0xa3, 0x45, 0xf9, 0x5c, 0xf8, 0x09, 0x0e, 0x6e,
	0xe9, 0x1c, 0xb6, 0x62, 0xce, 0xe1, 0x63, 0x03, 0x96, 0x07, 0x7c, 0x87, 0x80, 0x5e, 0xcb, 0xf6,
	0xe5, 0x45, 0xf5, 0xfa, 0x48, 0x3a, 0x25, 0xd1, 0xdb, 0xbd, 0xfa, 0x1a, 0x5a, 0x91, 0x14, 0x42,
	0xa2, 0xe8, 0x73, 0x0b, 0x21, 0xd7, 0xda, 0x16, 0x52, 0x72, 0x6d, 0x46, 0x23, 0x5c, 0xc2, 0x43,
	0x80, 0xe8, 0x43, 0x05, 0x74, 0x31, 0x8e, 0x90, 0xc4, 0xc7, 0x0e, 0xd5, 0x4b, 0x69, 0xc3, 0x4a,
	0x8a, 0x9b, 0xbd, 0xfa, 0x32, 0x2a, 0x3f, 0xc0, 0xac, 0xb5, 0x6f, 0xb6, 0xc5, 0x70, 0x64, 0x90,
	0x85, 0x5b, 0x31, 0xcd, 0xfc, 0x9e, 0xa1, 0x7d, 0xfa, 0x19, 0xbc, 0x6f, 0x74, 0x75, 0xa0, 0xeb,
	0x8e, 0x87, 0xda, 0xb8, 0x0f, 0x4a, 0x7b, 0xfd, 0xcd, 0xba, 0xd7, 0xab, 0x9b, 0xe8, 0xd2, 0x43,
	0xcd, 0x95, 0xef, 0x9a, 0xd4, 0x23, 0x2d, 0x7b, 0xd7, 0x6e, 0x99, 0x2a, 0x40, 0x4a, 0x37, 0x64,
	0x2d, 0x29, 0xb9, 0x82, 0x76, 0x90, 0x90, 0xef, 0x8f, 0x0b, 0xb1, 0x57, 0x59, 0x83, 0x16, 0x53,
	0xdc, 0x72, 0xe9, 0x7d, 0xc7, 0xb8, 0xe5, 0x86, 0xf4, 0xaa, 0xac, 0xbf, 0x35, 0x7a, 0xf5, 0x8f,
	0x0d, 0xf4, 0x1d, 0x71, 0xe4, 0x02, 0x09, 0x94, 0xa3, 0x1c, 0x71, 0xec, 0xa2, 0xbc, 0xa0, 0x66,
	0xc6, 0x8f, 0xa0, 0x3a, 0x2d, 0xb1, 0x03, 0xa8, 0x37, 0xea, 0xa2, 0xe3, 0xc8, 0x8e, 0xbd, 0xf4,
	0xa3, 0x14, 0xca, 0x23, 0x34, 0x85, 0x50, 0x9f, 0xa6, 0xd0, 0x0f, 0x0b, 0xb0, 0xde, 0xe7, 0x8a,
	0x4e, 0x4f, 0x59, 0xff, 0x66, 0xf4, 0xea, 0x7f, 0x66, 0xa0, 0x4f, 0x74, 0xff, 0xf4, 0xff, 0x4a,
	0x67, 0xa1, 0xcb, 0x8c, 0xab, 0x6e, 0x1d, 0xad, 0xc5, 0xbd, 0x51, 0xa4, 0xc1, 0x4f, 0x0b, 0xbc,
	0x54, 0x1b, 0xdc, 0x55, 0x47, 0xb7, 0x87, 0x2b, 0x26, 0x76, 0x67, 0x52, 0xad, 0x65, 0x23, 0x56,
	0xaa, 0xfc, 0x91, 0xd1, 0xab, 0xff, 0xa1, 0x81, 0x3e, 0x96, 0xaa, 0x14, 0x63, 0xc2, 0x8d, 0xf1,
	0x0c, 0xc3, 0x76, 0x1d, 0xae, 0x4d, 0x25, 0xe3, 0x9d, 0xf0, 0xdc, 0x8c, 0xa7, 0xde, 0x40, 0x6d,
	0xc1, 0xad, 0x43, 0xcd, 0xf4, 0xdd, 0xce, 0x68, 0xd0, 0x29, 0xa1, 0x84, 0xfe, 0x2a, 0x68, 0x35,
	0x01, 0x3d, 0x79, 0x71, 0x40, 0xd1, 0x6f, 0xea, 0x00, 0x4c, 0x5e, 0x73, 0xa1, 0x11, 0x2a, 0x89,
	0x5f, 0x5f, 0x56, 0xef, 0x64, 0xa4, 0x56, 0x1a, 0xfc, 0x2d, 0xa3, 0x57, 0x67, 0xc8, 0xe7, 0xfa,
	0x93, 0xd7, 0x62, 0x74, 0x4c, 0xa5, 0x85, 0x37, 0x84, 0x35, 0x73, 0x98, 0xfe, 0x82, 0xab, 0xbd,
	0x9b, 0x31, 0x48, 0xf5, 0x5d, 0xce, 0x51, 0xe1, 0x5b, 0x93, 0xef, 0x87, 0xc6, 0x7d, 0x6b, 0xca,
	0x9b, 0xab, 0x71, 0xdf, 0x9a, 0xf6, 0x8a, 0xa9, 0xf2, 0xad, 0x2a, 0xfc, 0x05, 0xd6, 0x0a, 0xf2,
	0x3b, 0x9e, 0x2f, 0x63, 0xcf, 0x93, 0xbe, 0x75, 0x6b, 0xa0, 0x6f, 0xfd, 0x4b, 0x03, 0xce, 0x0d,
	0xea, 0xbf, 0xa2, 0xeb, 0xa3, 0x3a, 0xb4, 0x81, 0x9c, 0x37, 0x46, 0x13, 0x2a, 0x59, 0x3f, 0xec,
	0xd5, 0x5f, 0x43, 0xd7, 0xb8, 0x8d, 0xd4, 0x59, 0x4e, 0x35, 0x52, 0x8a, 0x56, 0x37, 0x83, 0xe6,
	0xfa, 0x5f, 0x1b, 0xb0, 0x9e, 0xda, 0x35, 0x8e, 0x23, 0x6d, 0x54, 0x4b, 0x3c, 0x8e, 0xb4, 0x91,
	0xad, 0x68, 0xeb, 0xbe, 0x88, 0xee, 0x2a, 0x79, 0x0d, 0x36, 0x62, 0x8a, 0xa6, 0xb4, 0x90, 0xfa,
	0x32, 0xba, 0x98, 0x22, 0xf5, 0xa6, 0xec, 0x5c, 0xff, 0x89, 0x01, 0x4b, 0xc9, 0x26, 0x61, 0x1c,
	0x11, 0x29, 0xad, 0xc9, 0x38, 0x22, 0xd2, 0xfa, 0x8c, 0xd6, 0x07, 0xbd, 0xfa, 0x79, 0xb4, 0x2e,
	0x87, 0x43, 0x44, 0x24, 0xc0, 0x60, 0x59, 0x7d, 0x42, 0xca, 0xcf, 0xb4, 0x36, 0xa9, 0xe0, 0xe3,
	0xc8, 0xe0, 0x72, 0x26, 0x7b, 0x83, 0x89, 0xac, 0x60, 0x70, 0x47, 0x32, 0x91, 0x15, 0xa4, 0xb4,
	0x17, 0x95, 0x9c, 0x72, 0x38, 0xbf, 0x9c, 0x2d, 0xc1, 0xc7, 0xe5, 0xfc, 0xc4, 0x80, 0x72, 0x5f,
	0x47, 0x10, 0x5d, 0x8b, 0x7f, 0x3d, 0x35, 0xb8, 0x13, 0x59, 0xfd, 0xe2, 0x08, 0xaa, 0x08, 0xb8,
	0x17, 0x50, 0x55, 0x8d, 0xa7, 0xc9, 0x7a, 0xd5, 0xba, 0x94, 0x22, 0xab, 0x2f, 0x19, 0x03, 0xa5,
	0x26, 0x9b, 0x81, 0x71, 0xa5, 0xa6, 0xb4, 0x20, 0xe3, 0x4a, 0x4d, 0xeb, 0x27, 0x2a, 0xa5, 0xca,
	0xe1, 0xfc, 0x4a, 0x95, 0x79, 0x22, 0x97, 0xf3, 0x53, 0x03, 0x96, 0x1f, 0xd3, 0xc3, 0x64, 0x1b,
	0x30, 0x2e, 0x6a, 0x4a, 0xf3, 0xb1, 0x7a, 0x6d, 0x38, 0x91, 0x12, 0xf5, 0x65, 0xaf, 0x7e, 0x1b,
	0xdd, 0xfc, 0x39, 0x15, 0x88, 0x82, 0xa2, 0x5f, 0xfa, 0xcd, 0x34, 0xd1, 0x5f, 0xb3, 0xae, 0xa4,
	0xea, 0x98, 0xf3, 0x6d, 0xda, 0xf4, 0x90, 0x8b, 0xff, 0x17, 0x06, 0x94, 0x1f, 0xd3, 0xc3, 0x78,
	0x5b, 0x10, 0xc5, 0xde, 0xb2, 0x19, 0xd8, 0x88, 0xac, 0x5a, 0xc3, 0x48, 0x94, 0xe0, 0xcf, 0x7b,
	0xf5, 0x9b, 0xe8, 0x7a, 0x52, 0x70, 0x0f, 0x53, 0x9a, 0x26, 0xf6, 0x35, 0xeb, 0x72, 0x8a, 0xd8,
	0x9c, 0x2b, 0x10, 0x3a, 0xd4, 0x79, 0xbc, 0xc7, 0x97, 0xd4, 0xf9, 0xc0, 0x8e, 0x64, 0x52, 0xe7,
	0x83, 0xdb, 0x84, 0xa9, 0x3a, 0xe7, 0xe4, 0xe3, 0xe8, 0x9c, 0xf3, 0x05, 0xe2, 0xff, 0x93, 0x01,
	0x95, 0x07, 0x5d, 0x6a, 0x3b, 0x84, 0xd2, 0xd3, 0xc4, 0x4d, 0xbb, 0x57, 0x7f, 0x1d, 0x6d, 0xe8,
	0x7b, 0xd8, 0x51, 0xab, 0x8e, 0x00, 0xcf, 0x6d, 0xeb, 0xb5, 0xe1, 0xe0, 0x09, 0xe6, 0xe1, 0xbb,
	0xf9, 0x3b, 0x03, 0x56, 0x83, 0xdd, 0x9c, 0x0e, 0x8c, 0x7e, 0xa5, 0x57, 0xdf, 0x40, 0xb5, 0x81,
	0xfb, 0x18, 0x86, 0xa5, 0x9b, 0xd6, 0xb5, 0x61, 0x58, 0xd2, 0xf7, 0x10, 0xb7, 0xc8, 0xe9, 0xa1,
	0x6a, 0xa8, 0x45, 0x86, 0x41, 0x6b, 0x98, 0x45, 0x04, 0xb4, 0xf4, 0xdd, 0xfc, 0xab, 0x01, 0xeb,
	0xdb, 0xa4, 0xb5, 0xef, 0xd8, 0x2d, 0xdc, 0x39, 0x4d, 0x80, 0xed, 0xf6, 0xea, 0x5f, 0x42, 0x9b,
	0xfa, 0x76, 0x58, 0xb0, 0xec, 0x08, 0x84, 0xd5, 0xac, 0xeb, 0xc3, 0x11, 0x16, 0x4e, 0xc4, 0x37,
	0xf4, 0x23, 0x03, 0xd6, 0xc2, 0x0d, 0x9d, 0x0e, 0xc6, 0x76, 0x7a, 0xf5, 0x4d, 0x74, 0x67, 0xf0,
	0x56, 0x86, 0x81, 0xec, 0x96, 0xf5, 0xc5, 0x61, 0x20, 0x8b, 0x6d, 0x23, 0x61, 0x97, 0xd3, 0x83,
	0xd9, 0x70, 0xbb, 0x0c, 0xc3, 0xd9, 0x30, 0xbb, 0x08, 0x9c, 0xc5, 0x36, 0xf4, 0x03, 0x03, 0x96,
	0xeb, 0xed, 0x03, 0xdb, 0x39, 0x1d, 0x9b, 0xf4, 0xfb, 0x60, 0xcc, 0x17, 0x1b, 0x6a, 0x8f, 0x74,
	0x1f, 0x2c, 0xec, 0x21, 0x26, 0xe0, 0xa2, 0xff, 0xbd, 0x01, 0x2b, 0x42, 0xf4, 0xd3, 0xb4, 0xc3,
	0x2f, 0x8b, 0x46, 0xb8, 0xbe, 0x01, 0xb1, 0xe4, 0x08, 0x1b, 0xdc, 0xb0, 0xae, 0x0e, 0xb7, 0x41,
	0xb8, 0x89, 0x3f, 0x32, 0xa0, 0xdc, 0x77, 0x6d, 0x84, 0x12, 0xc9, 0xef, 0xe0, 0xeb, 0xaa, 0x78,
	0x42, 0x97, 0x7a, 0xf7, 0x64, 0xd5, 0x7b, 0xf5, 0x15, 0xb4, 0xac, 0xc6, 0xf5, 0x42, 0x77, 0x44,
	0x26, 0x47, 0x25, 0x07, 0x97, 0xf2, 0x4f, 0x45, 0xda, 0x99, 0xb8, 0x29, 0x4a, 0xa6, 0x9d, 0x83,
	0x6f, 0xa8, 0x92, 0x69, 0x67, 0xca, 0x75, 0x93, 0xf5, 0xa8, 0x57, 0xaf, 0xa0, 0x55, 0x35, 0xae,
	0xeb, 0x35, 0x4b, 0xca, 0x29, 0x98, 0xde, 0x31, 0x6e, 0x3d, 0x98, 0x7a, 0x59, 0xf0, 0x76, 0x76,
	0x66, 0xc4, 0xf5, 0xd4, 0x1b, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x78, 0x6d, 0xac, 0x98,
	0x4e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AppManagerClient is the client API for AppManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppManagerClient interface {
	SyncRepo(ctx context.Context, in *SyncRepoRequest, opts ...grpc.CallOption) (*SyncRepoResponse, error)
	// Create app, user of isv can create app on the platform
	CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error)
	// Validate format of package(pack by op tool)
	ValidatePackage(ctx context.Context, in *ValidatePackageRequest, opts ...grpc.CallOption) (*ValidatePackageResponse, error)
	// Get statistics info of apps
	GetAppStatistics(ctx context.Context, in *GetAppStatisticsRequest, opts ...grpc.CallOption) (*GetAppStatisticsResponse, error)
	// Get apps, can filter with these fields(app_id, name, repo_id, description, status, home, icon, screenshots, maintainers, sources, readme, owner, chart_name), default return all apps
	DescribeApps(ctx context.Context, in *DescribeAppsRequest, opts ...grpc.CallOption) (*DescribeAppsResponse, error)
	// Get active apps, can filter with these fields(app_id, name, repo_id, description, status, home, icon, screenshots, maintainers, sources, readme, owner, chart_name), default return all apps
	DescribeActiveApps(ctx context.Context, in *DescribeAppsRequest, opts ...grpc.CallOption) (*DescribeAppsResponse, error)
	// Modify app info
	ModifyApp(ctx context.Context, in *ModifyAppRequest, opts ...grpc.CallOption) (*ModifyAppResponse, error)
	// Upload app attachment
	UploadAppAttachment(ctx context.Context, in *UploadAppAttachmentRequest, opts ...grpc.CallOption) (*UploadAppAttachmentResponse, error)
	// Batch delete apps
	DeleteApps(ctx context.Context, in *DeleteAppsRequest, opts ...grpc.CallOption) (*DeleteAppsResponse, error)
	// Create app of specific version
	CreateAppVersion(ctx context.Context, in *CreateAppVersionRequest, opts ...grpc.CallOption) (*CreateAppVersionResponse, error)
	// Get versions of app, can filter with these fields(version_id, app_id, name, owner, description, package_name, status, type), default return all app versions
	DescribeAppVersions(ctx context.Context, in *DescribeAppVersionsRequest, opts ...grpc.CallOption) (*DescribeAppVersionsResponse, error)
	// Get active versions of app, can filter with these fields(version_id, app_id, name, owner, description, package_name, status, type), default return all active app versions
	DescribeActiveAppVersions(ctx context.Context, in *DescribeAppVersionsRequest, opts ...grpc.CallOption) (*DescribeAppVersionsResponse, error)
	// Get audits information of version-specific app, can filter with these fields(version_id, app_id, status, operator, role), default return all app version audits
	DescribeAppVersionAudits(ctx context.Context, in *DescribeAppVersionAuditsRequest, opts ...grpc.CallOption) (*DescribeAppVersionAuditsResponse, error)
	// Get reviews of version-specific app, can filter with these fields(review_id, version_id, app_id, status, reviewer), default return all app version reviews
	DescribeAppVersionReviews(ctx context.Context, in *DescribeAppVersionReviewsRequest, opts ...grpc.CallOption) (*DescribeAppVersionReviewsResponse, error)
	// Modify version info of the app
	ModifyAppVersion(ctx context.Context, in *ModifyAppVersionRequest, opts ...grpc.CallOption) (*ModifyAppVersionResponse, error)
	// Get packages of version-specific app
	GetAppVersionPackage(ctx context.Context, in *GetAppVersionPackageRequest, opts ...grpc.CallOption) (*GetAppVersionPackageResponse, error)
	// Get app package files
	GetAppVersionPackageFiles(ctx context.Context, in *GetAppVersionPackageFilesRequest, opts ...grpc.CallOption) (*GetAppVersionPackageFilesResponse, error)
	// Submit version of the app
	SubmitAppVersion(ctx context.Context, in *SubmitAppVersionRequest, opts ...grpc.CallOption) (*SubmitAppVersionResponse, error)
	// Cancel version of the app
	CancelAppVersion(ctx context.Context, in *CancelAppVersionRequest, opts ...grpc.CallOption) (*CancelAppVersionResponse, error)
	// Release version of the app
	ReleaseAppVersion(ctx context.Context, in *ReleaseAppVersionRequest, opts ...grpc.CallOption) (*ReleaseAppVersionResponse, error)
	// Delete version of the app
	DeleteAppVersion(ctx context.Context, in *DeleteAppVersionRequest, opts ...grpc.CallOption) (*DeleteAppVersionResponse, error)
	// Operator of isv review version of the app
	IsvReviewAppVersion(ctx context.Context, in *ReviewAppVersionRequest, opts ...grpc.CallOption) (*ReviewAppVersionResponse, error)
	// Operator of isv pass version of the app
	IsvPassAppVersion(ctx context.Context, in *PassAppVersionRequest, opts ...grpc.CallOption) (*PassAppVersionResponse, error)
	// Operator of isv reject version of the app
	IsvRejectAppVersion(ctx context.Context, in *RejectAppVersionRequest, opts ...grpc.CallOption) (*RejectAppVersionResponse, error)
	// Operator of business review version of the app
	BusinessReviewAppVersion(ctx context.Context, in *ReviewAppVersionRequest, opts ...grpc.CallOption) (*ReviewAppVersionResponse, error)
	// Operator of business pass version of the app
	BusinessPassAppVersion(ctx context.Context, in *PassAppVersionRequest, opts ...grpc.CallOption) (*PassAppVersionResponse, error)
	// Operator of business reject version of the app
	BusinessRejectAppVersion(ctx context.Context, in *RejectAppVersionRequest, opts ...grpc.CallOption) (*RejectAppVersionResponse, error)
	// Operator of technical review version of the app
	TechnicalReviewAppVersion(ctx context.Context, in *ReviewAppVersionRequest, opts ...grpc.CallOption) (*ReviewAppVersionResponse, error)
	// Operator of technical pass version of the app
	TechnicalPassAppVersion(ctx context.Context, in *PassAppVersionRequest, opts ...grpc.CallOption) (*PassAppVersionResponse, error)
	// Operator of technical reject version of the app
	TechnicalRejectAppVersion(ctx context.Context, in *RejectAppVersionRequest, opts ...grpc.CallOption) (*RejectAppVersionResponse, error)
	// Operator of admin pass version of the app
	AdminPassAppVersion(ctx context.Context, in *PassAppVersionRequest, opts ...grpc.CallOption) (*PassAppVersionResponse, error)
	// Operator of admin reject version of the app
	AdminRejectAppVersion(ctx context.Context, in *RejectAppVersionRequest, opts ...grpc.CallOption) (*RejectAppVersionResponse, error)
	// Suspend app version
	SuspendAppVersion(ctx context.Context, in *SuspendAppVersionRequest, opts ...grpc.CallOption) (*SuspendAppVersionResponse, error)
	// Recover version of app
	RecoverAppVersion(ctx context.Context, in *RecoverAppVersionRequest, opts ...grpc.CallOption) (*RecoverAppVersionResponse, error)
}

type appManagerClient struct {
	cc *grpc.ClientConn
}

func NewAppManagerClient(cc *grpc.ClientConn) AppManagerClient {
	return &appManagerClient{cc}
}

func (c *appManagerClient) SyncRepo(ctx context.Context, in *SyncRepoRequest, opts ...grpc.CallOption) (*SyncRepoResponse, error) {
	out := new(SyncRepoResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/SyncRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error) {
	out := new(CreateAppResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/CreateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) ValidatePackage(ctx context.Context, in *ValidatePackageRequest, opts ...grpc.CallOption) (*ValidatePackageResponse, error) {
	out := new(ValidatePackageResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/ValidatePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) GetAppStatistics(ctx context.Context, in *GetAppStatisticsRequest, opts ...grpc.CallOption) (*GetAppStatisticsResponse, error) {
	out := new(GetAppStatisticsResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/GetAppStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) DescribeApps(ctx context.Context, in *DescribeAppsRequest, opts ...grpc.CallOption) (*DescribeAppsResponse, error) {
	out := new(DescribeAppsResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/DescribeApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) DescribeActiveApps(ctx context.Context, in *DescribeAppsRequest, opts ...grpc.CallOption) (*DescribeAppsResponse, error) {
	out := new(DescribeAppsResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/DescribeActiveApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) ModifyApp(ctx context.Context, in *ModifyAppRequest, opts ...grpc.CallOption) (*ModifyAppResponse, error) {
	out := new(ModifyAppResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/ModifyApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) UploadAppAttachment(ctx context.Context, in *UploadAppAttachmentRequest, opts ...grpc.CallOption) (*UploadAppAttachmentResponse, error) {
	out := new(UploadAppAttachmentResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/UploadAppAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) DeleteApps(ctx context.Context, in *DeleteAppsRequest, opts ...grpc.CallOption) (*DeleteAppsResponse, error) {
	out := new(DeleteAppsResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/DeleteApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) CreateAppVersion(ctx context.Context, in *CreateAppVersionRequest, opts ...grpc.CallOption) (*CreateAppVersionResponse, error) {
	out := new(CreateAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/CreateAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) DescribeAppVersions(ctx context.Context, in *DescribeAppVersionsRequest, opts ...grpc.CallOption) (*DescribeAppVersionsResponse, error) {
	out := new(DescribeAppVersionsResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/DescribeAppVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) DescribeActiveAppVersions(ctx context.Context, in *DescribeAppVersionsRequest, opts ...grpc.CallOption) (*DescribeAppVersionsResponse, error) {
	out := new(DescribeAppVersionsResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/DescribeActiveAppVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) DescribeAppVersionAudits(ctx context.Context, in *DescribeAppVersionAuditsRequest, opts ...grpc.CallOption) (*DescribeAppVersionAuditsResponse, error) {
	out := new(DescribeAppVersionAuditsResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/DescribeAppVersionAudits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) DescribeAppVersionReviews(ctx context.Context, in *DescribeAppVersionReviewsRequest, opts ...grpc.CallOption) (*DescribeAppVersionReviewsResponse, error) {
	out := new(DescribeAppVersionReviewsResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/DescribeAppVersionReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) ModifyAppVersion(ctx context.Context, in *ModifyAppVersionRequest, opts ...grpc.CallOption) (*ModifyAppVersionResponse, error) {
	out := new(ModifyAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/ModifyAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) GetAppVersionPackage(ctx context.Context, in *GetAppVersionPackageRequest, opts ...grpc.CallOption) (*GetAppVersionPackageResponse, error) {
	out := new(GetAppVersionPackageResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/GetAppVersionPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) GetAppVersionPackageFiles(ctx context.Context, in *GetAppVersionPackageFilesRequest, opts ...grpc.CallOption) (*GetAppVersionPackageFilesResponse, error) {
	out := new(GetAppVersionPackageFilesResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/GetAppVersionPackageFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) SubmitAppVersion(ctx context.Context, in *SubmitAppVersionRequest, opts ...grpc.CallOption) (*SubmitAppVersionResponse, error) {
	out := new(SubmitAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/SubmitAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) CancelAppVersion(ctx context.Context, in *CancelAppVersionRequest, opts ...grpc.CallOption) (*CancelAppVersionResponse, error) {
	out := new(CancelAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/CancelAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) ReleaseAppVersion(ctx context.Context, in *ReleaseAppVersionRequest, opts ...grpc.CallOption) (*ReleaseAppVersionResponse, error) {
	out := new(ReleaseAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/ReleaseAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) DeleteAppVersion(ctx context.Context, in *DeleteAppVersionRequest, opts ...grpc.CallOption) (*DeleteAppVersionResponse, error) {
	out := new(DeleteAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/DeleteAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) IsvReviewAppVersion(ctx context.Context, in *ReviewAppVersionRequest, opts ...grpc.CallOption) (*ReviewAppVersionResponse, error) {
	out := new(ReviewAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/IsvReviewAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) IsvPassAppVersion(ctx context.Context, in *PassAppVersionRequest, opts ...grpc.CallOption) (*PassAppVersionResponse, error) {
	out := new(PassAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/IsvPassAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) IsvRejectAppVersion(ctx context.Context, in *RejectAppVersionRequest, opts ...grpc.CallOption) (*RejectAppVersionResponse, error) {
	out := new(RejectAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/IsvRejectAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) BusinessReviewAppVersion(ctx context.Context, in *ReviewAppVersionRequest, opts ...grpc.CallOption) (*ReviewAppVersionResponse, error) {
	out := new(ReviewAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/BusinessReviewAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) BusinessPassAppVersion(ctx context.Context, in *PassAppVersionRequest, opts ...grpc.CallOption) (*PassAppVersionResponse, error) {
	out := new(PassAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/BusinessPassAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) BusinessRejectAppVersion(ctx context.Context, in *RejectAppVersionRequest, opts ...grpc.CallOption) (*RejectAppVersionResponse, error) {
	out := new(RejectAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/BusinessRejectAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) TechnicalReviewAppVersion(ctx context.Context, in *ReviewAppVersionRequest, opts ...grpc.CallOption) (*ReviewAppVersionResponse, error) {
	out := new(ReviewAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/TechnicalReviewAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) TechnicalPassAppVersion(ctx context.Context, in *PassAppVersionRequest, opts ...grpc.CallOption) (*PassAppVersionResponse, error) {
	out := new(PassAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/TechnicalPassAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) TechnicalRejectAppVersion(ctx context.Context, in *RejectAppVersionRequest, opts ...grpc.CallOption) (*RejectAppVersionResponse, error) {
	out := new(RejectAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/TechnicalRejectAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) AdminPassAppVersion(ctx context.Context, in *PassAppVersionRequest, opts ...grpc.CallOption) (*PassAppVersionResponse, error) {
	out := new(PassAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/AdminPassAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) AdminRejectAppVersion(ctx context.Context, in *RejectAppVersionRequest, opts ...grpc.CallOption) (*RejectAppVersionResponse, error) {
	out := new(RejectAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/AdminRejectAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) SuspendAppVersion(ctx context.Context, in *SuspendAppVersionRequest, opts ...grpc.CallOption) (*SuspendAppVersionResponse, error) {
	out := new(SuspendAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/SuspendAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManagerClient) RecoverAppVersion(ctx context.Context, in *RecoverAppVersionRequest, opts ...grpc.CallOption) (*RecoverAppVersionResponse, error) {
	out := new(RecoverAppVersionResponse)
	err := c.cc.Invoke(ctx, "/openpitrix.AppManager/RecoverAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppManagerServer is the server API for AppManager service.
type AppManagerServer interface {
	SyncRepo(context.Context, *SyncRepoRequest) (*SyncRepoResponse, error)
	// Create app, user of isv can create app on the platform
	CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error)
	// Validate format of package(pack by op tool)
	ValidatePackage(context.Context, *ValidatePackageRequest) (*ValidatePackageResponse, error)
	// Get statistics info of apps
	GetAppStatistics(context.Context, *GetAppStatisticsRequest) (*GetAppStatisticsResponse, error)
	// Get apps, can filter with these fields(app_id, name, repo_id, description, status, home, icon, screenshots, maintainers, sources, readme, owner, chart_name), default return all apps
	DescribeApps(context.Context, *DescribeAppsRequest) (*DescribeAppsResponse, error)
	// Get active apps, can filter with these fields(app_id, name, repo_id, description, status, home, icon, screenshots, maintainers, sources, readme, owner, chart_name), default return all apps
	DescribeActiveApps(context.Context, *DescribeAppsRequest) (*DescribeAppsResponse, error)
	// Modify app info
	ModifyApp(context.Context, *ModifyAppRequest) (*ModifyAppResponse, error)
	// Upload app attachment
	UploadAppAttachment(context.Context, *UploadAppAttachmentRequest) (*UploadAppAttachmentResponse, error)
	// Batch delete apps
	DeleteApps(context.Context, *DeleteAppsRequest) (*DeleteAppsResponse, error)
	// Create app of specific version
	CreateAppVersion(context.Context, *CreateAppVersionRequest) (*CreateAppVersionResponse, error)
	// Get versions of app, can filter with these fields(version_id, app_id, name, owner, description, package_name, status, type), default return all app versions
	DescribeAppVersions(context.Context, *DescribeAppVersionsRequest) (*DescribeAppVersionsResponse, error)
	// Get active versions of app, can filter with these fields(version_id, app_id, name, owner, description, package_name, status, type), default return all active app versions
	DescribeActiveAppVersions(context.Context, *DescribeAppVersionsRequest) (*DescribeAppVersionsResponse, error)
	// Get audits information of version-specific app, can filter with these fields(version_id, app_id, status, operator, role), default return all app version audits
	DescribeAppVersionAudits(context.Context, *DescribeAppVersionAuditsRequest) (*DescribeAppVersionAuditsResponse, error)
	// Get reviews of version-specific app, can filter with these fields(review_id, version_id, app_id, status, reviewer), default return all app version reviews
	DescribeAppVersionReviews(context.Context, *DescribeAppVersionReviewsRequest) (*DescribeAppVersionReviewsResponse, error)
	// Modify version info of the app
	ModifyAppVersion(context.Context, *ModifyAppVersionRequest) (*ModifyAppVersionResponse, error)
	// Get packages of version-specific app
	GetAppVersionPackage(context.Context, *GetAppVersionPackageRequest) (*GetAppVersionPackageResponse, error)
	// Get app package files
	GetAppVersionPackageFiles(context.Context, *GetAppVersionPackageFilesRequest) (*GetAppVersionPackageFilesResponse, error)
	// Submit version of the app
	SubmitAppVersion(context.Context, *SubmitAppVersionRequest) (*SubmitAppVersionResponse, error)
	// Cancel version of the app
	CancelAppVersion(context.Context, *CancelAppVersionRequest) (*CancelAppVersionResponse, error)
	// Release version of the app
	ReleaseAppVersion(context.Context, *ReleaseAppVersionRequest) (*ReleaseAppVersionResponse, error)
	// Delete version of the app
	DeleteAppVersion(context.Context, *DeleteAppVersionRequest) (*DeleteAppVersionResponse, error)
	// Operator of isv review version of the app
	IsvReviewAppVersion(context.Context, *ReviewAppVersionRequest) (*ReviewAppVersionResponse, error)
	// Operator of isv pass version of the app
	IsvPassAppVersion(context.Context, *PassAppVersionRequest) (*PassAppVersionResponse, error)
	// Operator of isv reject version of the app
	IsvRejectAppVersion(context.Context, *RejectAppVersionRequest) (*RejectAppVersionResponse, error)
	// Operator of business review version of the app
	BusinessReviewAppVersion(context.Context, *ReviewAppVersionRequest) (*ReviewAppVersionResponse, error)
	// Operator of business pass version of the app
	BusinessPassAppVersion(context.Context, *PassAppVersionRequest) (*PassAppVersionResponse, error)
	// Operator of business reject version of the app
	BusinessRejectAppVersion(context.Context, *RejectAppVersionRequest) (*RejectAppVersionResponse, error)
	// Operator of technical review version of the app
	TechnicalReviewAppVersion(context.Context, *ReviewAppVersionRequest) (*ReviewAppVersionResponse, error)
	// Operator of technical pass version of the app
	TechnicalPassAppVersion(context.Context, *PassAppVersionRequest) (*PassAppVersionResponse, error)
	// Operator of technical reject version of the app
	TechnicalRejectAppVersion(context.Context, *RejectAppVersionRequest) (*RejectAppVersionResponse, error)
	// Operator of admin pass version of the app
	AdminPassAppVersion(context.Context, *PassAppVersionRequest) (*PassAppVersionResponse, error)
	// Operator of admin reject version of the app
	AdminRejectAppVersion(context.Context, *RejectAppVersionRequest) (*RejectAppVersionResponse, error)
	// Suspend app version
	SuspendAppVersion(context.Context, *SuspendAppVersionRequest) (*SuspendAppVersionResponse, error)
	// Recover version of app
	RecoverAppVersion(context.Context, *RecoverAppVersionRequest) (*RecoverAppVersionResponse, error)
}

// UnimplementedAppManagerServer can be embedded to have forward compatible implementations.
type UnimplementedAppManagerServer struct {
}

func (*UnimplementedAppManagerServer) SyncRepo(ctx context.Context, req *SyncRepoRequest) (*SyncRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncRepo not implemented")
}
func (*UnimplementedAppManagerServer) CreateApp(ctx context.Context, req *CreateAppRequest) (*CreateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (*UnimplementedAppManagerServer) ValidatePackage(ctx context.Context, req *ValidatePackageRequest) (*ValidatePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePackage not implemented")
}
func (*UnimplementedAppManagerServer) GetAppStatistics(ctx context.Context, req *GetAppStatisticsRequest) (*GetAppStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppStatistics not implemented")
}
func (*UnimplementedAppManagerServer) DescribeApps(ctx context.Context, req *DescribeAppsRequest) (*DescribeAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeApps not implemented")
}
func (*UnimplementedAppManagerServer) DescribeActiveApps(ctx context.Context, req *DescribeAppsRequest) (*DescribeAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeActiveApps not implemented")
}
func (*UnimplementedAppManagerServer) ModifyApp(ctx context.Context, req *ModifyAppRequest) (*ModifyAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyApp not implemented")
}
func (*UnimplementedAppManagerServer) UploadAppAttachment(ctx context.Context, req *UploadAppAttachmentRequest) (*UploadAppAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAppAttachment not implemented")
}
func (*UnimplementedAppManagerServer) DeleteApps(ctx context.Context, req *DeleteAppsRequest) (*DeleteAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApps not implemented")
}
func (*UnimplementedAppManagerServer) CreateAppVersion(ctx context.Context, req *CreateAppVersionRequest) (*CreateAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppVersion not implemented")
}
func (*UnimplementedAppManagerServer) DescribeAppVersions(ctx context.Context, req *DescribeAppVersionsRequest) (*DescribeAppVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAppVersions not implemented")
}
func (*UnimplementedAppManagerServer) DescribeActiveAppVersions(ctx context.Context, req *DescribeAppVersionsRequest) (*DescribeAppVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeActiveAppVersions not implemented")
}
func (*UnimplementedAppManagerServer) DescribeAppVersionAudits(ctx context.Context, req *DescribeAppVersionAuditsRequest) (*DescribeAppVersionAuditsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAppVersionAudits not implemented")
}
func (*UnimplementedAppManagerServer) DescribeAppVersionReviews(ctx context.Context, req *DescribeAppVersionReviewsRequest) (*DescribeAppVersionReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAppVersionReviews not implemented")
}
func (*UnimplementedAppManagerServer) ModifyAppVersion(ctx context.Context, req *ModifyAppVersionRequest) (*ModifyAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyAppVersion not implemented")
}
func (*UnimplementedAppManagerServer) GetAppVersionPackage(ctx context.Context, req *GetAppVersionPackageRequest) (*GetAppVersionPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppVersionPackage not implemented")
}
func (*UnimplementedAppManagerServer) GetAppVersionPackageFiles(ctx context.Context, req *GetAppVersionPackageFilesRequest) (*GetAppVersionPackageFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppVersionPackageFiles not implemented")
}
func (*UnimplementedAppManagerServer) SubmitAppVersion(ctx context.Context, req *SubmitAppVersionRequest) (*SubmitAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAppVersion not implemented")
}
func (*UnimplementedAppManagerServer) CancelAppVersion(ctx context.Context, req *CancelAppVersionRequest) (*CancelAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAppVersion not implemented")
}
func (*UnimplementedAppManagerServer) ReleaseAppVersion(ctx context.Context, req *ReleaseAppVersionRequest) (*ReleaseAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseAppVersion not implemented")
}
func (*UnimplementedAppManagerServer) DeleteAppVersion(ctx context.Context, req *DeleteAppVersionRequest) (*DeleteAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppVersion not implemented")
}
func (*UnimplementedAppManagerServer) IsvReviewAppVersion(ctx context.Context, req *ReviewAppVersionRequest) (*ReviewAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsvReviewAppVersion not implemented")
}
func (*UnimplementedAppManagerServer) IsvPassAppVersion(ctx context.Context, req *PassAppVersionRequest) (*PassAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsvPassAppVersion not implemented")
}
func (*UnimplementedAppManagerServer) IsvRejectAppVersion(ctx context.Context, req *RejectAppVersionRequest) (*RejectAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsvRejectAppVersion not implemented")
}
func (*UnimplementedAppManagerServer) BusinessReviewAppVersion(ctx context.Context, req *ReviewAppVersionRequest) (*ReviewAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessReviewAppVersion not implemented")
}
func (*UnimplementedAppManagerServer) BusinessPassAppVersion(ctx context.Context, req *PassAppVersionRequest) (*PassAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessPassAppVersion not implemented")
}
func (*UnimplementedAppManagerServer) BusinessRejectAppVersion(ctx context.Context, req *RejectAppVersionRequest) (*RejectAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessRejectAppVersion not implemented")
}
func (*UnimplementedAppManagerServer) TechnicalReviewAppVersion(ctx context.Context, req *ReviewAppVersionRequest) (*ReviewAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TechnicalReviewAppVersion not implemented")
}
func (*UnimplementedAppManagerServer) TechnicalPassAppVersion(ctx context.Context, req *PassAppVersionRequest) (*PassAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TechnicalPassAppVersion not implemented")
}
func (*UnimplementedAppManagerServer) TechnicalRejectAppVersion(ctx context.Context, req *RejectAppVersionRequest) (*RejectAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TechnicalRejectAppVersion not implemented")
}
func (*UnimplementedAppManagerServer) AdminPassAppVersion(ctx context.Context, req *PassAppVersionRequest) (*PassAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminPassAppVersion not implemented")
}
func (*UnimplementedAppManagerServer) AdminRejectAppVersion(ctx context.Context, req *RejectAppVersionRequest) (*RejectAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminRejectAppVersion not implemented")
}
func (*UnimplementedAppManagerServer) SuspendAppVersion(ctx context.Context, req *SuspendAppVersionRequest) (*SuspendAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendAppVersion not implemented")
}
func (*UnimplementedAppManagerServer) RecoverAppVersion(ctx context.Context, req *RecoverAppVersionRequest) (*RecoverAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverAppVersion not implemented")
}

func RegisterAppManagerServer(s *grpc.Server, srv AppManagerServer) {
	s.RegisterService(&_AppManager_serviceDesc, srv)
}

func _AppManager_SyncRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).SyncRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/SyncRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).SyncRepo(ctx, req.(*SyncRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).CreateApp(ctx, req.(*CreateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_ValidatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).ValidatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/ValidatePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).ValidatePackage(ctx, req.(*ValidatePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_GetAppStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).GetAppStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/GetAppStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).GetAppStatistics(ctx, req.(*GetAppStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_DescribeApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).DescribeApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/DescribeApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).DescribeApps(ctx, req.(*DescribeAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_DescribeActiveApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).DescribeActiveApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/DescribeActiveApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).DescribeActiveApps(ctx, req.(*DescribeAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_ModifyApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).ModifyApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/ModifyApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).ModifyApp(ctx, req.(*ModifyAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_UploadAppAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadAppAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).UploadAppAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/UploadAppAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).UploadAppAttachment(ctx, req.(*UploadAppAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_DeleteApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).DeleteApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/DeleteApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).DeleteApps(ctx, req.(*DeleteAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_CreateAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).CreateAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/CreateAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).CreateAppVersion(ctx, req.(*CreateAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_DescribeAppVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAppVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).DescribeAppVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/DescribeAppVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).DescribeAppVersions(ctx, req.(*DescribeAppVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_DescribeActiveAppVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAppVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).DescribeActiveAppVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/DescribeActiveAppVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).DescribeActiveAppVersions(ctx, req.(*DescribeAppVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_DescribeAppVersionAudits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAppVersionAuditsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).DescribeAppVersionAudits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/DescribeAppVersionAudits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).DescribeAppVersionAudits(ctx, req.(*DescribeAppVersionAuditsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_DescribeAppVersionReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAppVersionReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).DescribeAppVersionReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/DescribeAppVersionReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).DescribeAppVersionReviews(ctx, req.(*DescribeAppVersionReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_ModifyAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).ModifyAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/ModifyAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).ModifyAppVersion(ctx, req.(*ModifyAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_GetAppVersionPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppVersionPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).GetAppVersionPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/GetAppVersionPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).GetAppVersionPackage(ctx, req.(*GetAppVersionPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_GetAppVersionPackageFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppVersionPackageFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).GetAppVersionPackageFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/GetAppVersionPackageFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).GetAppVersionPackageFiles(ctx, req.(*GetAppVersionPackageFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_SubmitAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).SubmitAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/SubmitAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).SubmitAppVersion(ctx, req.(*SubmitAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_CancelAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).CancelAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/CancelAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).CancelAppVersion(ctx, req.(*CancelAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_ReleaseAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).ReleaseAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/ReleaseAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).ReleaseAppVersion(ctx, req.(*ReleaseAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_DeleteAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).DeleteAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/DeleteAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).DeleteAppVersion(ctx, req.(*DeleteAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_IsvReviewAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).IsvReviewAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/IsvReviewAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).IsvReviewAppVersion(ctx, req.(*ReviewAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_IsvPassAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).IsvPassAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/IsvPassAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).IsvPassAppVersion(ctx, req.(*PassAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_IsvRejectAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).IsvRejectAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/IsvRejectAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).IsvRejectAppVersion(ctx, req.(*RejectAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_BusinessReviewAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).BusinessReviewAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/BusinessReviewAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).BusinessReviewAppVersion(ctx, req.(*ReviewAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_BusinessPassAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).BusinessPassAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/BusinessPassAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).BusinessPassAppVersion(ctx, req.(*PassAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_BusinessRejectAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).BusinessRejectAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/BusinessRejectAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).BusinessRejectAppVersion(ctx, req.(*RejectAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_TechnicalReviewAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).TechnicalReviewAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/TechnicalReviewAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).TechnicalReviewAppVersion(ctx, req.(*ReviewAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_TechnicalPassAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).TechnicalPassAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/TechnicalPassAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).TechnicalPassAppVersion(ctx, req.(*PassAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_TechnicalRejectAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).TechnicalRejectAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/TechnicalRejectAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).TechnicalRejectAppVersion(ctx, req.(*RejectAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_AdminPassAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).AdminPassAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/AdminPassAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).AdminPassAppVersion(ctx, req.(*PassAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_AdminRejectAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).AdminRejectAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/AdminRejectAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).AdminRejectAppVersion(ctx, req.(*RejectAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_SuspendAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).SuspendAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/SuspendAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).SuspendAppVersion(ctx, req.(*SuspendAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManager_RecoverAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManagerServer).RecoverAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openpitrix.AppManager/RecoverAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManagerServer).RecoverAppVersion(ctx, req.(*RecoverAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openpitrix.AppManager",
	HandlerType: (*AppManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncRepo",
			Handler:    _AppManager_SyncRepo_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _AppManager_CreateApp_Handler,
		},
		{
			MethodName: "ValidatePackage",
			Handler:    _AppManager_ValidatePackage_Handler,
		},
		{
			MethodName: "GetAppStatistics",
			Handler:    _AppManager_GetAppStatistics_Handler,
		},
		{
			MethodName: "DescribeApps",
			Handler:    _AppManager_DescribeApps_Handler,
		},
		{
			MethodName: "DescribeActiveApps",
			Handler:    _AppManager_DescribeActiveApps_Handler,
		},
		{
			MethodName: "ModifyApp",
			Handler:    _AppManager_ModifyApp_Handler,
		},
		{
			MethodName: "UploadAppAttachment",
			Handler:    _AppManager_UploadAppAttachment_Handler,
		},
		{
			MethodName: "DeleteApps",
			Handler:    _AppManager_DeleteApps_Handler,
		},
		{
			MethodName: "CreateAppVersion",
			Handler:    _AppManager_CreateAppVersion_Handler,
		},
		{
			MethodName: "DescribeAppVersions",
			Handler:    _AppManager_DescribeAppVersions_Handler,
		},
		{
			MethodName: "DescribeActiveAppVersions",
			Handler:    _AppManager_DescribeActiveAppVersions_Handler,
		},
		{
			MethodName: "DescribeAppVersionAudits",
			Handler:    _AppManager_DescribeAppVersionAudits_Handler,
		},
		{
			MethodName: "DescribeAppVersionReviews",
			Handler:    _AppManager_DescribeAppVersionReviews_Handler,
		},
		{
			MethodName: "ModifyAppVersion",
			Handler:    _AppManager_ModifyAppVersion_Handler,
		},
		{
			MethodName: "GetAppVersionPackage",
			Handler:    _AppManager_GetAppVersionPackage_Handler,
		},
		{
			MethodName: "GetAppVersionPackageFiles",
			Handler:    _AppManager_GetAppVersionPackageFiles_Handler,
		},
		{
			MethodName: "SubmitAppVersion",
			Handler:    _AppManager_SubmitAppVersion_Handler,
		},
		{
			MethodName: "CancelAppVersion",
			Handler:    _AppManager_CancelAppVersion_Handler,
		},
		{
			MethodName: "ReleaseAppVersion",
			Handler:    _AppManager_ReleaseAppVersion_Handler,
		},
		{
			MethodName: "DeleteAppVersion",
			Handler:    _AppManager_DeleteAppVersion_Handler,
		},
		{
			MethodName: "IsvReviewAppVersion",
			Handler:    _AppManager_IsvReviewAppVersion_Handler,
		},
		{
			MethodName: "IsvPassAppVersion",
			Handler:    _AppManager_IsvPassAppVersion_Handler,
		},
		{
			MethodName: "IsvRejectAppVersion",
			Handler:    _AppManager_IsvRejectAppVersion_Handler,
		},
		{
			MethodName: "BusinessReviewAppVersion",
			Handler:    _AppManager_BusinessReviewAppVersion_Handler,
		},
		{
			MethodName: "BusinessPassAppVersion",
			Handler:    _AppManager_BusinessPassAppVersion_Handler,
		},
		{
			MethodName: "BusinessRejectAppVersion",
			Handler:    _AppManager_BusinessRejectAppVersion_Handler,
		},
		{
			MethodName: "TechnicalReviewAppVersion",
			Handler:    _AppManager_TechnicalReviewAppVersion_Handler,
		},
		{
			MethodName: "TechnicalPassAppVersion",
			Handler:    _AppManager_TechnicalPassAppVersion_Handler,
		},
		{
			MethodName: "TechnicalRejectAppVersion",
			Handler:    _AppManager_TechnicalRejectAppVersion_Handler,
		},
		{
			MethodName: "AdminPassAppVersion",
			Handler:    _AppManager_AdminPassAppVersion_Handler,
		},
		{
			MethodName: "AdminRejectAppVersion",
			Handler:    _AppManager_AdminRejectAppVersion_Handler,
		},
		{
			MethodName: "SuspendAppVersion",
			Handler:    _AppManager_SuspendAppVersion_Handler,
		},
		{
			MethodName: "RecoverAppVersion",
			Handler:    _AppManager_RecoverAppVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app.proto",
}
